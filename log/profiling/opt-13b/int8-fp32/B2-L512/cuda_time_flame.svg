<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (989,688 us., 6.46%)</title><rect x="875.3" y="229" width="76.3" height="15.0" fill="rgb(236,195,52)" rx="2" ry="2" />
<text  x="878.29" y="239.5" >torch/au..</text>
</g>
<g >
<title>&lt;built-in_method_dq_add_layernorm_q_of_PyCapsule_object_at_0x7f8719b8ff30&gt; (2,858,643 us., 18.67%)</title><rect x="191.2" y="261" width="220.3" height="15.0" fill="rgb(239,43,24)" rx="2" ry="2" />
<text  x="194.17" y="271.5" >&lt;built-in_method_dq_add_layer..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (129,237 us., 0.84%)</title><rect x="830.9" y="117" width="9.9" height="15.0" fill="rgb(239,35,42)" rx="2" ry="2" />
<text  x="833.88" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (347,091 us., 2.27%)</title><rect x="491.4" y="197" width="26.7" height="15.0" fill="rgb(212,117,52)" rx="2" ry="2" />
<text  x="494.38" y="207.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (347,091 us., 2.27%)</title><rect x="491.4" y="117" width="26.7" height="15.0" fill="rgb(242,64,20)" rx="2" ry="2" />
<text  x="494.38" y="127.5" >t..</text>
</g>
<g >
<title>all (15,311,407 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(226,176,50)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (126,092 us., 0.82%)</title><rect x="821.2" y="133" width="9.7" height="15.0" fill="rgb(252,29,39)" rx="2" ry="2" />
<text  x="824.17" y="143.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b32_o32_with_scaling_of_PyCapsule_object_at_0x7f8719b8fed0&gt; (255,329 us., 1.67%)</title><rect x="821.2" y="261" width="19.6" height="15.0" fill="rgb(243,199,11)" rx="2" ry="2" />
<text  x="824.17" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,073,231 us., 20.07%)</title><rect x="953.1" y="133" width="236.9" height="15.0" fill="rgb(210,105,42)" rx="2" ry="2" />
<text  x="956.11" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (994,959 us., 6.50%)</title><rect x="412.6" y="181" width="76.7" height="15.0" fill="rgb(210,47,44)" rx="2" ry="2" />
<text  x="415.58" y="191.5" >torch_in..</text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f8719b8fe70&gt; (236,017 us., 1.54%)</title><rect x="857.1" y="261" width="18.2" height="15.0" fill="rgb(208,150,30)" rx="2" ry="2" />
<text  x="860.10" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (19,284 us., 0.13%)</title><rect x="489.9" y="245" width="1.5" height="15.0" fill="rgb(206,1,24)" rx="2" ry="2" />
<text  x="492.89" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (126,092 us., 0.82%)</title><rect x="821.2" y="165" width="9.7" height="15.0" fill="rgb(206,187,13)" rx="2" ry="2" />
<text  x="824.17" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (8,257 us., 0.05%)</title><rect x="489.3" y="149" width="0.6" height="15.0" fill="rgb(253,175,54)" rx="2" ry="2" />
<text  x="492.25" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (129,237 us., 0.84%)</title><rect x="830.9" y="101" width="9.9" height="15.0" fill="rgb(253,178,9)" rx="2" ry="2" />
<text  x="833.88" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (210,906 us., 1.38%)</title><rect x="840.8" y="133" width="16.3" height="15.0" fill="rgb(229,21,28)" rx="2" ry="2" />
<text  x="843.84" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (126,092 us., 0.82%)</title><rect x="821.2" y="117" width="9.7" height="15.0" fill="rgb(228,222,21)" rx="2" ry="2" />
<text  x="824.17" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,097 us., 0.02%)</title><rect x="951.6" y="181" width="0.2" height="15.0" fill="rgb(244,49,27)" rx="2" ry="2" />
<text  x="954.60" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (989,688 us., 6.46%)</title><rect x="875.3" y="85" width="76.3" height="15.0" fill="rgb(215,176,10)" rx="2" ry="2" />
<text  x="878.29" y="95.5" >torch/au..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (347,091 us., 2.27%)</title><rect x="491.4" y="165" width="26.7" height="15.0" fill="rgb(209,4,18)" rx="2" ry="2" />
<text  x="494.38" y="175.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (347,091 us., 2.27%)</title><rect x="491.4" y="149" width="26.7" height="15.0" fill="rgb(211,207,33)" rx="2" ry="2" />
<text  x="494.38" y="159.5" >t..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (1,926 us., 0.01%)</title><rect x="191.0" y="229" width="0.2" height="15.0" fill="rgb(209,177,54)" rx="2" ry="2" />
<text  x="194.02" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (994,959 us., 6.50%)</title><rect x="412.6" y="69" width="76.7" height="15.0" fill="rgb(217,142,1)" rx="2" ry="2" />
<text  x="415.58" y="79.5" >torch/au..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (129,237 us., 0.84%)</title><rect x="830.9" y="181" width="9.9" height="15.0" fill="rgb(250,153,14)" rx="2" ry="2" />
<text  x="833.88" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (236,017 us., 1.54%)</title><rect x="857.1" y="101" width="18.2" height="15.0" fill="rgb(220,117,38)" rx="2" ry="2" />
<text  x="860.10" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (8,257 us., 0.05%)</title><rect x="489.3" y="213" width="0.6" height="15.0" fill="rgb(241,145,52)" rx="2" ry="2" />
<text  x="492.25" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (347,091 us., 2.27%)</title><rect x="491.4" y="101" width="26.7" height="15.0" fill="rgb(240,103,18)" rx="2" ry="2" />
<text  x="494.38" y="111.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (19,284 us., 0.13%)</title><rect x="489.9" y="165" width="1.5" height="15.0" fill="rgb(253,33,14)" rx="2" ry="2" />
<text  x="492.89" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,073,231 us., 20.07%)</title><rect x="953.1" y="117" width="236.9" height="15.0" fill="rgb(218,122,48)" rx="2" ry="2" />
<text  x="956.11" y="127.5" >profiling/utils.py(18):_profile..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (7,112 us., 0.05%)</title><rect x="412.0" y="101" width="0.6" height="15.0" fill="rgb(208,172,6)" rx="2" ry="2" />
<text  x="415.03" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,920,498 us., 25.61%)</title><rect x="518.1" y="85" width="302.2" height="15.0" fill="rgb(205,100,12)" rx="2" ry="2" />
<text  x="521.13" y="95.5" >torch/autograd/grad_mode.py(27):_decorat..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (129,237 us., 0.84%)</title><rect x="830.9" y="53" width="9.9" height="15.0" fill="rgb(206,85,7)" rx="2" ry="2" />
<text  x="833.88" y="63.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (989,688 us., 6.46%)</title><rect x="875.3" y="117" width="76.3" height="15.0" fill="rgb(210,81,24)" rx="2" ry="2" />
<text  x="878.29" y="127.5" >nn.Modul..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (989,688 us., 6.46%)</title><rect x="875.3" y="197" width="76.3" height="15.0" fill="rgb(245,60,8)" rx="2" ry="2" />
<text  x="878.29" y="207.5" >torch_in..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (7,112 us., 0.05%)</title><rect x="412.0" y="213" width="0.6" height="15.0" fill="rgb(232,76,24)" rx="2" ry="2" />
<text  x="415.03" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (3,073,231 us., 20.07%)</title><rect x="953.1" y="261" width="236.9" height="15.0" fill="rgb(243,87,19)" rx="2" ry="2" />
<text  x="956.11" y="271.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (347,091 us., 2.27%)</title><rect x="491.4" y="213" width="26.7" height="15.0" fill="rgb(216,172,8)" rx="2" ry="2" />
<text  x="494.38" y="223.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (347,091 us., 2.27%)</title><rect x="491.4" y="69" width="26.7" height="15.0" fill="rgb(227,62,13)" rx="2" ry="2" />
<text  x="494.38" y="79.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (8,257 us., 0.05%)</title><rect x="489.3" y="229" width="0.6" height="15.0" fill="rgb(247,215,26)" rx="2" ry="2" />
<text  x="492.25" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (7,115 us., 0.05%)</title><rect x="411.5" y="133" width="0.5" height="15.0" fill="rgb(246,190,36)" rx="2" ry="2" />
<text  x="414.48" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (9,482 us., 0.06%)</title><rect x="190.3" y="245" width="0.7" height="15.0" fill="rgb(217,153,31)" rx="2" ry="2" />
<text  x="193.29" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (7,112 us., 0.05%)</title><rect x="412.0" y="133" width="0.6" height="15.0" fill="rgb(222,171,31)" rx="2" ry="2" />
<text  x="415.03" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,920,498 us., 25.61%)</title><rect x="518.1" y="149" width="302.2" height="15.0" fill="rgb(254,218,17)" rx="2" ry="2" />
<text  x="521.13" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,926 us., 0.01%)</title><rect x="191.0" y="149" width="0.2" height="15.0" fill="rgb(253,227,13)" rx="2" ry="2" />
<text  x="194.02" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (19,284 us., 0.13%)</title><rect x="489.9" y="197" width="1.5" height="15.0" fill="rgb(226,205,34)" rx="2" ry="2" />
<text  x="492.89" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (347,091 us., 2.27%)</title><rect x="491.4" y="229" width="26.7" height="15.0" fill="rgb(213,116,24)" rx="2" ry="2" />
<text  x="494.38" y="239.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (15,784 us., 0.10%)</title><rect x="951.9" y="245" width="1.2" height="15.0" fill="rgb(247,109,54)" rx="2" ry="2" />
<text  x="954.89" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (2,858,643 us., 18.67%)</title><rect x="191.2" y="181" width="220.3" height="15.0" fill="rgb(219,122,35)" rx="2" ry="2" />
<text  x="194.17" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,339,447 us., 15.28%)</title><rect x="10.0" y="181" width="180.3" height="15.0" fill="rgb(211,164,31)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >profiling/utils.py(18):..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (7,112 us., 0.05%)</title><rect x="412.0" y="165" width="0.6" height="15.0" fill="rgb(241,66,48)" rx="2" ry="2" />
<text  x="415.03" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (210,906 us., 1.38%)</title><rect x="840.8" y="69" width="16.3" height="15.0" fill="rgb(246,107,4)" rx="2" ry="2" />
<text  x="843.84" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (210,906 us., 1.38%)</title><rect x="840.8" y="197" width="16.3" height="15.0" fill="rgb(233,34,1)" rx="2" ry="2" />
<text  x="843.84" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (994,959 us., 6.50%)</title><rect x="412.6" y="149" width="76.7" height="15.0" fill="rgb(227,194,40)" rx="2" ry="2" />
<text  x="415.58" y="159.5" >torch_in..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (989,688 us., 6.46%)</title><rect x="875.3" y="213" width="76.3" height="15.0" fill="rgb(227,118,33)" rx="2" ry="2" />
<text  x="878.29" y="223.5" >nn.Modul..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (9,482 us., 0.06%)</title><rect x="190.3" y="229" width="0.7" height="15.0" fill="rgb(243,45,23)" rx="2" ry="2" />
<text  x="193.29" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (3,920,498 us., 25.61%)</title><rect x="518.1" y="229" width="302.2" height="15.0" fill="rgb(254,110,0)" rx="2" ry="2" />
<text  x="521.13" y="239.5" >torch/autograd/grad_mode.py(24):_decorat..</text>
</g>
<g >
<title>torch_int/functional/fused.py(24):_dq_add_layernorm_q_cpp (2,858,643 us., 18.67%)</title><rect x="191.2" y="245" width="220.3" height="15.0" fill="rgb(224,24,48)" rx="2" ry="2" />
<text  x="194.17" y="255.5" >torch_int/functional/fused.py..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (15,784 us., 0.10%)</title><rect x="951.9" y="213" width="1.2" height="15.0" fill="rgb(218,86,27)" rx="2" ry="2" />
<text  x="954.89" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,339,447 us., 15.28%)</title><rect x="10.0" y="197" width="180.3" height="15.0" fill="rgb(242,22,48)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >nn.Module:_Int8OPTForCa..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,097 us., 0.02%)</title><rect x="951.6" y="229" width="0.2" height="15.0" fill="rgb(225,212,15)" rx="2" ry="2" />
<text  x="954.60" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (989,688 us., 6.46%)</title><rect x="875.3" y="165" width="76.3" height="15.0" fill="rgb(219,211,17)" rx="2" ry="2" />
<text  x="878.29" y="175.5" >torch_in..</text>
</g>
<g >
<title>torch_int/nn/opt.py(300):__prepare_decoder_attention_mask (1,969 us., 0.01%)</title><rect x="820.3" y="229" width="0.1" height="15.0" fill="rgb(229,118,44)" rx="2" ry="2" />
<text  x="823.30" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (9,482 us., 0.06%)</title><rect x="190.3" y="213" width="0.7" height="15.0" fill="rgb(240,43,29)" rx="2" ry="2" />
<text  x="193.29" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (210,906 us., 1.38%)</title><rect x="840.8" y="85" width="16.3" height="15.0" fill="rgb(221,103,52)" rx="2" ry="2" />
<text  x="843.84" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (126,092 us., 0.82%)</title><rect x="821.2" y="149" width="9.7" height="15.0" fill="rgb(228,134,23)" rx="2" ry="2" />
<text  x="824.17" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (236,017 us., 1.54%)</title><rect x="857.1" y="149" width="18.2" height="15.0" fill="rgb(222,80,18)" rx="2" ry="2" />
<text  x="860.10" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (7,115 us., 0.05%)</title><rect x="411.5" y="165" width="0.5" height="15.0" fill="rgb(249,210,7)" rx="2" ry="2" />
<text  x="414.48" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,926 us., 0.01%)</title><rect x="191.0" y="181" width="0.2" height="15.0" fill="rgb(237,27,35)" rx="2" ry="2" />
<text  x="194.02" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,920,498 us., 25.61%)</title><rect x="518.1" y="101" width="302.2" height="15.0" fill="rgb(220,38,54)" rx="2" ry="2" />
<text  x="521.13" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,339,447 us., 15.28%)</title><rect x="10.0" y="213" width="180.3" height="15.0" fill="rgb(234,111,3)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >transformers/models/opt..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,920,498 us., 25.61%)</title><rect x="518.1" y="133" width="302.2" height="15.0" fill="rgb(250,104,31)" rx="2" ry="2" />
<text  x="521.13" y="143.5" >transformers/models/opt/modeling_opt.py(..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,969 us., 0.01%)</title><rect x="820.3" y="149" width="0.1" height="15.0" fill="rgb(244,79,15)" rx="2" ry="2" />
<text  x="823.30" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (9,345 us., 0.06%)</title><rect x="820.4" y="165" width="0.8" height="15.0" fill="rgb(237,172,43)" rx="2" ry="2" />
<text  x="823.45" y="175.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (14,227 us., 0.09%)</title><rect x="411.5" y="245" width="1.1" height="15.0" fill="rgb(241,76,25)" rx="2" ry="2" />
<text  x="414.48" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (15,784 us., 0.10%)</title><rect x="951.9" y="229" width="1.2" height="15.0" fill="rgb(248,96,18)" rx="2" ry="2" />
<text  x="954.89" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (9,345 us., 0.06%)</title><rect x="820.4" y="149" width="0.8" height="15.0" fill="rgb(249,180,28)" rx="2" ry="2" />
<text  x="823.45" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (989,688 us., 6.46%)</title><rect x="875.3" y="133" width="76.3" height="15.0" fill="rgb(239,9,34)" rx="2" ry="2" />
<text  x="878.29" y="143.5" >transfor..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (210,906 us., 1.38%)</title><rect x="840.8" y="165" width="16.3" height="15.0" fill="rgb(208,107,26)" rx="2" ry="2" />
<text  x="843.84" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (19,284 us., 0.13%)</title><rect x="489.9" y="181" width="1.5" height="15.0" fill="rgb(218,52,54)" rx="2" ry="2" />
<text  x="492.89" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,097 us., 0.02%)</title><rect x="951.6" y="197" width="0.2" height="15.0" fill="rgb(218,224,41)" rx="2" ry="2" />
<text  x="954.60" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (347,091 us., 2.27%)</title><rect x="491.4" y="133" width="26.7" height="15.0" fill="rgb(228,101,39)" rx="2" ry="2" />
<text  x="494.38" y="143.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (236,017 us., 1.54%)</title><rect x="857.1" y="85" width="18.2" height="15.0" fill="rgb(242,79,47)" rx="2" ry="2" />
<text  x="860.10" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (3,073,231 us., 20.07%)</title><rect x="953.1" y="213" width="236.9" height="15.0" fill="rgb(218,181,2)" rx="2" ry="2" />
<text  x="956.11" y="223.5" >torch_int/nn/opt.py(183):_forward</text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7f880e6fc9c0&gt; (9,345 us., 0.06%)</title><rect x="820.4" y="261" width="0.8" height="15.0" fill="rgb(224,184,20)" rx="2" ry="2" />
<text  x="823.45" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (236,017 us., 1.54%)</title><rect x="857.1" y="165" width="18.2" height="15.0" fill="rgb(238,218,34)" rx="2" ry="2" />
<text  x="860.10" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (7,115 us., 0.05%)</title><rect x="411.5" y="117" width="0.5" height="15.0" fill="rgb(252,187,41)" rx="2" ry="2" />
<text  x="414.48" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (7,112 us., 0.05%)</title><rect x="412.0" y="197" width="0.6" height="15.0" fill="rgb(215,62,3)" rx="2" ry="2" />
<text  x="415.03" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (7,112 us., 0.05%)</title><rect x="412.0" y="181" width="0.6" height="15.0" fill="rgb(237,160,23)" rx="2" ry="2" />
<text  x="415.03" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (347,091 us., 2.27%)</title><rect x="491.4" y="85" width="26.7" height="15.0" fill="rgb(241,221,9)" rx="2" ry="2" />
<text  x="494.38" y="95.5" >p..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,969 us., 0.01%)</title><rect x="820.3" y="165" width="0.1" height="15.0" fill="rgb(246,99,26)" rx="2" ry="2" />
<text  x="823.30" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,858,643 us., 18.67%)</title><rect x="191.2" y="133" width="220.3" height="15.0" fill="rgb(248,66,6)" rx="2" ry="2" />
<text  x="194.17" y="143.5" >transformers/models/opt/model..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (15,784 us., 0.10%)</title><rect x="951.9" y="261" width="1.2" height="15.0" fill="rgb(248,189,19)" rx="2" ry="2" />
<text  x="954.89" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNorm (9,345 us., 0.06%)</title><rect x="820.4" y="213" width="0.8" height="15.0" fill="rgb(210,175,53)" rx="2" ry="2" />
<text  x="823.45" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (19,284 us., 0.13%)</title><rect x="489.9" y="213" width="1.5" height="15.0" fill="rgb(223,175,50)" rx="2" ry="2" />
<text  x="492.89" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_DQ_Add_LayerNorm_Q (2,858,643 us., 18.67%)</title><rect x="191.2" y="213" width="220.3" height="15.0" fill="rgb(249,141,35)" rx="2" ry="2" />
<text  x="194.17" y="223.5" >nn.Module:_DQ_Add_LayerNorm_Q</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (210,906 us., 1.38%)</title><rect x="840.8" y="101" width="16.3" height="15.0" fill="rgb(243,196,12)" rx="2" ry="2" />
<text  x="843.84" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (994,959 us., 6.50%)</title><rect x="412.6" y="165" width="76.7" height="15.0" fill="rgb(247,213,30)" rx="2" ry="2" />
<text  x="415.58" y="175.5" >nn.Modul..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (2,858,643 us., 18.67%)</title><rect x="191.2" y="165" width="220.3" height="15.0" fill="rgb(207,214,20)" rx="2" ry="2" />
<text  x="194.17" y="175.5" >torch_int/nn/opt.py(321):_for..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (236,017 us., 1.54%)</title><rect x="857.1" y="197" width="18.2" height="15.0" fill="rgb(206,179,36)" rx="2" ry="2" />
<text  x="860.10" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,858,643 us., 18.67%)</title><rect x="191.2" y="85" width="220.3" height="15.0" fill="rgb(248,76,13)" rx="2" ry="2" />
<text  x="194.17" y="95.5" >torch/autograd/grad_mode.py(2..</text>
</g>
<g >
<title>&lt;built-in_method_add_of_type_object_at_0x7f880e6fc9c0&gt; (9,482 us., 0.06%)</title><rect x="190.3" y="261" width="0.7" height="15.0" fill="rgb(237,103,31)" rx="2" ry="2" />
<text  x="193.29" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (7,115 us., 0.05%)</title><rect x="411.5" y="149" width="0.5" height="15.0" fill="rgb(252,188,1)" rx="2" ry="2" />
<text  x="414.48" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (236,017 us., 1.54%)</title><rect x="857.1" y="229" width="18.2" height="15.0" fill="rgb(212,21,30)" rx="2" ry="2" />
<text  x="860.10" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,858,643 us., 18.67%)</title><rect x="191.2" y="149" width="220.3" height="15.0" fill="rgb(223,200,21)" rx="2" ry="2" />
<text  x="194.17" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (3,073,231 us., 20.07%)</title><rect x="953.1" y="229" width="236.9" height="15.0" fill="rgb(219,121,23)" rx="2" ry="2" />
<text  x="956.11" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (210,906 us., 1.38%)</title><rect x="840.8" y="37" width="16.3" height="15.0" fill="rgb(224,66,22)" rx="2" ry="2" />
<text  x="843.84" y="47.5" ></text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (2,858,643 us., 18.67%)</title><rect x="191.2" y="229" width="220.3" height="15.0" fill="rgb(212,200,37)" rx="2" ry="2" />
<text  x="194.17" y="239.5" >torch_int/nn/fused.py(13):_fo..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,969 us., 0.01%)</title><rect x="820.3" y="213" width="0.1" height="15.0" fill="rgb(252,222,11)" rx="2" ry="2" />
<text  x="823.30" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(300):__prepare_decoder_attention_mask (8,257 us., 0.05%)</title><rect x="489.3" y="245" width="0.6" height="15.0" fill="rgb(234,207,17)" rx="2" ry="2" />
<text  x="492.25" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,858,643 us., 18.67%)</title><rect x="191.2" y="117" width="220.3" height="15.0" fill="rgb(210,179,24)" rx="2" ry="2" />
<text  x="194.17" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,926 us., 0.01%)</title><rect x="191.0" y="197" width="0.2" height="15.0" fill="rgb(253,201,43)" rx="2" ry="2" />
<text  x="194.02" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (994,959 us., 6.50%)</title><rect x="412.6" y="213" width="76.7" height="15.0" fill="rgb(231,211,2)" rx="2" ry="2" />
<text  x="415.58" y="223.5" >torch/au..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (9,482 us., 0.06%)</title><rect x="190.3" y="165" width="0.7" height="15.0" fill="rgb(236,223,41)" rx="2" ry="2" />
<text  x="193.29" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (994,959 us., 6.50%)</title><rect x="412.6" y="85" width="76.7" height="15.0" fill="rgb(205,90,11)" rx="2" ry="2" />
<text  x="415.58" y="95.5" >profilin..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (236,017 us., 1.54%)</title><rect x="857.1" y="117" width="18.2" height="15.0" fill="rgb(228,120,45)" rx="2" ry="2" />
<text  x="860.10" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (9,345 us., 0.06%)</title><rect x="820.4" y="197" width="0.8" height="15.0" fill="rgb(220,129,2)" rx="2" ry="2" />
<text  x="823.45" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (7,115 us., 0.05%)</title><rect x="411.5" y="197" width="0.5" height="15.0" fill="rgb(206,154,23)" rx="2" ry="2" />
<text  x="414.48" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,926 us., 0.01%)</title><rect x="191.0" y="133" width="0.2" height="15.0" fill="rgb(217,110,22)" rx="2" ry="2" />
<text  x="194.02" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (989,688 us., 6.46%)</title><rect x="875.3" y="149" width="76.3" height="15.0" fill="rgb(254,225,17)" rx="2" ry="2" />
<text  x="878.29" y="159.5" >nn.Modul..</text>
</g>
<g >
<title>nn.Module:_Embedding (7,115 us., 0.05%)</title><rect x="411.5" y="213" width="0.5" height="15.0" fill="rgb(251,175,29)" rx="2" ry="2" />
<text  x="414.48" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (994,959 us., 6.50%)</title><rect x="412.6" y="229" width="76.7" height="15.0" fill="rgb(254,83,26)" rx="2" ry="2" />
<text  x="415.58" y="239.5" >torch_in..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (8,257 us., 0.05%)</title><rect x="489.3" y="165" width="0.6" height="15.0" fill="rgb(206,163,32)" rx="2" ry="2" />
<text  x="492.25" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(92):_forward (210,906 us., 1.38%)</title><rect x="840.8" y="245" width="16.3" height="15.0" fill="rgb(214,124,22)" rx="2" ry="2" />
<text  x="843.84" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (129,237 us., 0.84%)</title><rect x="830.9" y="133" width="9.9" height="15.0" fill="rgb(216,73,18)" rx="2" ry="2" />
<text  x="833.88" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (126,092 us., 0.82%)</title><rect x="821.2" y="85" width="9.7" height="15.0" fill="rgb(221,116,27)" rx="2" ry="2" />
<text  x="824.17" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (3,920,498 us., 25.61%)</title><rect x="518.1" y="245" width="302.2" height="15.0" fill="rgb(205,196,46)" rx="2" ry="2" />
<text  x="521.13" y="255.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,073,231 us., 20.07%)</title><rect x="953.1" y="149" width="236.9" height="15.0" fill="rgb(251,128,6)" rx="2" ry="2" />
<text  x="956.11" y="159.5" >transformers/models/opt/modelin..</text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (2,339,447 us., 15.28%)</title><rect x="10.0" y="245" width="180.3" height="15.0" fill="rgb(218,21,45)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >torch/nn/modules/linear..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (3,920,498 us., 25.61%)</title><rect x="518.1" y="165" width="302.2" height="15.0" fill="rgb(215,156,51)" rx="2" ry="2" />
<text  x="521.13" y="175.5" >torch_int/nn/opt.py(321):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (210,906 us., 1.38%)</title><rect x="840.8" y="181" width="16.3" height="15.0" fill="rgb(237,84,51)" rx="2" ry="2" />
<text  x="843.84" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (9,345 us., 0.06%)</title><rect x="820.4" y="133" width="0.8" height="15.0" fill="rgb(213,134,51)" rx="2" ry="2" />
<text  x="823.45" y="143.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (2,339,447 us., 15.28%)</title><rect x="10.0" y="261" width="180.3" height="15.0" fill="rgb(209,129,5)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;built-in_function_line..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (210,906 us., 1.38%)</title><rect x="840.8" y="53" width="16.3" height="15.0" fill="rgb(241,190,18)" rx="2" ry="2" />
<text  x="843.84" y="63.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,926 us., 0.01%)</title><rect x="191.0" y="165" width="0.2" height="15.0" fill="rgb(210,100,44)" rx="2" ry="2" />
<text  x="194.02" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,926 us., 0.01%)</title><rect x="191.0" y="213" width="0.2" height="15.0" fill="rgb(216,111,33)" rx="2" ry="2" />
<text  x="194.02" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (210,906 us., 1.38%)</title><rect x="840.8" y="229" width="16.3" height="15.0" fill="rgb(217,11,35)" rx="2" ry="2" />
<text  x="843.84" y="239.5" ></text>
</g>
<g >
<title>&lt;built-in_method_cumsum_of_type_object_at_0x7f880e6fc9c0&gt; (1,926 us., 0.01%)</title><rect x="191.0" y="261" width="0.2" height="15.0" fill="rgb(225,90,11)" rx="2" ry="2" />
<text  x="194.02" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (3,097 us., 0.02%)</title><rect x="951.6" y="245" width="0.2" height="15.0" fill="rgb(233,188,31)" rx="2" ry="2" />
<text  x="954.60" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (129,237 us., 0.84%)</title><rect x="830.9" y="37" width="9.9" height="15.0" fill="rgb(205,198,12)" rx="2" ry="2" />
<text  x="833.88" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (236,017 us., 1.54%)</title><rect x="857.1" y="181" width="18.2" height="15.0" fill="rgb(253,54,14)" rx="2" ry="2" />
<text  x="860.10" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (3,073,231 us., 20.07%)</title><rect x="953.1" y="245" width="236.9" height="15.0" fill="rgb(220,190,6)" rx="2" ry="2" />
<text  x="956.11" y="255.5" >torch/autograd/grad_mode.py(24)..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (3,920,498 us., 25.61%)</title><rect x="518.1" y="181" width="302.2" height="15.0" fill="rgb(245,16,7)" rx="2" ry="2" />
<text  x="521.13" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,969 us., 0.01%)</title><rect x="820.3" y="133" width="0.1" height="15.0" fill="rgb(231,109,10)" rx="2" ry="2" />
<text  x="823.30" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (129,237 us., 0.84%)</title><rect x="830.9" y="197" width="9.9" height="15.0" fill="rgb(237,8,5)" rx="2" ry="2" />
<text  x="833.88" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (129,237 us., 0.84%)</title><rect x="830.9" y="85" width="9.9" height="15.0" fill="rgb(221,42,26)" rx="2" ry="2" />
<text  x="833.88" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(62):_forward (255,329 us., 1.67%)</title><rect x="821.2" y="245" width="19.6" height="15.0" fill="rgb(242,162,9)" rx="2" ry="2" />
<text  x="824.17" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,969 us., 0.01%)</title><rect x="820.3" y="197" width="0.1" height="15.0" fill="rgb(232,187,45)" rx="2" ry="2" />
<text  x="823.30" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (129,237 us., 0.84%)</title><rect x="830.9" y="165" width="9.9" height="15.0" fill="rgb(240,204,10)" rx="2" ry="2" />
<text  x="833.88" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (1,926 us., 0.01%)</title><rect x="191.0" y="245" width="0.2" height="15.0" fill="rgb(246,114,52)" rx="2" ry="2" />
<text  x="194.02" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (15,784 us., 0.10%)</title><rect x="951.9" y="181" width="1.2" height="15.0" fill="rgb(207,54,21)" rx="2" ry="2" />
<text  x="954.89" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (210,906 us., 1.38%)</title><rect x="840.8" y="117" width="16.3" height="15.0" fill="rgb(228,155,1)" rx="2" ry="2" />
<text  x="843.84" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (9,482 us., 0.06%)</title><rect x="190.3" y="181" width="0.7" height="15.0" fill="rgb(225,4,1)" rx="2" ry="2" />
<text  x="193.29" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (1,969 us., 0.01%)</title><rect x="820.3" y="245" width="0.1" height="15.0" fill="rgb(221,110,12)" rx="2" ry="2" />
<text  x="823.30" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (2,858,643 us., 18.67%)</title><rect x="191.2" y="197" width="220.3" height="15.0" fill="rgb(230,64,5)" rx="2" ry="2" />
<text  x="194.17" y="207.5" >torch_int/nn/opt.py(183):_for..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (8,257 us., 0.05%)</title><rect x="489.3" y="181" width="0.6" height="15.0" fill="rgb(236,127,14)" rx="2" ry="2" />
<text  x="492.25" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (3,920,498 us., 25.61%)</title><rect x="518.1" y="197" width="302.2" height="15.0" fill="rgb(238,100,16)" rx="2" ry="2" />
<text  x="521.13" y="207.5" >torch_int/nn/opt.py(183):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (994,959 us., 6.50%)</title><rect x="412.6" y="117" width="76.7" height="15.0" fill="rgb(250,227,1)" rx="2" ry="2" />
<text  x="415.58" y="127.5" >transfor..</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (989,688 us., 6.46%)</title><rect x="875.3" y="245" width="76.3" height="15.0" fill="rgb(229,89,11)" rx="2" ry="2" />
<text  x="878.29" y="255.5" >torch_in..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,858,643 us., 18.67%)</title><rect x="191.2" y="101" width="220.3" height="15.0" fill="rgb(237,71,24)" rx="2" ry="2" />
<text  x="194.17" y="111.5" >profiling/utils.py(18):_profi..</text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7f880e6fc9c0&gt; (14,227 us., 0.09%)</title><rect x="411.5" y="261" width="1.1" height="15.0" fill="rgb(245,116,38)" rx="2" ry="2" />
<text  x="414.48" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (9,345 us., 0.06%)</title><rect x="820.4" y="117" width="0.8" height="15.0" fill="rgb(216,209,23)" rx="2" ry="2" />
<text  x="823.45" y="127.5" ></text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (14,227 us., 0.09%)</title><rect x="411.5" y="229" width="1.1" height="15.0" fill="rgb(209,215,40)" rx="2" ry="2" />
<text  x="414.48" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (7,112 us., 0.05%)</title><rect x="412.0" y="149" width="0.6" height="15.0" fill="rgb(220,228,35)" rx="2" ry="2" />
<text  x="415.03" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (7,115 us., 0.05%)</title><rect x="411.5" y="181" width="0.5" height="15.0" fill="rgb(242,47,44)" rx="2" ry="2" />
<text  x="414.48" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (236,017 us., 1.54%)</title><rect x="857.1" y="213" width="18.2" height="15.0" fill="rgb(248,166,22)" rx="2" ry="2" />
<text  x="860.10" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (9,345 us., 0.06%)</title><rect x="820.4" y="181" width="0.8" height="15.0" fill="rgb(248,99,33)" rx="2" ry="2" />
<text  x="823.45" y="191.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (9,345 us., 0.06%)</title><rect x="820.4" y="245" width="0.8" height="15.0" fill="rgb(227,132,5)" rx="2" ry="2" />
<text  x="823.45" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,920,498 us., 25.61%)</title><rect x="518.1" y="117" width="302.2" height="15.0" fill="rgb(224,69,26)" rx="2" ry="2" />
<text  x="521.13" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>nn.Module:_W8A8B32O32LinearWithScaling (255,329 us., 1.67%)</title><rect x="821.2" y="213" width="19.6" height="15.0" fill="rgb(250,103,20)" rx="2" ry="2" />
<text  x="824.17" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (989,688 us., 6.46%)</title><rect x="875.3" y="101" width="76.3" height="15.0" fill="rgb(234,44,46)" rx="2" ry="2" />
<text  x="878.29" y="111.5" >profilin..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (19,284 us., 0.13%)</title><rect x="489.9" y="229" width="1.5" height="15.0" fill="rgb(235,201,32)" rx="2" ry="2" />
<text  x="492.89" y="239.5" ></text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7f871a1f2450&gt; (5,292,445 us., 34.57%)</title><rect x="412.6" y="261" width="407.8" height="15.0" fill="rgb(211,208,44)" rx="2" ry="2" />
<text  x="415.58" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7f871a1f2450&gt;</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (210,906 us., 1.38%)</title><rect x="840.8" y="149" width="16.3" height="15.0" fill="rgb(211,36,9)" rx="2" ry="2" />
<text  x="843.84" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,339,447 us., 15.28%)</title><rect x="10.0" y="165" width="180.3" height="15.0" fill="rgb(211,148,1)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >torch/autograd/grad_mod..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,073,231 us., 20.07%)</title><rect x="953.1" y="165" width="236.9" height="15.0" fill="rgb(232,129,40)" rx="2" ry="2" />
<text  x="956.11" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (994,959 us., 6.50%)</title><rect x="412.6" y="133" width="76.7" height="15.0" fill="rgb(245,176,11)" rx="2" ry="2" />
<text  x="415.58" y="143.5" >nn.Modul..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (3,073,231 us., 20.07%)</title><rect x="953.1" y="181" width="236.9" height="15.0" fill="rgb(248,211,2)" rx="2" ry="2" />
<text  x="956.11" y="191.5" >torch_int/nn/opt.py(321):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (126,092 us., 0.82%)</title><rect x="821.2" y="181" width="9.7" height="15.0" fill="rgb(245,15,47)" rx="2" ry="2" />
<text  x="824.17" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (7,112 us., 0.05%)</title><rect x="412.0" y="117" width="0.6" height="15.0" fill="rgb(212,3,33)" rx="2" ry="2" />
<text  x="415.03" y="127.5" ></text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (9,345 us., 0.06%)</title><rect x="820.4" y="229" width="0.8" height="15.0" fill="rgb(242,58,29)" rx="2" ry="2" />
<text  x="823.45" y="239.5" ></text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7f880e6fc9c0&gt; (989,688 us., 6.46%)</title><rect x="875.3" y="261" width="76.3" height="15.0" fill="rgb(246,138,6)" rx="2" ry="2" />
<text  x="878.29" y="271.5" >&lt;built-i..</text>
</g>
<g >
<title>&lt;built-in_method_zeros_like_of_type_object_at_0x7f880e6fc9c0&gt; (3,097 us., 0.02%)</title><rect x="951.6" y="261" width="0.2" height="15.0" fill="rgb(214,64,35)" rx="2" ry="2" />
<text  x="954.60" y="271.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (15,784 us., 0.10%)</title><rect x="951.9" y="197" width="1.2" height="15.0" fill="rgb(252,139,35)" rx="2" ry="2" />
<text  x="954.89" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,097 us., 0.02%)</title><rect x="951.6" y="165" width="0.2" height="15.0" fill="rgb(226,196,51)" rx="2" ry="2" />
<text  x="954.60" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (210,906 us., 1.38%)</title><rect x="840.8" y="213" width="16.3" height="15.0" fill="rgb(207,113,39)" rx="2" ry="2" />
<text  x="843.84" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (126,092 us., 0.82%)</title><rect x="821.2" y="101" width="9.7" height="15.0" fill="rgb(238,122,47)" rx="2" ry="2" />
<text  x="824.17" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (989,688 us., 6.46%)</title><rect x="875.3" y="181" width="76.3" height="15.0" fill="rgb(229,103,37)" rx="2" ry="2" />
<text  x="878.29" y="191.5" >nn.Modul..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (994,959 us., 6.50%)</title><rect x="412.6" y="101" width="76.7" height="15.0" fill="rgb(207,152,39)" rx="2" ry="2" />
<text  x="415.58" y="111.5" >nn.Modul..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,097 us., 0.02%)</title><rect x="951.6" y="213" width="0.2" height="15.0" fill="rgb(249,102,8)" rx="2" ry="2" />
<text  x="954.60" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(43):__shape (347,091 us., 2.27%)</title><rect x="491.4" y="245" width="26.7" height="15.0" fill="rgb(221,105,30)" rx="2" ry="2" />
<text  x="494.38" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (3,073,231 us., 20.07%)</title><rect x="953.1" y="197" width="236.9" height="15.0" fill="rgb(227,204,26)" rx="2" ry="2" />
<text  x="956.11" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,969 us., 0.01%)</title><rect x="820.3" y="181" width="0.1" height="15.0" fill="rgb(207,141,38)" rx="2" ry="2" />
<text  x="823.30" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (129,237 us., 0.84%)</title><rect x="830.9" y="149" width="9.9" height="15.0" fill="rgb(211,64,38)" rx="2" ry="2" />
<text  x="833.88" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (255,329 us., 1.67%)</title><rect x="821.2" y="229" width="19.6" height="15.0" fill="rgb(252,160,13)" rx="2" ry="2" />
<text  x="824.17" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (8,257 us., 0.05%)</title><rect x="489.3" y="197" width="0.6" height="15.0" fill="rgb(243,9,50)" rx="2" ry="2" />
<text  x="492.25" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (236,017 us., 1.54%)</title><rect x="857.1" y="133" width="18.2" height="15.0" fill="rgb(227,49,24)" rx="2" ry="2" />
<text  x="860.10" y="143.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (994,959 us., 6.50%)</title><rect x="412.6" y="245" width="76.7" height="15.0" fill="rgb(243,6,0)" rx="2" ry="2" />
<text  x="415.58" y="255.5" >torch/nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (9,482 us., 0.06%)</title><rect x="190.3" y="197" width="0.7" height="15.0" fill="rgb(207,24,5)" rx="2" ry="2" />
<text  x="193.29" y="207.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f8719b8ff00&gt; (210,906 us., 1.38%)</title><rect x="840.8" y="261" width="16.3" height="15.0" fill="rgb(251,165,29)" rx="2" ry="2" />
<text  x="843.84" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (347,091 us., 2.27%)</title><rect x="491.4" y="181" width="26.7" height="15.0" fill="rgb(226,223,5)" rx="2" ry="2" />
<text  x="494.38" y="191.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (3,920,498 us., 25.61%)</title><rect x="518.1" y="213" width="302.2" height="15.0" fill="rgb(221,121,41)" rx="2" ry="2" />
<text  x="521.13" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,073,231 us., 20.07%)</title><rect x="953.1" y="101" width="236.9" height="15.0" fill="rgb(241,54,11)" rx="2" ry="2" />
<text  x="956.11" y="111.5" >torch/autograd/grad_mode.py(27)..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (994,959 us., 6.50%)</title><rect x="412.6" y="197" width="76.7" height="15.0" fill="rgb(206,109,23)" rx="2" ry="2" />
<text  x="415.58" y="207.5" >nn.Modul..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (126,092 us., 0.82%)</title><rect x="821.2" y="197" width="9.7" height="15.0" fill="rgb(221,131,24)" rx="2" ry="2" />
<text  x="824.17" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Linear (2,339,447 us., 15.28%)</title><rect x="10.0" y="229" width="180.3" height="15.0" fill="rgb(246,182,34)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >nn.Module:_Linear</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (129,237 us., 0.84%)</title><rect x="830.9" y="69" width="9.9" height="15.0" fill="rgb(213,32,33)" rx="2" ry="2" />
<text  x="833.88" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(122):_forward (236,017 us., 1.54%)</title><rect x="857.1" y="245" width="18.2" height="15.0" fill="rgb(241,70,35)" rx="2" ry="2" />
<text  x="860.10" y="255.5" ></text>
</g>
</g>
</svg>
