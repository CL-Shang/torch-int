<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>nn.Module:_Int8OPTAttention (1,977,146 us., 26.07%)</title><rect x="502.1" y="213" width="307.6" height="15.0" fill="rgb(245,176,9)" rx="2" ry="2" />
<text  x="505.07" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,093,709 us., 14.42%)</title><rect x="10.0" y="197" width="170.2" height="15.0" fill="rgb(234,21,20)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >nn.Module:_Int8OPTForC..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,600 us., 0.02%)</title><rect x="946.1" y="245" width="0.3" height="15.0" fill="rgb(239,219,27)" rx="2" ry="2" />
<text  x="949.12" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,556,702 us., 20.53%)</title><rect x="947.7" y="149" width="242.2" height="15.0" fill="rgb(234,6,49)" rx="2" ry="2" />
<text  x="950.68" y="159.5" >transformers/models/opt/modeling..</text>
</g>
<g >
<title>&lt;built-in_method_add_of_type_object_at_0x7fc1aa7c79c0&gt; (4,745 us., 0.06%)</title><rect x="180.2" y="261" width="0.7" height="15.0" fill="rgb(229,229,0)" rx="2" ry="2" />
<text  x="183.18" y="271.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,242 us., 0.06%)</title><rect x="810.0" y="133" width="0.6" height="15.0" fill="rgb(220,193,6)" rx="2" ry="2" />
<text  x="812.96" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (119,482 us., 1.58%)</title><rect x="831.3" y="101" width="18.6" height="15.0" fill="rgb(206,99,15)" rx="2" ry="2" />
<text  x="834.28" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (66,388 us., 0.88%)</title><rect x="820.9" y="117" width="10.4" height="15.0" fill="rgb(223,151,34)" rx="2" ry="2" />
<text  x="823.95" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (66,388 us., 0.88%)</title><rect x="810.6" y="181" width="10.3" height="15.0" fill="rgb(241,12,19)" rx="2" ry="2" />
<text  x="813.62" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,389,458 us., 18.32%)</title><rect x="181.0" y="165" width="216.2" height="15.0" fill="rgb(236,67,39)" rx="2" ry="2" />
<text  x="183.97" y="175.5" >torch_int/nn/opt.py(321):_fo..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (498,910 us., 6.58%)</title><rect x="868.4" y="197" width="77.7" height="15.0" fill="rgb(243,193,1)" rx="2" ry="2" />
<text  x="871.43" y="207.5" >torch_in..</text>
</g>
<g >
<title>torch_int/nn/linear.py(122):_forward (119,277 us., 1.57%)</title><rect x="849.9" y="245" width="18.5" height="15.0" fill="rgb(247,18,23)" rx="2" ry="2" />
<text  x="852.87" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (119,277 us., 1.57%)</title><rect x="849.9" y="149" width="18.5" height="15.0" fill="rgb(245,213,8)" rx="2" ry="2" />
<text  x="852.87" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (119,277 us., 1.57%)</title><rect x="849.9" y="117" width="18.5" height="15.0" fill="rgb(225,81,41)" rx="2" ry="2" />
<text  x="852.87" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,556,702 us., 20.53%)</title><rect x="947.7" y="117" width="242.2" height="15.0" fill="rgb(216,111,18)" rx="2" ry="2" />
<text  x="950.68" y="127.5" >profiling/utils.py(18):_profile_..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (8,053 us., 0.11%)</title><rect x="946.4" y="213" width="1.3" height="15.0" fill="rgb(239,121,28)" rx="2" ry="2" />
<text  x="949.43" y="223.5" ></text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (4,242 us., 0.06%)</title><rect x="810.0" y="229" width="0.6" height="15.0" fill="rgb(223,116,21)" rx="2" ry="2" />
<text  x="812.96" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (3,500 us., 0.05%)</title><rect x="397.7" y="181" width="0.6" height="15.0" fill="rgb(223,181,29)" rx="2" ry="2" />
<text  x="400.74" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (66,388 us., 0.88%)</title><rect x="820.9" y="101" width="10.4" height="15.0" fill="rgb(241,190,26)" rx="2" ry="2" />
<text  x="823.95" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (1,389,458 us., 18.32%)</title><rect x="181.0" y="197" width="216.2" height="15.0" fill="rgb(209,159,9)" rx="2" ry="2" />
<text  x="183.97" y="207.5" >torch_int/nn/opt.py(183):_fo..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,977,146 us., 26.07%)</title><rect x="502.1" y="165" width="307.6" height="15.0" fill="rgb(221,140,43)" rx="2" ry="2" />
<text  x="505.07" y="175.5" >torch_int/nn/opt.py(321):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,059 us., 0.05%)</title><rect x="476.4" y="197" width="0.6" height="15.0" fill="rgb(240,229,32)" rx="2" ry="2" />
<text  x="479.36" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (501,791 us., 6.62%)</title><rect x="398.3" y="213" width="78.1" height="15.0" fill="rgb(250,37,28)" rx="2" ry="2" />
<text  x="401.28" y="223.5" >torch/aut..</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fc0b5c5af00&gt; (119,482 us., 1.58%)</title><rect x="831.3" y="261" width="18.6" height="15.0" fill="rgb(205,153,21)" rx="2" ry="2" />
<text  x="834.28" y="271.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (9,973 us., 0.13%)</title><rect x="477.0" y="181" width="1.5" height="15.0" fill="rgb(236,21,15)" rx="2" ry="2" />
<text  x="479.99" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,245 us., 0.02%)</title><rect x="809.8" y="213" width="0.2" height="15.0" fill="rgb(254,56,48)" rx="2" ry="2" />
<text  x="812.76" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,242 us., 0.06%)</title><rect x="810.0" y="117" width="0.6" height="15.0" fill="rgb(217,0,35)" rx="2" ry="2" />
<text  x="812.96" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (119,277 us., 1.57%)</title><rect x="849.9" y="101" width="18.5" height="15.0" fill="rgb(252,171,21)" rx="2" ry="2" />
<text  x="852.87" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (151,205 us., 1.99%)</title><rect x="478.5" y="213" width="23.6" height="15.0" fill="rgb(251,28,49)" rx="2" ry="2" />
<text  x="481.54" y="223.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (501,791 us., 6.62%)</title><rect x="398.3" y="149" width="78.1" height="15.0" fill="rgb(222,186,31)" rx="2" ry="2" />
<text  x="401.28" y="159.5" >torch_int..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (501,791 us., 6.62%)</title><rect x="398.3" y="85" width="78.1" height="15.0" fill="rgb(223,156,1)" rx="2" ry="2" />
<text  x="401.28" y="95.5" >profiling..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,977,146 us., 26.07%)</title><rect x="502.1" y="117" width="307.6" height="15.0" fill="rgb(250,62,40)" rx="2" ry="2" />
<text  x="505.07" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (498,910 us., 6.58%)</title><rect x="868.4" y="101" width="77.7" height="15.0" fill="rgb(241,8,48)" rx="2" ry="2" />
<text  x="871.43" y="111.5" >profilin..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (119,277 us., 1.57%)</title><rect x="849.9" y="197" width="18.5" height="15.0" fill="rgb(211,120,13)" rx="2" ry="2" />
<text  x="852.87" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,638 us., 0.05%)</title><rect x="397.2" y="117" width="0.5" height="15.0" fill="rgb(252,81,27)" rx="2" ry="2" />
<text  x="400.17" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(300):__prepare_decoder_attention_mask (4,059 us., 0.05%)</title><rect x="476.4" y="245" width="0.6" height="15.0" fill="rgb(249,213,45)" rx="2" ry="2" />
<text  x="479.36" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (498,910 us., 6.58%)</title><rect x="868.4" y="181" width="77.7" height="15.0" fill="rgb(245,217,17)" rx="2" ry="2" />
<text  x="871.43" y="191.5" >nn.Modul..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,745 us., 0.06%)</title><rect x="180.2" y="181" width="0.7" height="15.0" fill="rgb(241,112,22)" rx="2" ry="2" />
<text  x="183.18" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (66,388 us., 0.88%)</title><rect x="820.9" y="53" width="10.4" height="15.0" fill="rgb(209,151,37)" rx="2" ry="2" />
<text  x="823.95" y="63.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (66,388 us., 0.88%)</title><rect x="820.9" y="165" width="10.4" height="15.0" fill="rgb(232,13,3)" rx="2" ry="2" />
<text  x="823.95" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,977,146 us., 26.07%)</title><rect x="502.1" y="133" width="307.6" height="15.0" fill="rgb(245,13,30)" rx="2" ry="2" />
<text  x="505.07" y="143.5" >transformers/models/opt/modeling_opt.py(8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,977,146 us., 26.07%)</title><rect x="502.1" y="181" width="307.6" height="15.0" fill="rgb(210,136,50)" rx="2" ry="2" />
<text  x="505.07" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,245 us., 0.02%)</title><rect x="809.8" y="181" width="0.2" height="15.0" fill="rgb(247,120,32)" rx="2" ry="2" />
<text  x="812.76" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (66,388 us., 0.88%)</title><rect x="820.9" y="149" width="10.4" height="15.0" fill="rgb(226,28,8)" rx="2" ry="2" />
<text  x="823.95" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,389,458 us., 18.32%)</title><rect x="181.0" y="101" width="216.2" height="15.0" fill="rgb(211,163,30)" rx="2" ry="2" />
<text  x="183.97" y="111.5" >profiling/utils.py(18):_prof..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (3,638 us., 0.05%)</title><rect x="397.2" y="197" width="0.5" height="15.0" fill="rgb(209,203,34)" rx="2" ry="2" />
<text  x="400.17" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (119,482 us., 1.58%)</title><rect x="831.3" y="165" width="18.6" height="15.0" fill="rgb(223,84,1)" rx="2" ry="2" />
<text  x="834.28" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,745 us., 0.06%)</title><rect x="180.2" y="165" width="0.7" height="15.0" fill="rgb(209,181,53)" rx="2" ry="2" />
<text  x="183.18" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (119,482 us., 1.58%)</title><rect x="831.3" y="149" width="18.6" height="15.0" fill="rgb(230,19,12)" rx="2" ry="2" />
<text  x="834.28" y="159.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b32_o32_with_scaling_of_PyCapsule_object_at_0x7fc0b5c5aed0&gt; (132,776 us., 1.75%)</title><rect x="810.6" y="261" width="20.7" height="15.0" fill="rgb(205,182,16)" rx="2" ry="2" />
<text  x="813.62" y="271.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,638 us., 0.05%)</title><rect x="397.2" y="133" width="0.5" height="15.0" fill="rgb(209,1,12)" rx="2" ry="2" />
<text  x="400.17" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (8,053 us., 0.11%)</title><rect x="946.4" y="261" width="1.3" height="15.0" fill="rgb(206,126,30)" rx="2" ry="2" />
<text  x="949.43" y="271.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (1,245 us., 0.02%)</title><rect x="809.8" y="245" width="0.2" height="15.0" fill="rgb(246,222,34)" rx="2" ry="2" />
<text  x="812.76" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (119,277 us., 1.57%)</title><rect x="849.9" y="181" width="18.5" height="15.0" fill="rgb(242,179,38)" rx="2" ry="2" />
<text  x="852.87" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (66,388 us., 0.88%)</title><rect x="810.6" y="133" width="10.3" height="15.0" fill="rgb(210,76,49)" rx="2" ry="2" />
<text  x="813.62" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (501,791 us., 6.62%)</title><rect x="398.3" y="133" width="78.1" height="15.0" fill="rgb(247,93,20)" rx="2" ry="2" />
<text  x="401.28" y="143.5" >nn.Module..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,500 us., 0.05%)</title><rect x="397.7" y="165" width="0.6" height="15.0" fill="rgb(240,2,8)" rx="2" ry="2" />
<text  x="400.74" y="175.5" ></text>
</g>
<g >
<title>torch_int/functional/fused.py(24):_dq_add_layernorm_q_cpp (1,389,458 us., 18.32%)</title><rect x="181.0" y="245" width="216.2" height="15.0" fill="rgb(251,12,47)" rx="2" ry="2" />
<text  x="183.97" y="255.5" >torch_int/functional/fused.p..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (119,482 us., 1.58%)</title><rect x="831.3" y="85" width="18.6" height="15.0" fill="rgb(249,21,43)" rx="2" ry="2" />
<text  x="834.28" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (151,205 us., 1.99%)</title><rect x="478.5" y="197" width="23.6" height="15.0" fill="rgb(239,51,8)" rx="2" ry="2" />
<text  x="481.54" y="207.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,638 us., 0.05%)</title><rect x="397.2" y="181" width="0.5" height="15.0" fill="rgb(234,126,31)" rx="2" ry="2" />
<text  x="400.17" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,556,702 us., 20.53%)</title><rect x="947.7" y="133" width="242.2" height="15.0" fill="rgb(235,152,49)" rx="2" ry="2" />
<text  x="950.68" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (119,277 us., 1.57%)</title><rect x="849.9" y="229" width="18.5" height="15.0" fill="rgb(249,5,29)" rx="2" ry="2" />
<text  x="852.87" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,977,146 us., 26.07%)</title><rect x="502.1" y="101" width="307.6" height="15.0" fill="rgb(205,181,9)" rx="2" ry="2" />
<text  x="505.07" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,389,458 us., 18.32%)</title><rect x="181.0" y="133" width="216.2" height="15.0" fill="rgb(229,221,54)" rx="2" ry="2" />
<text  x="183.97" y="143.5" >transformers/models/opt/mode..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (151,205 us., 1.99%)</title><rect x="478.5" y="165" width="23.6" height="15.0" fill="rgb(243,217,24)" rx="2" ry="2" />
<text  x="481.54" y="175.5" >n..</text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (7,138 us., 0.09%)</title><rect x="397.2" y="229" width="1.1" height="15.0" fill="rgb(226,34,27)" rx="2" ry="2" />
<text  x="400.17" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (119,277 us., 1.57%)</title><rect x="849.9" y="165" width="18.5" height="15.0" fill="rgb(208,79,4)" rx="2" ry="2" />
<text  x="852.87" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,389,458 us., 18.32%)</title><rect x="181.0" y="85" width="216.2" height="15.0" fill="rgb(211,87,23)" rx="2" ry="2" />
<text  x="183.97" y="95.5" >torch/autograd/grad_mode.py(..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (66,388 us., 0.88%)</title><rect x="810.6" y="101" width="10.3" height="15.0" fill="rgb(225,191,26)" rx="2" ry="2" />
<text  x="813.62" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (4,242 us., 0.06%)</title><rect x="810.0" y="197" width="0.6" height="15.0" fill="rgb(216,68,22)" rx="2" ry="2" />
<text  x="812.96" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (119,482 us., 1.58%)</title><rect x="831.3" y="229" width="18.6" height="15.0" fill="rgb(224,143,7)" rx="2" ry="2" />
<text  x="834.28" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (66,388 us., 0.88%)</title><rect x="810.6" y="149" width="10.3" height="15.0" fill="rgb(248,121,26)" rx="2" ry="2" />
<text  x="813.62" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (66,388 us., 0.88%)</title><rect x="820.9" y="133" width="10.4" height="15.0" fill="rgb(252,25,21)" rx="2" ry="2" />
<text  x="823.95" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (1,556,702 us., 20.53%)</title><rect x="947.7" y="261" width="242.2" height="15.0" fill="rgb(231,166,38)" rx="2" ry="2" />
<text  x="950.68" y="271.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (501,791 us., 6.62%)</title><rect x="398.3" y="117" width="78.1" height="15.0" fill="rgb(209,60,44)" rx="2" ry="2" />
<text  x="401.28" y="127.5" >transform..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,556,702 us., 20.53%)</title><rect x="947.7" y="245" width="242.2" height="15.0" fill="rgb(216,149,6)" rx="2" ry="2" />
<text  x="950.68" y="255.5" >torch/autograd/grad_mode.py(24):..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (66,388 us., 0.88%)</title><rect x="820.9" y="69" width="10.4" height="15.0" fill="rgb(227,43,28)" rx="2" ry="2" />
<text  x="823.95" y="79.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (66,388 us., 0.88%)</title><rect x="820.9" y="37" width="10.4" height="15.0" fill="rgb(244,52,33)" rx="2" ry="2" />
<text  x="823.95" y="47.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (4,242 us., 0.06%)</title><rect x="810.0" y="245" width="0.6" height="15.0" fill="rgb(218,156,40)" rx="2" ry="2" />
<text  x="812.96" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(92):_forward (119,482 us., 1.58%)</title><rect x="831.3" y="245" width="18.6" height="15.0" fill="rgb(231,150,26)" rx="2" ry="2" />
<text  x="834.28" y="255.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (119,482 us., 1.58%)</title><rect x="831.3" y="53" width="18.6" height="15.0" fill="rgb(214,208,47)" rx="2" ry="2" />
<text  x="834.28" y="63.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,638 us., 0.05%)</title><rect x="397.2" y="165" width="0.5" height="15.0" fill="rgb(235,59,20)" rx="2" ry="2" />
<text  x="400.17" y="175.5" ></text>
</g>
<g >
<title>all (7,583,534 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(233,135,41)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,242 us., 0.06%)</title><rect x="810.0" y="165" width="0.6" height="15.0" fill="rgb(232,198,14)" rx="2" ry="2" />
<text  x="812.96" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,600 us., 0.02%)</title><rect x="946.1" y="181" width="0.3" height="15.0" fill="rgb(235,229,38)" rx="2" ry="2" />
<text  x="949.12" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (66,388 us., 0.88%)</title><rect x="810.6" y="197" width="10.3" height="15.0" fill="rgb(230,209,37)" rx="2" ry="2" />
<text  x="813.62" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (66,388 us., 0.88%)</title><rect x="820.9" y="197" width="10.4" height="15.0" fill="rgb(227,214,51)" rx="2" ry="2" />
<text  x="823.95" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,059 us., 0.05%)</title><rect x="476.4" y="165" width="0.6" height="15.0" fill="rgb(226,82,25)" rx="2" ry="2" />
<text  x="479.36" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fc0b5c5ae70&gt; (119,277 us., 1.57%)</title><rect x="849.9" y="261" width="18.5" height="15.0" fill="rgb(223,227,14)" rx="2" ry="2" />
<text  x="852.87" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,500 us., 0.05%)</title><rect x="397.7" y="133" width="0.6" height="15.0" fill="rgb(221,6,43)" rx="2" ry="2" />
<text  x="400.74" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (498,910 us., 6.58%)</title><rect x="868.4" y="165" width="77.7" height="15.0" fill="rgb(236,142,32)" rx="2" ry="2" />
<text  x="871.43" y="175.5" >torch_in..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,500 us., 0.05%)</title><rect x="397.7" y="149" width="0.6" height="15.0" fill="rgb(227,194,42)" rx="2" ry="2" />
<text  x="400.74" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Linear (1,093,709 us., 14.42%)</title><rect x="10.0" y="229" width="170.2" height="15.0" fill="rgb(220,218,35)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >nn.Module:_Linear</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (151,205 us., 1.99%)</title><rect x="478.5" y="181" width="23.6" height="15.0" fill="rgb(227,155,9)" rx="2" ry="2" />
<text  x="481.54" y="191.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,556,702 us., 20.53%)</title><rect x="947.7" y="165" width="242.2" height="15.0" fill="rgb(241,121,18)" rx="2" ry="2" />
<text  x="950.68" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (1,093,709 us., 14.42%)</title><rect x="10.0" y="261" width="170.2" height="15.0" fill="rgb(237,18,12)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;built-in_function_lin..</text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7fc1aa7c79c0&gt; (7,138 us., 0.09%)</title><rect x="397.2" y="261" width="1.1" height="15.0" fill="rgb(244,28,1)" rx="2" ry="2" />
<text  x="400.17" y="271.5" ></text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7fc1aa7c79c0&gt; (498,910 us., 6.58%)</title><rect x="868.4" y="261" width="77.7" height="15.0" fill="rgb(235,31,3)" rx="2" ry="2" />
<text  x="871.43" y="271.5" >&lt;built-i..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (4,745 us., 0.06%)</title><rect x="180.2" y="245" width="0.7" height="15.0" fill="rgb(230,209,29)" rx="2" ry="2" />
<text  x="183.18" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (498,910 us., 6.58%)</title><rect x="868.4" y="133" width="77.7" height="15.0" fill="rgb(252,202,33)" rx="2" ry="2" />
<text  x="871.43" y="143.5" >transfor..</text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7fc0b62bd450&gt; (2,645,720 us., 34.89%)</title><rect x="398.3" y="261" width="411.7" height="15.0" fill="rgb(225,13,9)" rx="2" ry="2" />
<text  x="401.28" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7fc0b62bd450&gt;</text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (7,138 us., 0.09%)</title><rect x="397.2" y="245" width="1.1" height="15.0" fill="rgb(216,37,19)" rx="2" ry="2" />
<text  x="400.17" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNorm (4,242 us., 0.06%)</title><rect x="810.0" y="213" width="0.6" height="15.0" fill="rgb(224,81,5)" rx="2" ry="2" />
<text  x="812.96" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (498,910 us., 6.58%)</title><rect x="868.4" y="245" width="77.7" height="15.0" fill="rgb(217,101,11)" rx="2" ry="2" />
<text  x="871.43" y="255.5" >torch_in..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,977,146 us., 26.07%)</title><rect x="502.1" y="229" width="307.6" height="15.0" fill="rgb(245,106,41)" rx="2" ry="2" />
<text  x="505.07" y="239.5" >torch/autograd/grad_mode.py(24):_decorate..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (8,053 us., 0.11%)</title><rect x="946.4" y="197" width="1.3" height="15.0" fill="rgb(227,37,11)" rx="2" ry="2" />
<text  x="949.43" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (8,053 us., 0.11%)</title><rect x="946.4" y="245" width="1.3" height="15.0" fill="rgb(216,22,38)" rx="2" ry="2" />
<text  x="949.43" y="255.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,500 us., 0.05%)</title><rect x="397.7" y="117" width="0.6" height="15.0" fill="rgb(248,8,24)" rx="2" ry="2" />
<text  x="400.74" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (9,973 us., 0.13%)</title><rect x="477.0" y="229" width="1.5" height="15.0" fill="rgb(252,40,52)" rx="2" ry="2" />
<text  x="479.99" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,389,458 us., 18.32%)</title><rect x="181.0" y="181" width="216.2" height="15.0" fill="rgb(251,72,53)" rx="2" ry="2" />
<text  x="183.97" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (1,389,458 us., 18.32%)</title><rect x="181.0" y="229" width="216.2" height="15.0" fill="rgb(208,52,50)" rx="2" ry="2" />
<text  x="183.97" y="239.5" >torch_int/nn/fused.py(13):_f..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (66,388 us., 0.88%)</title><rect x="810.6" y="165" width="10.3" height="15.0" fill="rgb(251,43,6)" rx="2" ry="2" />
<text  x="813.62" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (132,776 us., 1.75%)</title><rect x="810.6" y="229" width="20.7" height="15.0" fill="rgb(234,94,34)" rx="2" ry="2" />
<text  x="813.62" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,745 us., 0.06%)</title><rect x="180.2" y="197" width="0.7" height="15.0" fill="rgb(222,63,26)" rx="2" ry="2" />
<text  x="183.18" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,093,709 us., 14.42%)</title><rect x="10.0" y="181" width="170.2" height="15.0" fill="rgb(243,97,46)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >profiling/utils.py(18)..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (501,791 us., 6.62%)</title><rect x="398.3" y="101" width="78.1" height="15.0" fill="rgb(235,91,22)" rx="2" ry="2" />
<text  x="401.28" y="111.5" >nn.Module..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (66,388 us., 0.88%)</title><rect x="820.9" y="181" width="10.4" height="15.0" fill="rgb(249,52,39)" rx="2" ry="2" />
<text  x="823.95" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (151,205 us., 1.99%)</title><rect x="478.5" y="149" width="23.6" height="15.0" fill="rgb(215,97,28)" rx="2" ry="2" />
<text  x="481.54" y="159.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (498,910 us., 6.58%)</title><rect x="868.4" y="213" width="77.7" height="15.0" fill="rgb(233,51,3)" rx="2" ry="2" />
<text  x="871.43" y="223.5" >nn.Modul..</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (151,205 us., 1.99%)</title><rect x="478.5" y="229" width="23.6" height="15.0" fill="rgb(249,133,8)" rx="2" ry="2" />
<text  x="481.54" y="239.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(43):__shape (151,205 us., 1.99%)</title><rect x="478.5" y="245" width="23.6" height="15.0" fill="rgb(227,55,23)" rx="2" ry="2" />
<text  x="481.54" y="255.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (151,205 us., 1.99%)</title><rect x="478.5" y="117" width="23.6" height="15.0" fill="rgb(248,52,44)" rx="2" ry="2" />
<text  x="481.54" y="127.5" >t..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (151,205 us., 1.99%)</title><rect x="478.5" y="85" width="23.6" height="15.0" fill="rgb(253,99,54)" rx="2" ry="2" />
<text  x="481.54" y="95.5" >p..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (119,277 us., 1.57%)</title><rect x="849.9" y="85" width="18.5" height="15.0" fill="rgb(207,24,37)" rx="2" ry="2" />
<text  x="852.87" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(300):__prepare_decoder_attention_mask (1,245 us., 0.02%)</title><rect x="809.8" y="229" width="0.2" height="15.0" fill="rgb(246,183,22)" rx="2" ry="2" />
<text  x="812.76" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B32O32LinearWithScaling (132,776 us., 1.75%)</title><rect x="810.6" y="213" width="20.7" height="15.0" fill="rgb(211,202,45)" rx="2" ry="2" />
<text  x="813.62" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Embedding (3,638 us., 0.05%)</title><rect x="397.2" y="213" width="0.5" height="15.0" fill="rgb(241,120,2)" rx="2" ry="2" />
<text  x="400.17" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,745 us., 0.06%)</title><rect x="180.2" y="229" width="0.7" height="15.0" fill="rgb(232,196,38)" rx="2" ry="2" />
<text  x="183.18" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (1,977,146 us., 26.07%)</title><rect x="502.1" y="197" width="307.6" height="15.0" fill="rgb(229,159,16)" rx="2" ry="2" />
<text  x="505.07" y="207.5" >torch_int/nn/opt.py(183):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,977,146 us., 26.07%)</title><rect x="502.1" y="149" width="307.6" height="15.0" fill="rgb(245,198,48)" rx="2" ry="2" />
<text  x="505.07" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (1,093,709 us., 14.42%)</title><rect x="10.0" y="245" width="170.2" height="15.0" fill="rgb(211,46,27)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >torch/nn/modules/linea..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (3,500 us., 0.05%)</title><rect x="397.7" y="213" width="0.6" height="15.0" fill="rgb(239,76,45)" rx="2" ry="2" />
<text  x="400.74" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,245 us., 0.02%)</title><rect x="809.8" y="197" width="0.2" height="15.0" fill="rgb(224,26,14)" rx="2" ry="2" />
<text  x="812.76" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (1,977,146 us., 26.07%)</title><rect x="502.1" y="245" width="307.6" height="15.0" fill="rgb(221,67,52)" rx="2" ry="2" />
<text  x="505.07" y="255.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (9,973 us., 0.13%)</title><rect x="477.0" y="245" width="1.5" height="15.0" fill="rgb(254,94,26)" rx="2" ry="2" />
<text  x="479.99" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (119,482 us., 1.58%)</title><rect x="831.3" y="117" width="18.6" height="15.0" fill="rgb(236,80,23)" rx="2" ry="2" />
<text  x="834.28" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,977,146 us., 26.07%)</title><rect x="502.1" y="85" width="307.6" height="15.0" fill="rgb(227,27,42)" rx="2" ry="2" />
<text  x="505.07" y="95.5" >torch/autograd/grad_mode.py(27):_decorate..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (1,556,702 us., 20.53%)</title><rect x="947.7" y="213" width="242.2" height="15.0" fill="rgb(248,67,40)" rx="2" ry="2" />
<text  x="950.68" y="223.5" >torch_int/nn/opt.py(183):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (8,053 us., 0.11%)</title><rect x="946.4" y="181" width="1.3" height="15.0" fill="rgb(252,82,11)" rx="2" ry="2" />
<text  x="949.43" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (66,388 us., 0.88%)</title><rect x="810.6" y="85" width="10.3" height="15.0" fill="rgb(209,203,26)" rx="2" ry="2" />
<text  x="813.62" y="95.5" ></text>
</g>
<g >
<title>&lt;built-in_method_zeros_like_of_type_object_at_0x7fc1aa7c79c0&gt; (1,600 us., 0.02%)</title><rect x="946.1" y="261" width="0.3" height="15.0" fill="rgb(213,59,49)" rx="2" ry="2" />
<text  x="949.12" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (498,910 us., 6.58%)</title><rect x="868.4" y="117" width="77.7" height="15.0" fill="rgb(254,22,13)" rx="2" ry="2" />
<text  x="871.43" y="127.5" >nn.Modul..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,059 us., 0.05%)</title><rect x="476.4" y="149" width="0.6" height="15.0" fill="rgb(248,146,0)" rx="2" ry="2" />
<text  x="479.36" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (119,482 us., 1.58%)</title><rect x="831.3" y="197" width="18.6" height="15.0" fill="rgb(248,167,52)" rx="2" ry="2" />
<text  x="834.28" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (501,791 us., 6.62%)</title><rect x="398.3" y="229" width="78.1" height="15.0" fill="rgb(254,198,28)" rx="2" ry="2" />
<text  x="401.28" y="239.5" >torch_int..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (498,910 us., 6.58%)</title><rect x="868.4" y="149" width="77.7" height="15.0" fill="rgb(234,24,38)" rx="2" ry="2" />
<text  x="871.43" y="159.5" >nn.Modul..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,600 us., 0.02%)</title><rect x="946.1" y="165" width="0.3" height="15.0" fill="rgb(218,126,22)" rx="2" ry="2" />
<text  x="949.12" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (151,205 us., 1.99%)</title><rect x="478.5" y="69" width="23.6" height="15.0" fill="rgb(217,165,20)" rx="2" ry="2" />
<text  x="481.54" y="79.5" >t..</text>
</g>
<g >
<title>&lt;built-in_method_dq_add_layernorm_q_of_PyCapsule_object_at_0x7fc0b5c5af30&gt; (1,389,458 us., 18.32%)</title><rect x="181.0" y="261" width="216.2" height="15.0" fill="rgb(222,228,40)" rx="2" ry="2" />
<text  x="183.97" y="271.5" >&lt;built-in_method_dq_add_laye..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,500 us., 0.05%)</title><rect x="397.7" y="101" width="0.6" height="15.0" fill="rgb(215,147,30)" rx="2" ry="2" />
<text  x="400.74" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,059 us., 0.05%)</title><rect x="476.4" y="213" width="0.6" height="15.0" fill="rgb(235,34,15)" rx="2" ry="2" />
<text  x="479.36" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,245 us., 0.02%)</title><rect x="809.8" y="149" width="0.2" height="15.0" fill="rgb(236,0,36)" rx="2" ry="2" />
<text  x="812.76" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (501,791 us., 6.62%)</title><rect x="398.3" y="181" width="78.1" height="15.0" fill="rgb(222,38,14)" rx="2" ry="2" />
<text  x="401.28" y="191.5" >torch_int..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (119,277 us., 1.57%)</title><rect x="849.9" y="133" width="18.5" height="15.0" fill="rgb(231,69,6)" rx="2" ry="2" />
<text  x="852.87" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,093,709 us., 14.42%)</title><rect x="10.0" y="213" width="170.2" height="15.0" fill="rgb(214,166,44)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >transformers/models/op..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (119,482 us., 1.58%)</title><rect x="831.3" y="213" width="18.6" height="15.0" fill="rgb(217,189,51)" rx="2" ry="2" />
<text  x="834.28" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (119,482 us., 1.58%)</title><rect x="831.3" y="133" width="18.6" height="15.0" fill="rgb(216,138,51)" rx="2" ry="2" />
<text  x="834.28" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (119,482 us., 1.58%)</title><rect x="831.3" y="37" width="18.6" height="15.0" fill="rgb(224,77,14)" rx="2" ry="2" />
<text  x="834.28" y="47.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (501,791 us., 6.62%)</title><rect x="398.3" y="69" width="78.1" height="15.0" fill="rgb(245,148,6)" rx="2" ry="2" />
<text  x="401.28" y="79.5" >torch/aut..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,600 us., 0.02%)</title><rect x="946.1" y="229" width="0.3" height="15.0" fill="rgb(221,115,17)" rx="2" ry="2" />
<text  x="949.12" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (151,205 us., 1.99%)</title><rect x="478.5" y="133" width="23.6" height="15.0" fill="rgb(220,51,35)" rx="2" ry="2" />
<text  x="481.54" y="143.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,245 us., 0.02%)</title><rect x="809.8" y="165" width="0.2" height="15.0" fill="rgb(216,208,24)" rx="2" ry="2" />
<text  x="812.76" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (151,205 us., 1.99%)</title><rect x="478.5" y="101" width="23.6" height="15.0" fill="rgb(238,147,54)" rx="2" ry="2" />
<text  x="481.54" y="111.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (8,053 us., 0.11%)</title><rect x="946.4" y="229" width="1.3" height="15.0" fill="rgb(233,186,40)" rx="2" ry="2" />
<text  x="949.43" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,638 us., 0.05%)</title><rect x="397.2" y="149" width="0.5" height="15.0" fill="rgb(213,202,6)" rx="2" ry="2" />
<text  x="400.17" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,556,702 us., 20.53%)</title><rect x="947.7" y="229" width="242.2" height="15.0" fill="rgb(229,10,48)" rx="2" ry="2" />
<text  x="950.68" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch_int/nn/linear.py(62):_forward (132,776 us., 1.75%)</title><rect x="810.6" y="245" width="20.7" height="15.0" fill="rgb(253,174,35)" rx="2" ry="2" />
<text  x="813.62" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (9,973 us., 0.13%)</title><rect x="477.0" y="165" width="1.5" height="15.0" fill="rgb(219,117,24)" rx="2" ry="2" />
<text  x="479.99" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (498,910 us., 6.58%)</title><rect x="868.4" y="229" width="77.7" height="15.0" fill="rgb(241,148,1)" rx="2" ry="2" />
<text  x="871.43" y="239.5" >torch/au..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (119,482 us., 1.58%)</title><rect x="831.3" y="181" width="18.6" height="15.0" fill="rgb(213,117,40)" rx="2" ry="2" />
<text  x="834.28" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,245 us., 0.02%)</title><rect x="809.8" y="133" width="0.2" height="15.0" fill="rgb(242,90,48)" rx="2" ry="2" />
<text  x="812.76" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,389,458 us., 18.32%)</title><rect x="181.0" y="117" width="216.2" height="15.0" fill="rgb(209,42,50)" rx="2" ry="2" />
<text  x="183.97" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (9,973 us., 0.13%)</title><rect x="477.0" y="213" width="1.5" height="15.0" fill="rgb(210,119,51)" rx="2" ry="2" />
<text  x="479.99" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,242 us., 0.06%)</title><rect x="810.0" y="181" width="0.6" height="15.0" fill="rgb(217,118,11)" rx="2" ry="2" />
<text  x="812.96" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,093,709 us., 14.42%)</title><rect x="10.0" y="165" width="170.2" height="15.0" fill="rgb(236,201,10)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >torch/autograd/grad_mo..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (3,500 us., 0.05%)</title><rect x="397.7" y="197" width="0.6" height="15.0" fill="rgb(205,60,9)" rx="2" ry="2" />
<text  x="400.74" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (9,973 us., 0.13%)</title><rect x="477.0" y="197" width="1.5" height="15.0" fill="rgb(244,74,16)" rx="2" ry="2" />
<text  x="479.99" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (66,388 us., 0.88%)</title><rect x="810.6" y="117" width="10.3" height="15.0" fill="rgb(210,3,22)" rx="2" ry="2" />
<text  x="813.62" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (119,482 us., 1.58%)</title><rect x="831.3" y="69" width="18.6" height="15.0" fill="rgb(230,108,29)" rx="2" ry="2" />
<text  x="834.28" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (119,277 us., 1.57%)</title><rect x="849.9" y="213" width="18.5" height="15.0" fill="rgb(210,151,34)" rx="2" ry="2" />
<text  x="852.87" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,556,702 us., 20.53%)</title><rect x="947.7" y="101" width="242.2" height="15.0" fill="rgb(248,59,48)" rx="2" ry="2" />
<text  x="950.68" y="111.5" >torch/autograd/grad_mode.py(27):..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (66,388 us., 0.88%)</title><rect x="820.9" y="85" width="10.4" height="15.0" fill="rgb(230,50,27)" rx="2" ry="2" />
<text  x="823.95" y="95.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (501,791 us., 6.62%)</title><rect x="398.3" y="245" width="78.1" height="15.0" fill="rgb(238,146,31)" rx="2" ry="2" />
<text  x="401.28" y="255.5" >torch/nn/..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,059 us., 0.05%)</title><rect x="476.4" y="181" width="0.6" height="15.0" fill="rgb(224,220,19)" rx="2" ry="2" />
<text  x="479.36" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,600 us., 0.02%)</title><rect x="946.1" y="213" width="0.3" height="15.0" fill="rgb(254,99,17)" rx="2" ry="2" />
<text  x="949.12" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (498,910 us., 6.58%)</title><rect x="868.4" y="85" width="77.7" height="15.0" fill="rgb(247,63,28)" rx="2" ry="2" />
<text  x="871.43" y="95.5" >torch/au..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,556,702 us., 20.53%)</title><rect x="947.7" y="181" width="242.2" height="15.0" fill="rgb(223,2,51)" rx="2" ry="2" />
<text  x="950.68" y="191.5" >torch_int/nn/opt.py(321):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,389,458 us., 18.32%)</title><rect x="181.0" y="149" width="216.2" height="15.0" fill="rgb(252,207,38)" rx="2" ry="2" />
<text  x="183.97" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,745 us., 0.06%)</title><rect x="180.2" y="213" width="0.7" height="15.0" fill="rgb(210,52,53)" rx="2" ry="2" />
<text  x="183.18" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_DQ_Add_LayerNorm_Q (1,389,458 us., 18.32%)</title><rect x="181.0" y="213" width="216.2" height="15.0" fill="rgb(218,107,34)" rx="2" ry="2" />
<text  x="183.97" y="223.5" >nn.Module:_DQ_Add_LayerNorm_Q</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,242 us., 0.06%)</title><rect x="810.0" y="149" width="0.6" height="15.0" fill="rgb(226,217,17)" rx="2" ry="2" />
<text  x="812.96" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (501,791 us., 6.62%)</title><rect x="398.3" y="165" width="78.1" height="15.0" fill="rgb(232,195,42)" rx="2" ry="2" />
<text  x="401.28" y="175.5" >nn.Module..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (501,791 us., 6.62%)</title><rect x="398.3" y="197" width="78.1" height="15.0" fill="rgb(224,11,10)" rx="2" ry="2" />
<text  x="401.28" y="207.5" >nn.Module..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,556,702 us., 20.53%)</title><rect x="947.7" y="197" width="242.2" height="15.0" fill="rgb(221,48,36)" rx="2" ry="2" />
<text  x="950.68" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7fc1aa7c79c0&gt; (4,242 us., 0.06%)</title><rect x="810.0" y="261" width="0.6" height="15.0" fill="rgb(254,51,27)" rx="2" ry="2" />
<text  x="812.96" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,600 us., 0.02%)</title><rect x="946.1" y="197" width="0.3" height="15.0" fill="rgb(215,200,2)" rx="2" ry="2" />
<text  x="949.12" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (4,059 us., 0.05%)</title><rect x="476.4" y="229" width="0.6" height="15.0" fill="rgb(235,97,33)" rx="2" ry="2" />
<text  x="479.36" y="239.5" ></text>
</g>
</g>
</svg>
