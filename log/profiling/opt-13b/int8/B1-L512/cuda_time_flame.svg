<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>nn.Module:_LayerNorm (4,247 us., 0.06%)</title><rect x="809.9" y="213" width="0.7" height="15.0" fill="rgb(254,20,21)" rx="2" ry="2" />
<text  x="812.95" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,739 us., 0.06%)</title><rect x="180.4" y="165" width="0.8" height="15.0" fill="rgb(247,45,42)" rx="2" ry="2" />
<text  x="183.44" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,555,709 us., 20.55%)</title><rect x="947.4" y="229" width="242.5" height="15.0" fill="rgb(230,165,13)" rx="2" ry="2" />
<text  x="950.39" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (498,485 us., 6.59%)</title><rect x="868.1" y="229" width="77.7" height="15.0" fill="rgb(251,150,28)" rx="2" ry="2" />
<text  x="871.06" y="239.5" >torch/au..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (118,405 us., 1.56%)</title><rect x="831.1" y="53" width="18.4" height="15.0" fill="rgb(214,106,15)" rx="2" ry="2" />
<text  x="834.06" y="63.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (498,485 us., 6.59%)</title><rect x="868.1" y="245" width="77.7" height="15.0" fill="rgb(235,31,37)" rx="2" ry="2" />
<text  x="871.06" y="255.5" >torch_in..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (118,926 us., 1.57%)</title><rect x="849.5" y="181" width="18.6" height="15.0" fill="rgb(222,146,24)" rx="2" ry="2" />
<text  x="852.52" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (9,923 us., 0.13%)</title><rect x="477.1" y="245" width="1.5" height="15.0" fill="rgb(213,180,40)" rx="2" ry="2" />
<text  x="480.07" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,555,709 us., 20.55%)</title><rect x="947.4" y="133" width="242.5" height="15.0" fill="rgb(220,207,40)" rx="2" ry="2" />
<text  x="950.39" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (149,780 us., 1.98%)</title><rect x="478.6" y="165" width="23.4" height="15.0" fill="rgb(232,218,18)" rx="2" ry="2" />
<text  x="481.61" y="175.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (1,224 us., 0.02%)</title><rect x="809.8" y="213" width="0.1" height="15.0" fill="rgb(244,163,26)" rx="2" ry="2" />
<text  x="812.76" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (501,469 us., 6.62%)</title><rect x="398.3" y="69" width="78.1" height="15.0" fill="rgb(232,26,2)" rx="2" ry="2" />
<text  x="401.27" y="79.5" >torch/aut..</text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (501,469 us., 6.62%)</title><rect x="398.3" y="245" width="78.1" height="15.0" fill="rgb(221,31,41)" rx="2" ry="2" />
<text  x="401.27" y="255.5" >torch/nn/..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,224 us., 0.02%)</title><rect x="809.8" y="165" width="0.1" height="15.0" fill="rgb(241,181,23)" rx="2" ry="2" />
<text  x="812.76" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,224 us., 0.02%)</title><rect x="809.8" y="181" width="0.1" height="15.0" fill="rgb(216,115,53)" rx="2" ry="2" />
<text  x="812.76" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (501,469 us., 6.62%)</title><rect x="398.3" y="101" width="78.1" height="15.0" fill="rgb(208,6,45)" rx="2" ry="2" />
<text  x="401.27" y="111.5" >nn.Module..</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (65,502 us., 0.87%)</title><rect x="820.8" y="197" width="10.3" height="15.0" fill="rgb(228,137,3)" rx="2" ry="2" />
<text  x="823.85" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B32O32Linear (131,168 us., 1.73%)</title><rect x="810.6" y="213" width="20.5" height="15.0" fill="rgb(253,96,42)" rx="2" ry="2" />
<text  x="813.61" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (8,028 us., 0.11%)</title><rect x="946.1" y="261" width="1.3" height="15.0" fill="rgb(216,218,51)" rx="2" ry="2" />
<text  x="949.14" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (118,405 us., 1.56%)</title><rect x="831.1" y="37" width="18.4" height="15.0" fill="rgb(234,119,35)" rx="2" ry="2" />
<text  x="834.06" y="47.5" ></text>
</g>
<g >
<title>all (7,569,503 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(247,28,0)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (1,385,253 us., 18.30%)</title><rect x="181.2" y="229" width="216.0" height="15.0" fill="rgb(248,206,11)" rx="2" ry="2" />
<text  x="184.23" y="239.5" >torch_int/nn/fused.py(13):_f..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,385,253 us., 18.30%)</title><rect x="181.2" y="133" width="216.0" height="15.0" fill="rgb(248,27,25)" rx="2" ry="2" />
<text  x="184.23" y="143.5" >transformers/models/opt/mode..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (118,926 us., 1.57%)</title><rect x="849.5" y="213" width="18.6" height="15.0" fill="rgb(209,179,53)" rx="2" ry="2" />
<text  x="852.52" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,224 us., 0.02%)</title><rect x="809.8" y="197" width="0.1" height="15.0" fill="rgb(235,194,0)" rx="2" ry="2" />
<text  x="812.76" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (498,485 us., 6.59%)</title><rect x="868.1" y="117" width="77.7" height="15.0" fill="rgb(212,146,6)" rx="2" ry="2" />
<text  x="871.06" y="127.5" >nn.Modul..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (118,926 us., 1.57%)</title><rect x="849.5" y="117" width="18.6" height="15.0" fill="rgb(240,48,38)" rx="2" ry="2" />
<text  x="852.52" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,247 us., 0.06%)</title><rect x="809.9" y="149" width="0.7" height="15.0" fill="rgb(214,69,4)" rx="2" ry="2" />
<text  x="812.95" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(301):__prepare_decoder_attention_mask (1,224 us., 0.02%)</title><rect x="809.8" y="229" width="0.1" height="15.0" fill="rgb(234,204,26)" rx="2" ry="2" />
<text  x="812.76" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (131,168 us., 1.73%)</title><rect x="810.6" y="229" width="20.5" height="15.0" fill="rgb(207,82,9)" rx="2" ry="2" />
<text  x="813.61" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,247 us., 0.06%)</title><rect x="809.9" y="133" width="0.7" height="15.0" fill="rgb(211,17,40)" rx="2" ry="2" />
<text  x="812.95" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (3,503 us., 0.05%)</title><rect x="397.7" y="197" width="0.6" height="15.0" fill="rgb(230,194,39)" rx="2" ry="2" />
<text  x="400.72" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,555,709 us., 20.55%)</title><rect x="947.4" y="165" width="242.5" height="15.0" fill="rgb(217,2,26)" rx="2" ry="2" />
<text  x="950.39" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (4,247 us., 0.06%)</title><rect x="809.9" y="197" width="0.7" height="15.0" fill="rgb(236,152,37)" rx="2" ry="2" />
<text  x="812.95" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (118,926 us., 1.57%)</title><rect x="849.5" y="85" width="18.6" height="15.0" fill="rgb(224,222,0)" rx="2" ry="2" />
<text  x="852.52" y="95.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,555,709 us., 20.55%)</title><rect x="947.4" y="149" width="242.5" height="15.0" fill="rgb(236,197,50)" rx="2" ry="2" />
<text  x="950.39" y="159.5" >transformers/models/opt/modeling..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (8,028 us., 0.11%)</title><rect x="946.1" y="245" width="1.3" height="15.0" fill="rgb(230,195,47)" rx="2" ry="2" />
<text  x="949.14" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (65,666 us., 0.87%)</title><rect x="810.6" y="117" width="10.2" height="15.0" fill="rgb(249,222,51)" rx="2" ry="2" />
<text  x="813.61" y="127.5" ></text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (1,093,340 us., 14.44%)</title><rect x="10.0" y="245" width="170.4" height="15.0" fill="rgb(239,102,33)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >torch/nn/modules/linea..</text>
</g>
<g >
<title>&lt;built-in_method_add_of_type_object_at_0x7fa313afc9c0&gt; (4,739 us., 0.06%)</title><rect x="180.4" y="261" width="0.8" height="15.0" fill="rgb(212,223,46)" rx="2" ry="2" />
<text  x="183.44" y="271.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fa21ef96630&gt; (118,926 us., 1.57%)</title><rect x="849.5" y="261" width="18.6" height="15.0" fill="rgb(212,117,51)" rx="2" ry="2" />
<text  x="852.52" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(184):_forward (1,555,709 us., 20.55%)</title><rect x="947.4" y="213" width="242.5" height="15.0" fill="rgb(232,155,52)" rx="2" ry="2" />
<text  x="950.39" y="223.5" >torch_int/nn/opt.py(184):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (118,926 us., 1.57%)</title><rect x="849.5" y="133" width="18.6" height="15.0" fill="rgb(242,131,53)" rx="2" ry="2" />
<text  x="852.52" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (9,923 us., 0.13%)</title><rect x="477.1" y="197" width="1.5" height="15.0" fill="rgb(222,201,39)" rx="2" ry="2" />
<text  x="480.07" y="207.5" ></text>
</g>
<g >
<title>torch_int/functional/fused.py(23):_dq_add_layernorm_q_cpp (1,385,253 us., 18.30%)</title><rect x="181.2" y="245" width="216.0" height="15.0" fill="rgb(214,224,22)" rx="2" ry="2" />
<text  x="184.23" y="255.5" >torch_int/functional/fused.p..</text>
</g>
<g >
<title>torch_int/nn/opt.py(301):__prepare_decoder_attention_mask (4,005 us., 0.05%)</title><rect x="476.4" y="245" width="0.7" height="15.0" fill="rgb(232,176,35)" rx="2" ry="2" />
<text  x="479.44" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (118,405 us., 1.56%)</title><rect x="831.1" y="181" width="18.4" height="15.0" fill="rgb(205,47,10)" rx="2" ry="2" />
<text  x="834.06" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (8,028 us., 0.11%)</title><rect x="946.1" y="181" width="1.3" height="15.0" fill="rgb(218,33,53)" rx="2" ry="2" />
<text  x="949.14" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,597 us., 0.02%)</title><rect x="945.8" y="197" width="0.3" height="15.0" fill="rgb(234,16,16)" rx="2" ry="2" />
<text  x="948.83" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,974,159 us., 26.08%)</title><rect x="502.0" y="229" width="307.7" height="15.0" fill="rgb(249,188,33)" rx="2" ry="2" />
<text  x="504.96" y="239.5" >torch/autograd/grad_mode.py(24):_decorate..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (65,502 us., 0.87%)</title><rect x="820.8" y="133" width="10.3" height="15.0" fill="rgb(222,93,36)" rx="2" ry="2" />
<text  x="823.85" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (1,555,709 us., 20.55%)</title><rect x="947.4" y="261" width="242.5" height="15.0" fill="rgb(245,8,42)" rx="2" ry="2" />
<text  x="950.39" y="271.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (1,555,709 us., 20.55%)</title><rect x="947.4" y="181" width="242.5" height="15.0" fill="rgb(214,198,16)" rx="2" ry="2" />
<text  x="950.39" y="191.5" >torch_int/nn/opt.py(322):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (3,503 us., 0.05%)</title><rect x="397.7" y="181" width="0.6" height="15.0" fill="rgb(213,59,43)" rx="2" ry="2" />
<text  x="400.72" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,385,253 us., 18.30%)</title><rect x="181.2" y="149" width="216.0" height="15.0" fill="rgb(209,129,9)" rx="2" ry="2" />
<text  x="184.23" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch_int/nn/opt.py(43):__shape (149,780 us., 1.98%)</title><rect x="478.6" y="245" width="23.4" height="15.0" fill="rgb(237,228,36)" rx="2" ry="2" />
<text  x="481.61" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,531 us., 0.05%)</title><rect x="397.2" y="181" width="0.5" height="15.0" fill="rgb(217,136,17)" rx="2" ry="2" />
<text  x="400.17" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (118,405 us., 1.56%)</title><rect x="831.1" y="133" width="18.4" height="15.0" fill="rgb(231,138,45)" rx="2" ry="2" />
<text  x="834.06" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (498,485 us., 6.59%)</title><rect x="868.1" y="149" width="77.7" height="15.0" fill="rgb(223,65,47)" rx="2" ry="2" />
<text  x="871.06" y="159.5" >nn.Modul..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (118,405 us., 1.56%)</title><rect x="831.1" y="101" width="18.4" height="15.0" fill="rgb(251,108,14)" rx="2" ry="2" />
<text  x="834.06" y="111.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (7,034 us., 0.09%)</title><rect x="397.2" y="245" width="1.1" height="15.0" fill="rgb(249,214,37)" rx="2" ry="2" />
<text  x="400.17" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (498,485 us., 6.59%)</title><rect x="868.1" y="165" width="77.7" height="15.0" fill="rgb(240,8,54)" rx="2" ry="2" />
<text  x="871.06" y="175.5" >torch_in..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,385,253 us., 18.30%)</title><rect x="181.2" y="101" width="216.0" height="15.0" fill="rgb(236,194,50)" rx="2" ry="2" />
<text  x="184.23" y="111.5" >profiling/utils.py(18):_prof..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,974,159 us., 26.08%)</title><rect x="502.0" y="117" width="307.7" height="15.0" fill="rgb(230,74,32)" rx="2" ry="2" />
<text  x="504.96" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (3,531 us., 0.05%)</title><rect x="397.2" y="197" width="0.5" height="15.0" fill="rgb(254,224,37)" rx="2" ry="2" />
<text  x="400.17" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (498,485 us., 6.59%)</title><rect x="868.1" y="101" width="77.7" height="15.0" fill="rgb(221,132,23)" rx="2" ry="2" />
<text  x="871.06" y="111.5" >profilin..</text>
</g>
<g >
<title>torch_int/nn/opt.py(184):_forward (498,485 us., 6.59%)</title><rect x="868.1" y="197" width="77.7" height="15.0" fill="rgb(235,159,35)" rx="2" ry="2" />
<text  x="871.06" y="207.5" >torch_in..</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (501,469 us., 6.62%)</title><rect x="398.3" y="229" width="78.1" height="15.0" fill="rgb(213,151,29)" rx="2" ry="2" />
<text  x="401.27" y="239.5" >torch_int..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (498,485 us., 6.59%)</title><rect x="868.1" y="181" width="77.7" height="15.0" fill="rgb(221,135,7)" rx="2" ry="2" />
<text  x="871.06" y="191.5" >nn.Modul..</text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (1,093,340 us., 14.44%)</title><rect x="10.0" y="261" width="170.4" height="15.0" fill="rgb(227,65,52)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;built-in_function_lin..</text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (118,405 us., 1.56%)</title><rect x="831.1" y="117" width="18.4" height="15.0" fill="rgb(223,148,4)" rx="2" ry="2" />
<text  x="834.06" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (149,780 us., 1.98%)</title><rect x="478.6" y="85" width="23.4" height="15.0" fill="rgb(224,52,16)" rx="2" ry="2" />
<text  x="481.61" y="95.5" >p..</text>
</g>
<g >
<title>torch_int/nn/opt.py(184):_forward (65,502 us., 0.87%)</title><rect x="820.8" y="149" width="10.3" height="15.0" fill="rgb(237,98,9)" rx="2" ry="2" />
<text  x="823.85" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(184):_forward (149,780 us., 1.98%)</title><rect x="478.6" y="181" width="23.4" height="15.0" fill="rgb(232,209,17)" rx="2" ry="2" />
<text  x="481.61" y="191.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,597 us., 0.02%)</title><rect x="945.8" y="229" width="0.3" height="15.0" fill="rgb(238,76,5)" rx="2" ry="2" />
<text  x="948.83" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (149,780 us., 1.98%)</title><rect x="478.6" y="197" width="23.4" height="15.0" fill="rgb(246,99,4)" rx="2" ry="2" />
<text  x="481.61" y="207.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(184):_forward (501,469 us., 6.62%)</title><rect x="398.3" y="181" width="78.1" height="15.0" fill="rgb(212,44,3)" rx="2" ry="2" />
<text  x="401.27" y="191.5" >torch_int..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (118,405 us., 1.56%)</title><rect x="831.1" y="69" width="18.4" height="15.0" fill="rgb(252,110,9)" rx="2" ry="2" />
<text  x="834.06" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(184):_forward (65,666 us., 0.87%)</title><rect x="810.6" y="197" width="10.2" height="15.0" fill="rgb(225,197,2)" rx="2" ry="2" />
<text  x="813.61" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (149,780 us., 1.98%)</title><rect x="478.6" y="149" width="23.4" height="15.0" fill="rgb(216,33,35)" rx="2" ry="2" />
<text  x="481.61" y="159.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(184):_forward (118,405 us., 1.56%)</title><rect x="831.1" y="149" width="18.4" height="15.0" fill="rgb(235,220,35)" rx="2" ry="2" />
<text  x="834.06" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (4,739 us., 0.06%)</title><rect x="180.4" y="245" width="0.8" height="15.0" fill="rgb(252,153,35)" rx="2" ry="2" />
<text  x="183.44" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,503 us., 0.05%)</title><rect x="397.7" y="101" width="0.6" height="15.0" fill="rgb(210,185,38)" rx="2" ry="2" />
<text  x="400.72" y="111.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (4,247 us., 0.06%)</title><rect x="809.9" y="245" width="0.7" height="15.0" fill="rgb(249,134,23)" rx="2" ry="2" />
<text  x="812.95" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (8,028 us., 0.11%)</title><rect x="946.1" y="229" width="1.3" height="15.0" fill="rgb(243,105,5)" rx="2" ry="2" />
<text  x="949.14" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,503 us., 0.05%)</title><rect x="397.7" y="133" width="0.6" height="15.0" fill="rgb(220,119,23)" rx="2" ry="2" />
<text  x="400.72" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (118,405 us., 1.56%)</title><rect x="831.1" y="213" width="18.4" height="15.0" fill="rgb(220,40,24)" rx="2" ry="2" />
<text  x="834.06" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,555,709 us., 20.55%)</title><rect x="947.4" y="117" width="242.5" height="15.0" fill="rgb(222,57,18)" rx="2" ry="2" />
<text  x="950.39" y="127.5" >profiling/utils.py(18):_profile_..</text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7fa21f5f24b0&gt; (2,640,861 us., 34.89%)</title><rect x="398.3" y="261" width="411.6" height="15.0" fill="rgb(229,31,11)" rx="2" ry="2" />
<text  x="401.27" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7fa21f5f24b0&gt;</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,247 us., 0.06%)</title><rect x="809.9" y="117" width="0.7" height="15.0" fill="rgb(225,126,31)" rx="2" ry="2" />
<text  x="812.95" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,974,159 us., 26.08%)</title><rect x="502.0" y="85" width="307.7" height="15.0" fill="rgb(231,227,23)" rx="2" ry="2" />
<text  x="504.96" y="95.5" >torch/autograd/grad_mode.py(27):_decorate..</text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7fa313afc9c0&gt; (7,034 us., 0.09%)</title><rect x="397.2" y="261" width="1.1" height="15.0" fill="rgb(253,72,4)" rx="2" ry="2" />
<text  x="400.17" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(184):_forward (1,385,253 us., 18.30%)</title><rect x="181.2" y="197" width="216.0" height="15.0" fill="rgb(220,61,6)" rx="2" ry="2" />
<text  x="184.23" y="207.5" >torch_int/nn/opt.py(184):_fo..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,974,159 us., 26.08%)</title><rect x="502.0" y="213" width="307.7" height="15.0" fill="rgb(232,159,11)" rx="2" ry="2" />
<text  x="504.96" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (498,485 us., 6.59%)</title><rect x="868.1" y="85" width="77.7" height="15.0" fill="rgb(217,121,43)" rx="2" ry="2" />
<text  x="871.06" y="95.5" >torch/au..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (149,780 us., 1.98%)</title><rect x="478.6" y="117" width="23.4" height="15.0" fill="rgb(221,38,38)" rx="2" ry="2" />
<text  x="481.61" y="127.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (501,469 us., 6.62%)</title><rect x="398.3" y="149" width="78.1" height="15.0" fill="rgb(243,12,45)" rx="2" ry="2" />
<text  x="401.27" y="159.5" >torch_int..</text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (65,502 us., 0.87%)</title><rect x="820.8" y="117" width="10.3" height="15.0" fill="rgb(226,72,45)" rx="2" ry="2" />
<text  x="823.85" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (501,469 us., 6.62%)</title><rect x="398.3" y="213" width="78.1" height="15.0" fill="rgb(244,226,6)" rx="2" ry="2" />
<text  x="401.27" y="223.5" >torch/aut..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (8,028 us., 0.11%)</title><rect x="946.1" y="197" width="1.3" height="15.0" fill="rgb(221,71,5)" rx="2" ry="2" />
<text  x="949.14" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (118,926 us., 1.57%)</title><rect x="849.5" y="165" width="18.6" height="15.0" fill="rgb(250,34,33)" rx="2" ry="2" />
<text  x="852.52" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_method_zeros_like_of_type_object_at_0x7fa313afc9c0&gt; (1,597 us., 0.02%)</title><rect x="945.8" y="261" width="0.3" height="15.0" fill="rgb(231,220,24)" rx="2" ry="2" />
<text  x="948.83" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,974,159 us., 26.08%)</title><rect x="502.0" y="181" width="307.7" height="15.0" fill="rgb(215,190,53)" rx="2" ry="2" />
<text  x="504.96" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,093,340 us., 14.44%)</title><rect x="10.0" y="165" width="170.4" height="15.0" fill="rgb(223,192,26)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >torch/autograd/grad_mo..</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (1,974,159 us., 26.08%)</title><rect x="502.0" y="245" width="307.7" height="15.0" fill="rgb(248,31,10)" rx="2" ry="2" />
<text  x="504.96" y="255.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (498,485 us., 6.59%)</title><rect x="868.1" y="133" width="77.7" height="15.0" fill="rgb(231,53,13)" rx="2" ry="2" />
<text  x="871.06" y="143.5" >transfor..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,503 us., 0.05%)</title><rect x="397.7" y="117" width="0.6" height="15.0" fill="rgb(221,54,51)" rx="2" ry="2" />
<text  x="400.72" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,247 us., 0.06%)</title><rect x="809.9" y="165" width="0.7" height="15.0" fill="rgb(213,137,2)" rx="2" ry="2" />
<text  x="812.95" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (65,502 us., 0.87%)</title><rect x="820.8" y="101" width="10.3" height="15.0" fill="rgb(248,103,37)" rx="2" ry="2" />
<text  x="823.85" y="111.5" ></text>
</g>
<g >
<title>&lt;built-in_method_dq_add_layernorm_q_of_PyCapsule_object_at_0x7fa21ef966f0&gt; (1,385,253 us., 18.30%)</title><rect x="181.2" y="261" width="216.0" height="15.0" fill="rgb(212,81,19)" rx="2" ry="2" />
<text  x="184.23" y="271.5" >&lt;built-in_method_dq_add_laye..</text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7fa313afc9c0&gt; (498,485 us., 6.59%)</title><rect x="868.1" y="261" width="77.7" height="15.0" fill="rgb(220,46,51)" rx="2" ry="2" />
<text  x="871.06" y="271.5" >&lt;built-i..</text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (1,385,253 us., 18.30%)</title><rect x="181.2" y="165" width="216.0" height="15.0" fill="rgb(234,101,14)" rx="2" ry="2" />
<text  x="184.23" y="175.5" >torch_int/nn/opt.py(322):_fo..</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b32_o32_of_PyCapsule_object_at_0x7fa21ef96660&gt; (131,168 us., 1.73%)</title><rect x="810.6" y="261" width="20.5" height="15.0" fill="rgb(228,159,19)" rx="2" ry="2" />
<text  x="813.61" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,531 us., 0.05%)</title><rect x="397.2" y="117" width="0.5" height="15.0" fill="rgb(219,129,52)" rx="2" ry="2" />
<text  x="400.17" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (65,502 us., 0.87%)</title><rect x="820.8" y="181" width="10.3" height="15.0" fill="rgb(238,134,37)" rx="2" ry="2" />
<text  x="823.85" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (501,469 us., 6.62%)</title><rect x="398.3" y="165" width="78.1" height="15.0" fill="rgb(252,132,54)" rx="2" ry="2" />
<text  x="401.27" y="175.5" >nn.Module..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (118,405 us., 1.56%)</title><rect x="831.1" y="229" width="18.4" height="15.0" fill="rgb(247,195,31)" rx="2" ry="2" />
<text  x="834.06" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,739 us., 0.06%)</title><rect x="180.4" y="197" width="0.8" height="15.0" fill="rgb(220,141,5)" rx="2" ry="2" />
<text  x="183.44" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,555,709 us., 20.55%)</title><rect x="947.4" y="197" width="242.5" height="15.0" fill="rgb(236,162,43)" rx="2" ry="2" />
<text  x="950.39" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,974,159 us., 26.08%)</title><rect x="502.0" y="133" width="307.7" height="15.0" fill="rgb(237,229,28)" rx="2" ry="2" />
<text  x="504.96" y="143.5" >transformers/models/opt/modeling_opt.py(8..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,555,709 us., 20.55%)</title><rect x="947.4" y="101" width="242.5" height="15.0" fill="rgb(230,79,24)" rx="2" ry="2" />
<text  x="950.39" y="111.5" >torch/autograd/grad_mode.py(27):..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,739 us., 0.06%)</title><rect x="180.4" y="213" width="0.8" height="15.0" fill="rgb(227,74,43)" rx="2" ry="2" />
<text  x="183.44" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (118,926 us., 1.57%)</title><rect x="849.5" y="229" width="18.6" height="15.0" fill="rgb(234,161,25)" rx="2" ry="2" />
<text  x="852.52" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (9,923 us., 0.13%)</title><rect x="477.1" y="181" width="1.5" height="15.0" fill="rgb(250,168,47)" rx="2" ry="2" />
<text  x="480.07" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (65,666 us., 0.87%)</title><rect x="810.6" y="101" width="10.2" height="15.0" fill="rgb(241,63,29)" rx="2" ry="2" />
<text  x="813.61" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,093,340 us., 14.44%)</title><rect x="10.0" y="197" width="170.4" height="15.0" fill="rgb(248,153,9)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >nn.Module:_Int8OPTForC..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (65,666 us., 0.87%)</title><rect x="810.6" y="133" width="10.2" height="15.0" fill="rgb(229,72,26)" rx="2" ry="2" />
<text  x="813.61" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (501,469 us., 6.62%)</title><rect x="398.3" y="197" width="78.1" height="15.0" fill="rgb(212,228,36)" rx="2" ry="2" />
<text  x="401.27" y="207.5" >nn.Module..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,597 us., 0.02%)</title><rect x="945.8" y="181" width="0.3" height="15.0" fill="rgb(243,23,26)" rx="2" ry="2" />
<text  x="948.83" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,974,159 us., 26.08%)</title><rect x="502.0" y="149" width="307.7" height="15.0" fill="rgb(247,121,42)" rx="2" ry="2" />
<text  x="504.96" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (118,405 us., 1.56%)</title><rect x="831.1" y="85" width="18.4" height="15.0" fill="rgb(223,132,48)" rx="2" ry="2" />
<text  x="834.06" y="95.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,739 us., 0.06%)</title><rect x="180.4" y="181" width="0.8" height="15.0" fill="rgb(246,86,37)" rx="2" ry="2" />
<text  x="183.44" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Linear (1,093,340 us., 14.44%)</title><rect x="10.0" y="229" width="170.4" height="15.0" fill="rgb(215,42,47)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >nn.Module:_Linear</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (65,502 us., 0.87%)</title><rect x="820.8" y="53" width="10.3" height="15.0" fill="rgb(218,225,50)" rx="2" ry="2" />
<text  x="823.85" y="63.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (149,780 us., 1.98%)</title><rect x="478.6" y="213" width="23.4" height="15.0" fill="rgb(224,162,12)" rx="2" ry="2" />
<text  x="481.61" y="223.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,385,253 us., 18.30%)</title><rect x="181.2" y="85" width="216.0" height="15.0" fill="rgb(248,147,48)" rx="2" ry="2" />
<text  x="184.23" y="95.5" >torch/autograd/grad_mode.py(..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,005 us., 0.05%)</title><rect x="476.4" y="213" width="0.7" height="15.0" fill="rgb(206,126,43)" rx="2" ry="2" />
<text  x="479.44" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (65,502 us., 0.87%)</title><rect x="820.8" y="37" width="10.3" height="15.0" fill="rgb(251,108,31)" rx="2" ry="2" />
<text  x="823.85" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (65,666 us., 0.87%)</title><rect x="810.6" y="149" width="10.2" height="15.0" fill="rgb(206,31,41)" rx="2" ry="2" />
<text  x="813.61" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_DQ_Add_LayerNorm_Q (1,385,253 us., 18.30%)</title><rect x="181.2" y="213" width="216.0" height="15.0" fill="rgb(234,157,25)" rx="2" ry="2" />
<text  x="184.23" y="223.5" >nn.Module:_DQ_Add_LayerNorm_Q</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,005 us., 0.05%)</title><rect x="476.4" y="165" width="0.7" height="15.0" fill="rgb(215,224,50)" rx="2" ry="2" />
<text  x="479.44" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (9,923 us., 0.13%)</title><rect x="477.1" y="229" width="1.5" height="15.0" fill="rgb(247,158,44)" rx="2" ry="2" />
<text  x="480.07" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,555,709 us., 20.55%)</title><rect x="947.4" y="245" width="242.5" height="15.0" fill="rgb(221,21,47)" rx="2" ry="2" />
<text  x="950.39" y="255.5" >torch/autograd/grad_mode.py(24):..</text>
</g>
<g >
<title>nn.Module:_Embedding (3,531 us., 0.05%)</title><rect x="397.2" y="213" width="0.5" height="15.0" fill="rgb(249,228,31)" rx="2" ry="2" />
<text  x="400.17" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (1,224 us., 0.02%)</title><rect x="809.8" y="245" width="0.1" height="15.0" fill="rgb(232,149,49)" rx="2" ry="2" />
<text  x="812.76" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (1,974,159 us., 26.08%)</title><rect x="502.0" y="165" width="307.7" height="15.0" fill="rgb(227,172,1)" rx="2" ry="2" />
<text  x="504.96" y="175.5" >torch_int/nn/opt.py(322):_forward</text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (7,034 us., 0.09%)</title><rect x="397.2" y="229" width="1.1" height="15.0" fill="rgb(220,91,10)" rx="2" ry="2" />
<text  x="400.17" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (498,485 us., 6.59%)</title><rect x="868.1" y="213" width="77.7" height="15.0" fill="rgb(210,159,13)" rx="2" ry="2" />
<text  x="871.06" y="223.5" >nn.Modul..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (65,502 us., 0.87%)</title><rect x="820.8" y="165" width="10.3" height="15.0" fill="rgb(239,202,45)" rx="2" ry="2" />
<text  x="823.85" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,503 us., 0.05%)</title><rect x="397.7" y="165" width="0.6" height="15.0" fill="rgb(234,183,21)" rx="2" ry="2" />
<text  x="400.72" y="175.5" ></text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (4,247 us., 0.06%)</title><rect x="809.9" y="229" width="0.7" height="15.0" fill="rgb(249,6,35)" rx="2" ry="2" />
<text  x="812.95" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,385,253 us., 18.30%)</title><rect x="181.2" y="181" width="216.0" height="15.0" fill="rgb(253,220,10)" rx="2" ry="2" />
<text  x="184.23" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (1,597 us., 0.02%)</title><rect x="945.8" y="245" width="0.3" height="15.0" fill="rgb(247,196,41)" rx="2" ry="2" />
<text  x="948.83" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,739 us., 0.06%)</title><rect x="180.4" y="229" width="0.8" height="15.0" fill="rgb(241,72,22)" rx="2" ry="2" />
<text  x="183.44" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(62):_forward (118,405 us., 1.56%)</title><rect x="831.1" y="245" width="18.4" height="15.0" fill="rgb(231,198,31)" rx="2" ry="2" />
<text  x="834.06" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (501,469 us., 6.62%)</title><rect x="398.3" y="133" width="78.1" height="15.0" fill="rgb(206,129,52)" rx="2" ry="2" />
<text  x="401.27" y="143.5" >nn.Module..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,531 us., 0.05%)</title><rect x="397.2" y="149" width="0.5" height="15.0" fill="rgb(217,145,25)" rx="2" ry="2" />
<text  x="400.17" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,531 us., 0.05%)</title><rect x="397.2" y="133" width="0.5" height="15.0" fill="rgb(208,212,12)" rx="2" ry="2" />
<text  x="400.17" y="143.5" ></text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7fa313afc9c0&gt; (4,247 us., 0.06%)</title><rect x="809.9" y="261" width="0.7" height="15.0" fill="rgb(212,165,16)" rx="2" ry="2" />
<text  x="812.95" y="271.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (3,503 us., 0.05%)</title><rect x="397.7" y="213" width="0.6" height="15.0" fill="rgb(233,139,50)" rx="2" ry="2" />
<text  x="400.72" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (118,405 us., 1.56%)</title><rect x="831.1" y="165" width="18.4" height="15.0" fill="rgb(246,143,19)" rx="2" ry="2" />
<text  x="834.06" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (118,926 us., 1.57%)</title><rect x="849.5" y="101" width="18.6" height="15.0" fill="rgb(205,34,8)" rx="2" ry="2" />
<text  x="852.52" y="111.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,531 us., 0.05%)</title><rect x="397.2" y="165" width="0.5" height="15.0" fill="rgb(227,22,30)" rx="2" ry="2" />
<text  x="400.17" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (149,780 us., 1.98%)</title><rect x="478.6" y="69" width="23.4" height="15.0" fill="rgb(231,150,53)" rx="2" ry="2" />
<text  x="481.61" y="79.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (65,502 us., 0.87%)</title><rect x="820.8" y="85" width="10.3" height="15.0" fill="rgb(250,91,32)" rx="2" ry="2" />
<text  x="823.85" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,005 us., 0.05%)</title><rect x="476.4" y="149" width="0.7" height="15.0" fill="rgb(227,149,17)" rx="2" ry="2" />
<text  x="479.44" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (65,502 us., 0.87%)</title><rect x="820.8" y="69" width="10.3" height="15.0" fill="rgb(238,36,27)" rx="2" ry="2" />
<text  x="823.85" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(33):_forward (131,168 us., 1.73%)</title><rect x="810.6" y="245" width="20.5" height="15.0" fill="rgb(222,143,40)" rx="2" ry="2" />
<text  x="813.61" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (149,780 us., 1.98%)</title><rect x="478.6" y="101" width="23.4" height="15.0" fill="rgb(248,41,36)" rx="2" ry="2" />
<text  x="481.61" y="111.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (8,028 us., 0.11%)</title><rect x="946.1" y="213" width="1.3" height="15.0" fill="rgb(241,207,45)" rx="2" ry="2" />
<text  x="949.14" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,005 us., 0.05%)</title><rect x="476.4" y="181" width="0.7" height="15.0" fill="rgb(207,159,52)" rx="2" ry="2" />
<text  x="479.44" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (9,923 us., 0.13%)</title><rect x="477.1" y="213" width="1.5" height="15.0" fill="rgb(209,1,12)" rx="2" ry="2" />
<text  x="480.07" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,224 us., 0.02%)</title><rect x="809.8" y="133" width="0.1" height="15.0" fill="rgb(206,201,32)" rx="2" ry="2" />
<text  x="812.76" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (149,780 us., 1.98%)</title><rect x="478.6" y="133" width="23.4" height="15.0" fill="rgb(231,194,40)" rx="2" ry="2" />
<text  x="481.61" y="143.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (65,666 us., 0.87%)</title><rect x="810.6" y="85" width="10.2" height="15.0" fill="rgb(253,167,52)" rx="2" ry="2" />
<text  x="813.61" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (118,405 us., 1.56%)</title><rect x="831.1" y="197" width="18.4" height="15.0" fill="rgb(238,207,44)" rx="2" ry="2" />
<text  x="834.06" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(92):_forward (118,926 us., 1.57%)</title><rect x="849.5" y="245" width="18.6" height="15.0" fill="rgb(242,12,27)" rx="2" ry="2" />
<text  x="852.52" y="255.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fa21ef966c0&gt; (118,405 us., 1.56%)</title><rect x="831.1" y="261" width="18.4" height="15.0" fill="rgb(254,81,0)" rx="2" ry="2" />
<text  x="834.06" y="271.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,597 us., 0.02%)</title><rect x="945.8" y="213" width="0.3" height="15.0" fill="rgb(240,0,25)" rx="2" ry="2" />
<text  x="948.83" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,093,340 us., 14.44%)</title><rect x="10.0" y="181" width="170.4" height="15.0" fill="rgb(238,226,19)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >profiling/utils.py(18)..</text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (4,005 us., 0.05%)</title><rect x="476.4" y="229" width="0.7" height="15.0" fill="rgb(247,220,29)" rx="2" ry="2" />
<text  x="479.44" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(184):_forward (118,926 us., 1.57%)</title><rect x="849.5" y="197" width="18.6" height="15.0" fill="rgb(211,35,52)" rx="2" ry="2" />
<text  x="852.52" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,247 us., 0.06%)</title><rect x="809.9" y="181" width="0.7" height="15.0" fill="rgb(245,175,16)" rx="2" ry="2" />
<text  x="812.95" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(322):_forward (65,666 us., 0.87%)</title><rect x="810.6" y="165" width="10.2" height="15.0" fill="rgb(243,66,34)" rx="2" ry="2" />
<text  x="813.61" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,385,253 us., 18.30%)</title><rect x="181.2" y="117" width="216.0" height="15.0" fill="rgb(213,42,4)" rx="2" ry="2" />
<text  x="184.23" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (501,469 us., 6.62%)</title><rect x="398.3" y="85" width="78.1" height="15.0" fill="rgb(223,137,48)" rx="2" ry="2" />
<text  x="401.27" y="95.5" >profiling..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (501,469 us., 6.62%)</title><rect x="398.3" y="117" width="78.1" height="15.0" fill="rgb(239,49,9)" rx="2" ry="2" />
<text  x="401.27" y="127.5" >transform..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,224 us., 0.02%)</title><rect x="809.8" y="149" width="0.1" height="15.0" fill="rgb(237,108,3)" rx="2" ry="2" />
<text  x="812.76" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,093,340 us., 14.44%)</title><rect x="10.0" y="213" width="170.4" height="15.0" fill="rgb(251,61,21)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >transformers/models/op..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (65,666 us., 0.87%)</title><rect x="810.6" y="181" width="10.2" height="15.0" fill="rgb(223,66,32)" rx="2" ry="2" />
<text  x="813.61" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (149,780 us., 1.98%)</title><rect x="478.6" y="229" width="23.4" height="15.0" fill="rgb(229,197,22)" rx="2" ry="2" />
<text  x="481.61" y="239.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,503 us., 0.05%)</title><rect x="397.7" y="149" width="0.6" height="15.0" fill="rgb(221,88,42)" rx="2" ry="2" />
<text  x="400.72" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (118,926 us., 1.57%)</title><rect x="849.5" y="149" width="18.6" height="15.0" fill="rgb(212,137,21)" rx="2" ry="2" />
<text  x="852.52" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (9,923 us., 0.13%)</title><rect x="477.1" y="165" width="1.5" height="15.0" fill="rgb(224,63,22)" rx="2" ry="2" />
<text  x="480.07" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,005 us., 0.05%)</title><rect x="476.4" y="197" width="0.7" height="15.0" fill="rgb(221,94,30)" rx="2" ry="2" />
<text  x="479.44" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(184):_forward (1,974,159 us., 26.08%)</title><rect x="502.0" y="197" width="307.7" height="15.0" fill="rgb(247,200,49)" rx="2" ry="2" />
<text  x="504.96" y="207.5" >torch_int/nn/opt.py(184):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,974,159 us., 26.08%)</title><rect x="502.0" y="101" width="307.7" height="15.0" fill="rgb(254,196,49)" rx="2" ry="2" />
<text  x="504.96" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,597 us., 0.02%)</title><rect x="945.8" y="165" width="0.3" height="15.0" fill="rgb(212,193,53)" rx="2" ry="2" />
<text  x="948.83" y="175.5" ></text>
</g>
</g>
</svg>
