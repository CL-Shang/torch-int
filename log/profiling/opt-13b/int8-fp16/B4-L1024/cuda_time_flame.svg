<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (851,424 us., 1.12%)</title><rect x="780.9" y="213" width="13.2" height="15.0" fill="rgb(214,216,50)" rx="2" ry="2" />
<text  x="783.89" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (21,536 us., 0.03%)</title><rect x="35.1" y="197" width="0.4" height="15.0" fill="rgb(234,20,46)" rx="2" ry="2" />
<text  x="38.12" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (11,080 us., 0.01%)</title><rect x="731.9" y="165" width="0.1" height="15.0" fill="rgb(240,137,37)" rx="2" ry="2" />
<text  x="734.87" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNormQ (2,888,476 us., 3.81%)</title><rect x="157.7" y="229" width="45.0" height="15.0" fill="rgb(253,128,0)" rx="2" ry="2" />
<text  x="160.74" y="239.5" >nn.M..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (487,499 us., 0.64%)</title><rect x="773.3" y="53" width="7.6" height="15.0" fill="rgb(242,23,15)" rx="2" ry="2" />
<text  x="776.30" y="63.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (851,424 us., 1.12%)</title><rect x="780.9" y="165" width="13.2" height="15.0" fill="rgb(237,61,34)" rx="2" ry="2" />
<text  x="783.89" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (7,859,768 us., 10.36%)</title><rect x="35.5" y="213" width="122.2" height="15.0" fill="rgb(239,18,45)" rx="2" ry="2" />
<text  x="38.45" y="223.5" >torch/autograd/..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (7,850,583 us., 10.35%)</title><rect x="794.1" y="197" width="122.2" height="15.0" fill="rgb(229,87,30)" rx="2" ry="2" />
<text  x="797.14" y="207.5" >torch_int/nn/op..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,888,476 us., 3.81%)</title><rect x="157.7" y="117" width="45.0" height="15.0" fill="rgb(231,33,2)" rx="2" ry="2" />
<text  x="160.74" y="127.5" >prof..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (29,710,035 us., 39.17%)</title><rect x="269.6" y="213" width="462.3" height="15.0" fill="rgb(253,65,13)" rx="2" ry="2" />
<text  x="272.61" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>nn.Module:_LayerNorm (18,551 us., 0.02%)</title><rect x="732.0" y="213" width="0.3" height="15.0" fill="rgb(233,97,22)" rx="2" ry="2" />
<text  x="735.04" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7ff2770989c0&gt; (1,501,950 us., 1.98%)</title><rect x="732.0" y="261" width="23.4" height="15.0" fill="rgb(210,223,24)" rx="2" ry="2" />
<text  x="735.04" y="271.5" >&lt;..</text>
</g>
<g >
<title>torch_int/nn/linear.py(225):_forward (969,663 us., 1.28%)</title><rect x="765.8" y="245" width="15.1" height="15.0" fill="rgb(224,208,28)" rx="2" ry="2" />
<text  x="768.80" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (667,970 us., 0.88%)</title><rect x="755.4" y="213" width="10.4" height="15.0" fill="rgb(231,31,45)" rx="2" ry="2" />
<text  x="758.41" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (17,566,674 us., 23.16%)</title><rect x="916.7" y="149" width="273.3" height="15.0" fill="rgb(237,20,31)" rx="2" ry="2" />
<text  x="919.68" y="159.5" >transformers/models/opt/modeling_opt..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,589,129 us., 2.10%)</title><rect x="10.0" y="181" width="24.7" height="15.0" fill="rgb(236,47,53)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >p..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (21,717 us., 0.03%)</title><rect x="34.8" y="117" width="0.3" height="15.0" fill="rgb(238,12,15)" rx="2" ry="2" />
<text  x="37.78" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,888,476 us., 3.81%)</title><rect x="157.7" y="165" width="45.0" height="15.0" fill="rgb(239,199,28)" rx="2" ry="2" />
<text  x="160.74" y="175.5" >nn.M..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (851,424 us., 1.12%)</title><rect x="780.9" y="101" width="13.2" height="15.0" fill="rgb(214,15,50)" rx="2" ry="2" />
<text  x="783.89" y="111.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (11,080 us., 0.01%)</title><rect x="731.9" y="181" width="0.1" height="15.0" fill="rgb(216,137,11)" rx="2" ry="2" />
<text  x="734.87" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (7,859,768 us., 10.36%)</title><rect x="35.5" y="197" width="122.2" height="15.0" fill="rgb(206,15,6)" rx="2" ry="2" />
<text  x="38.45" y="207.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,251,638 us., 1.65%)</title><rect x="250.1" y="133" width="19.5" height="15.0" fill="rgb(226,179,32)" rx="2" ry="2" />
<text  x="253.14" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNormQ (1,483,399 us., 1.96%)</title><rect x="732.3" y="213" width="23.1" height="15.0" fill="rgb(214,53,40)" rx="2" ry="2" />
<text  x="735.33" y="223.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (17,566,674 us., 23.16%)</title><rect x="916.7" y="181" width="273.3" height="15.0" fill="rgb(209,126,30)" rx="2" ry="2" />
<text  x="919.68" y="191.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (79,322 us., 0.10%)</title><rect x="248.9" y="181" width="1.2" height="15.0" fill="rgb(242,45,28)" rx="2" ry="2" />
<text  x="251.90" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (487,499 us., 0.64%)</title><rect x="773.3" y="101" width="7.6" height="15.0" fill="rgb(227,91,47)" rx="2" ry="2" />
<text  x="776.30" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,970,908 us., 3.92%)</title><rect x="202.7" y="197" width="46.2" height="15.0" fill="rgb(239,76,4)" rx="2" ry="2" />
<text  x="205.68" y="207.5" >nn.M..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (482,164 us., 0.64%)</title><rect x="765.8" y="85" width="7.5" height="15.0" fill="rgb(225,142,22)" rx="2" ry="2" />
<text  x="768.80" y="95.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (11,080 us., 0.01%)</title><rect x="731.9" y="245" width="0.1" height="15.0" fill="rgb(224,202,25)" rx="2" ry="2" />
<text  x="734.87" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (667,970 us., 0.88%)</title><rect x="755.4" y="85" width="10.4" height="15.0" fill="rgb(246,175,6)" rx="2" ry="2" />
<text  x="758.41" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (487,499 us., 0.64%)</title><rect x="773.3" y="37" width="7.6" height="15.0" fill="rgb(238,31,23)" rx="2" ry="2" />
<text  x="776.30" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (18,623 us., 0.02%)</title><rect x="916.4" y="245" width="0.3" height="15.0" fill="rgb(239,170,32)" rx="2" ry="2" />
<text  x="919.39" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (667,970 us., 0.88%)</title><rect x="755.4" y="69" width="10.4" height="15.0" fill="rgb(245,107,4)" rx="2" ry="2" />
<text  x="758.41" y="79.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,589,129 us., 2.10%)</title><rect x="10.0" y="213" width="24.7" height="15.0" fill="rgb(226,179,9)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (487,499 us., 0.64%)</title><rect x="773.3" y="165" width="7.6" height="15.0" fill="rgb(211,173,2)" rx="2" ry="2" />
<text  x="776.30" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (17,566,674 us., 23.16%)</title><rect x="916.7" y="213" width="273.3" height="15.0" fill="rgb(242,120,26)" rx="2" ry="2" />
<text  x="919.68" y="223.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (667,970 us., 0.88%)</title><rect x="755.4" y="229" width="10.4" height="15.0" fill="rgb(223,202,38)" rx="2" ry="2" />
<text  x="758.41" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (18,551 us., 0.02%)</title><rect x="732.0" y="197" width="0.3" height="15.0" fill="rgb(252,118,25)" rx="2" ry="2" />
<text  x="735.04" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (2,888,476 us., 3.81%)</title><rect x="157.7" y="245" width="45.0" height="15.0" fill="rgb(217,98,50)" rx="2" ry="2" />
<text  x="160.74" y="255.5" >torc..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (851,424 us., 1.12%)</title><rect x="780.9" y="133" width="13.2" height="15.0" fill="rgb(231,186,32)" rx="2" ry="2" />
<text  x="783.89" y="143.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (7,859,768 us., 10.36%)</title><rect x="35.5" y="245" width="122.2" height="15.0" fill="rgb(219,147,41)" rx="2" ry="2" />
<text  x="38.45" y="255.5" >torch/nn/functi..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (17,566,674 us., 23.16%)</title><rect x="916.7" y="261" width="273.3" height="15.0" fill="rgb(211,75,42)" rx="2" ry="2" />
<text  x="919.68" y="271.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (487,499 us., 0.64%)</title><rect x="773.3" y="181" width="7.6" height="15.0" fill="rgb(254,40,45)" rx="2" ry="2" />
<text  x="776.30" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (21,536 us., 0.03%)</title><rect x="35.1" y="101" width="0.4" height="15.0" fill="rgb(238,93,31)" rx="2" ry="2" />
<text  x="38.12" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,251,638 us., 1.65%)</title><rect x="250.1" y="197" width="19.5" height="15.0" fill="rgb(214,126,1)" rx="2" ry="2" />
<text  x="253.14" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,483,399 us., 1.96%)</title><rect x="732.3" y="165" width="23.1" height="15.0" fill="rgb(207,14,16)" rx="2" ry="2" />
<text  x="735.33" y="175.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (29,710,035 us., 39.17%)</title><rect x="269.6" y="117" width="462.3" height="15.0" fill="rgb(210,103,35)" rx="2" ry="2" />
<text  x="272.61" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (7,850,583 us., 10.35%)</title><rect x="794.1" y="117" width="122.2" height="15.0" fill="rgb(226,16,33)" rx="2" ry="2" />
<text  x="797.14" y="127.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (2,888,476 us., 3.81%)</title><rect x="157.7" y="197" width="45.0" height="15.0" fill="rgb(248,155,9)" rx="2" ry="2" />
<text  x="160.74" y="207.5" >nn.M..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (487,499 us., 0.64%)</title><rect x="773.3" y="117" width="7.6" height="15.0" fill="rgb(216,96,1)" rx="2" ry="2" />
<text  x="776.30" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,888,476 us., 3.81%)</title><rect x="157.7" y="101" width="45.0" height="15.0" fill="rgb(213,21,25)" rx="2" ry="2" />
<text  x="160.74" y="111.5" >torc..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,251,638 us., 1.65%)</title><rect x="250.1" y="117" width="19.5" height="15.0" fill="rgb(243,83,48)" rx="2" ry="2" />
<text  x="253.14" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (851,424 us., 1.12%)</title><rect x="780.9" y="181" width="13.2" height="15.0" fill="rgb(219,49,54)" rx="2" ry="2" />
<text  x="783.89" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (29,710,035 us., 39.17%)</title><rect x="269.6" y="229" width="462.3" height="15.0" fill="rgb(245,84,11)" rx="2" ry="2" />
<text  x="272.61" y="239.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (667,970 us., 0.88%)</title><rect x="755.4" y="197" width="10.4" height="15.0" fill="rgb(219,140,27)" rx="2" ry="2" />
<text  x="758.41" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (79,322 us., 0.10%)</title><rect x="248.9" y="229" width="1.2" height="15.0" fill="rgb(226,146,7)" rx="2" ry="2" />
<text  x="251.90" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(40):_forward (667,970 us., 0.88%)</title><rect x="755.4" y="245" width="10.4" height="15.0" fill="rgb(240,58,17)" rx="2" ry="2" />
<text  x="758.41" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (18,551 us., 0.02%)</title><rect x="732.0" y="181" width="0.3" height="15.0" fill="rgb(254,81,2)" rx="2" ry="2" />
<text  x="735.04" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,483,399 us., 1.96%)</title><rect x="732.3" y="197" width="23.1" height="15.0" fill="rgb(226,220,22)" rx="2" ry="2" />
<text  x="735.33" y="207.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (482,164 us., 0.64%)</title><rect x="765.8" y="117" width="7.5" height="15.0" fill="rgb(206,87,28)" rx="2" ry="2" />
<text  x="768.80" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (7,850,583 us., 10.35%)</title><rect x="794.1" y="181" width="122.2" height="15.0" fill="rgb(217,203,53)" rx="2" ry="2" />
<text  x="797.14" y="191.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (7,859,768 us., 10.36%)</title><rect x="35.5" y="181" width="122.2" height="15.0" fill="rgb(245,193,40)" rx="2" ry="2" />
<text  x="38.45" y="191.5" >torch_int/nn/op..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (11,080 us., 0.01%)</title><rect x="731.9" y="213" width="0.1" height="15.0" fill="rgb(243,22,5)" rx="2" ry="2" />
<text  x="734.87" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (18,551 us., 0.02%)</title><rect x="732.0" y="133" width="0.3" height="15.0" fill="rgb(248,164,38)" rx="2" ry="2" />
<text  x="735.04" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (851,424 us., 1.12%)</title><rect x="780.9" y="117" width="13.2" height="15.0" fill="rgb(213,24,33)" rx="2" ry="2" />
<text  x="783.89" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (29,710,035 us., 39.17%)</title><rect x="269.6" y="133" width="462.3" height="15.0" fill="rgb(220,74,49)" rx="2" ry="2" />
<text  x="272.61" y="143.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (482,164 us., 0.64%)</title><rect x="765.8" y="197" width="7.5" height="15.0" fill="rgb(220,17,21)" rx="2" ry="2" />
<text  x="768.80" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,589,129 us., 2.10%)</title><rect x="10.0" y="197" width="24.7" height="15.0" fill="rgb(222,100,54)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (7,859,768 us., 10.36%)</title><rect x="35.5" y="117" width="122.2" height="15.0" fill="rgb(229,166,4)" rx="2" ry="2" />
<text  x="38.45" y="127.5" >transformers/mo..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (29,710,035 us., 39.17%)</title><rect x="269.6" y="181" width="462.3" height="15.0" fill="rgb(225,115,12)" rx="2" ry="2" />
<text  x="272.61" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (79,322 us., 0.10%)</title><rect x="248.9" y="197" width="1.2" height="15.0" fill="rgb(223,121,6)" rx="2" ry="2" />
<text  x="251.90" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (7,850,583 us., 10.35%)</title><rect x="794.1" y="213" width="122.2" height="15.0" fill="rgb(208,80,39)" rx="2" ry="2" />
<text  x="797.14" y="223.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,251,638 us., 1.65%)</title><rect x="250.1" y="101" width="19.5" height="15.0" fill="rgb(226,126,41)" rx="2" ry="2" />
<text  x="253.14" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (7,850,583 us., 10.35%)</title><rect x="794.1" y="165" width="122.2" height="15.0" fill="rgb(211,223,50)" rx="2" ry="2" />
<text  x="797.14" y="175.5" >torch_int/nn/op..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (17,566,674 us., 23.16%)</title><rect x="916.7" y="133" width="273.3" height="15.0" fill="rgb(233,131,18)" rx="2" ry="2" />
<text  x="919.68" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (851,424 us., 1.12%)</title><rect x="780.9" y="149" width="13.2" height="15.0" fill="rgb(216,104,12)" rx="2" ry="2" />
<text  x="783.89" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (7,850,583 us., 10.35%)</title><rect x="794.1" y="149" width="122.2" height="15.0" fill="rgb(254,35,29)" rx="2" ry="2" />
<text  x="797.14" y="159.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (11,080 us., 0.01%)</title><rect x="731.9" y="229" width="0.1" height="15.0" fill="rgb(211,5,20)" rx="2" ry="2" />
<text  x="734.87" y="239.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (43,253 us., 0.06%)</title><rect x="34.8" y="245" width="0.7" height="15.0" fill="rgb(225,63,9)" rx="2" ry="2" />
<text  x="37.78" y="255.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,483,399 us., 1.96%)</title><rect x="732.3" y="101" width="23.1" height="15.0" fill="rgb(209,175,45)" rx="2" ry="2" />
<text  x="735.33" y="111.5" >p..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (482,164 us., 0.64%)</title><rect x="765.8" y="149" width="7.5" height="15.0" fill="rgb(238,214,10)" rx="2" ry="2" />
<text  x="768.80" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (18,623 us., 0.02%)</title><rect x="916.4" y="213" width="0.3" height="15.0" fill="rgb(252,104,24)" rx="2" ry="2" />
<text  x="919.39" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (667,970 us., 0.88%)</title><rect x="755.4" y="101" width="10.4" height="15.0" fill="rgb(239,53,34)" rx="2" ry="2" />
<text  x="758.41" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (2,970,908 us., 3.92%)</title><rect x="202.7" y="245" width="46.2" height="15.0" fill="rgb(227,137,13)" rx="2" ry="2" />
<text  x="205.68" y="255.5" >torc..</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_bfp32_ofp32_of_PyCapsule_object_at_0x7ff1825327b0&gt; (969,663 us., 1.28%)</title><rect x="765.8" y="261" width="15.1" height="15.0" fill="rgb(246,18,52)" rx="2" ry="2" />
<text  x="768.80" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (7,859,768 us., 10.36%)</title><rect x="35.5" y="69" width="122.2" height="15.0" fill="rgb(234,5,8)" rx="2" ry="2" />
<text  x="38.45" y="79.5" >torch/autograd/..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (29,710,035 us., 39.17%)</title><rect x="269.6" y="85" width="462.3" height="15.0" fill="rgb(252,6,40)" rx="2" ry="2" />
<text  x="272.61" y="95.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (21,717 us., 0.03%)</title><rect x="34.8" y="181" width="0.3" height="15.0" fill="rgb(210,191,14)" rx="2" ry="2" />
<text  x="37.78" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,483,399 us., 1.96%)</title><rect x="732.3" y="181" width="23.1" height="15.0" fill="rgb(251,35,23)" rx="2" ry="2" />
<text  x="735.33" y="191.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,251,638 us., 1.65%)</title><rect x="250.1" y="165" width="19.5" height="15.0" fill="rgb(245,151,52)" rx="2" ry="2" />
<text  x="253.14" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (969,663 us., 1.28%)</title><rect x="765.8" y="229" width="15.1" height="15.0" fill="rgb(251,184,43)" rx="2" ry="2" />
<text  x="768.80" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (7,859,768 us., 10.36%)</title><rect x="35.5" y="229" width="122.2" height="15.0" fill="rgb(252,39,39)" rx="2" ry="2" />
<text  x="38.45" y="239.5" >torch_int/nn/op..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,251,638 us., 1.65%)</title><rect x="250.1" y="181" width="19.5" height="15.0" fill="rgb(217,77,48)" rx="2" ry="2" />
<text  x="253.14" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (79,322 us., 0.10%)</title><rect x="248.9" y="149" width="1.2" height="15.0" fill="rgb(243,206,22)" rx="2" ry="2" />
<text  x="251.90" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (18,623 us., 0.02%)</title><rect x="916.4" y="197" width="0.3" height="15.0" fill="rgb(243,0,34)" rx="2" ry="2" />
<text  x="919.39" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (7,859,768 us., 10.36%)</title><rect x="35.5" y="149" width="122.2" height="15.0" fill="rgb(227,140,44)" rx="2" ry="2" />
<text  x="38.45" y="159.5" >torch_int/nn/op..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (2,970,908 us., 3.92%)</title><rect x="202.7" y="213" width="46.2" height="15.0" fill="rgb(249,19,30)" rx="2" ry="2" />
<text  x="205.68" y="223.5" >torc..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (18,551 us., 0.02%)</title><rect x="732.0" y="117" width="0.3" height="15.0" fill="rgb(251,207,41)" rx="2" ry="2" />
<text  x="735.04" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,251,638 us., 1.65%)</title><rect x="250.1" y="213" width="19.5" height="15.0" fill="rgb(216,137,17)" rx="2" ry="2" />
<text  x="253.14" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (1,251,638 us., 1.65%)</title><rect x="250.1" y="229" width="19.5" height="15.0" fill="rgb(214,204,38)" rx="2" ry="2" />
<text  x="253.14" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (11,080 us., 0.01%)</title><rect x="731.9" y="149" width="0.1" height="15.0" fill="rgb(250,113,28)" rx="2" ry="2" />
<text  x="734.87" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (487,499 us., 0.64%)</title><rect x="773.3" y="133" width="7.6" height="15.0" fill="rgb(218,171,35)" rx="2" ry="2" />
<text  x="776.30" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (487,499 us., 0.64%)</title><rect x="773.3" y="149" width="7.6" height="15.0" fill="rgb(213,51,17)" rx="2" ry="2" />
<text  x="776.30" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (7,850,583 us., 10.35%)</title><rect x="794.1" y="85" width="122.2" height="15.0" fill="rgb(243,176,48)" rx="2" ry="2" />
<text  x="797.14" y="95.5" >torch/autograd/..</text>
</g>
<g >
<title>nn.Module:_Linear (1,589,129 us., 2.10%)</title><rect x="10.0" y="229" width="24.7" height="15.0" fill="rgb(235,139,50)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >n..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (79,322 us., 0.10%)</title><rect x="248.9" y="165" width="1.2" height="15.0" fill="rgb(246,92,14)" rx="2" ry="2" />
<text  x="251.90" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (21,536 us., 0.03%)</title><rect x="35.1" y="133" width="0.4" height="15.0" fill="rgb(206,6,12)" rx="2" ry="2" />
<text  x="38.12" y="143.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,251,638 us., 1.65%)</title><rect x="250.1" y="85" width="19.5" height="15.0" fill="rgb(247,155,39)" rx="2" ry="2" />
<text  x="253.14" y="95.5" ></text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (18,551 us., 0.02%)</title><rect x="732.0" y="229" width="0.3" height="15.0" fill="rgb(240,28,42)" rx="2" ry="2" />
<text  x="735.04" y="239.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (1,589,129 us., 2.10%)</title><rect x="10.0" y="261" width="24.7" height="15.0" fill="rgb(247,33,29)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (17,566,674 us., 23.16%)</title><rect x="916.7" y="245" width="273.3" height="15.0" fill="rgb(236,13,12)" rx="2" ry="2" />
<text  x="919.68" y="255.5" >torch/autograd/grad_mode.py(24):_dec..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (18,623 us., 0.02%)</title><rect x="916.4" y="181" width="0.3" height="15.0" fill="rgb(253,194,51)" rx="2" ry="2" />
<text  x="919.39" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (667,970 us., 0.88%)</title><rect x="755.4" y="149" width="10.4" height="15.0" fill="rgb(231,28,9)" rx="2" ry="2" />
<text  x="758.41" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (2,888,476 us., 3.81%)</title><rect x="157.7" y="181" width="45.0" height="15.0" fill="rgb(205,109,54)" rx="2" ry="2" />
<text  x="160.74" y="191.5" >torc..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,970,908 us., 3.92%)</title><rect x="202.7" y="165" width="46.2" height="15.0" fill="rgb(205,189,11)" rx="2" ry="2" />
<text  x="205.68" y="175.5" >nn.M..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (851,424 us., 1.12%)</title><rect x="780.9" y="85" width="13.2" height="15.0" fill="rgb(207,90,32)" rx="2" ry="2" />
<text  x="783.89" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (7,859,768 us., 10.36%)</title><rect x="35.5" y="101" width="122.2" height="15.0" fill="rgb(224,46,34)" rx="2" ry="2" />
<text  x="38.45" y="111.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (18,551 us., 0.02%)</title><rect x="732.0" y="149" width="0.3" height="15.0" fill="rgb(208,215,6)" rx="2" ry="2" />
<text  x="735.04" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (667,970 us., 0.88%)</title><rect x="755.4" y="37" width="10.4" height="15.0" fill="rgb(246,219,49)" rx="2" ry="2" />
<text  x="758.41" y="47.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (21,536 us., 0.03%)</title><rect x="35.1" y="181" width="0.4" height="15.0" fill="rgb(221,212,0)" rx="2" ry="2" />
<text  x="38.12" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (7,859,768 us., 10.36%)</title><rect x="35.5" y="85" width="122.2" height="15.0" fill="rgb(237,173,3)" rx="2" ry="2" />
<text  x="38.45" y="95.5" >profiling/utils..</text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7ff2770989c0&gt; (43,253 us., 0.06%)</title><rect x="34.8" y="261" width="0.7" height="15.0" fill="rgb(222,197,2)" rx="2" ry="2" />
<text  x="37.78" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,483,399 us., 1.96%)</title><rect x="732.3" y="85" width="23.1" height="15.0" fill="rgb(216,89,3)" rx="2" ry="2" />
<text  x="735.33" y="95.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (21,717 us., 0.03%)</title><rect x="34.8" y="149" width="0.3" height="15.0" fill="rgb(239,228,9)" rx="2" ry="2" />
<text  x="37.78" y="159.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7ff182532810&gt; (667,970 us., 0.88%)</title><rect x="755.4" y="261" width="10.4" height="15.0" fill="rgb(229,134,30)" rx="2" ry="2" />
<text  x="758.41" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (7,850,583 us., 10.35%)</title><rect x="794.1" y="229" width="122.2" height="15.0" fill="rgb(218,127,20)" rx="2" ry="2" />
<text  x="797.14" y="239.5" >torch/autograd/..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,483,399 us., 1.96%)</title><rect x="732.3" y="117" width="23.1" height="15.0" fill="rgb(235,54,45)" rx="2" ry="2" />
<text  x="735.33" y="127.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (487,499 us., 0.64%)</title><rect x="773.3" y="69" width="7.6" height="15.0" fill="rgb(250,9,17)" rx="2" ry="2" />
<text  x="776.30" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (29,710,035 us., 39.17%)</title><rect x="269.6" y="245" width="462.3" height="15.0" fill="rgb(215,195,18)" rx="2" ry="2" />
<text  x="272.61" y="255.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,251,638 us., 1.65%)</title><rect x="250.1" y="69" width="19.5" height="15.0" fill="rgb(208,39,54)" rx="2" ry="2" />
<text  x="253.14" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(69):__shape (1,251,638 us., 1.65%)</title><rect x="250.1" y="245" width="19.5" height="15.0" fill="rgb(210,214,5)" rx="2" ry="2" />
<text  x="253.14" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (667,970 us., 0.88%)</title><rect x="755.4" y="133" width="10.4" height="15.0" fill="rgb(239,110,1)" rx="2" ry="2" />
<text  x="758.41" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (18,551 us., 0.02%)</title><rect x="732.0" y="165" width="0.3" height="15.0" fill="rgb(207,152,48)" rx="2" ry="2" />
<text  x="735.04" y="175.5" ></text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (43,253 us., 0.06%)</title><rect x="34.8" y="229" width="0.7" height="15.0" fill="rgb(221,13,39)" rx="2" ry="2" />
<text  x="37.78" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (17,566,674 us., 23.16%)</title><rect x="916.7" y="101" width="273.3" height="15.0" fill="rgb(236,94,30)" rx="2" ry="2" />
<text  x="919.68" y="111.5" >torch/autograd/grad_mode.py(27):_dec..</text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7ff182532750&gt; (851,424 us., 1.12%)</title><rect x="780.9" y="261" width="13.2" height="15.0" fill="rgb(241,17,9)" rx="2" ry="2" />
<text  x="783.89" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,251,638 us., 1.65%)</title><rect x="250.1" y="149" width="19.5" height="15.0" fill="rgb(233,98,46)" rx="2" ry="2" />
<text  x="253.14" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (482,164 us., 0.64%)</title><rect x="765.8" y="133" width="7.5" height="15.0" fill="rgb(215,52,50)" rx="2" ry="2" />
<text  x="768.80" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (667,970 us., 0.88%)</title><rect x="755.4" y="165" width="10.4" height="15.0" fill="rgb(209,119,5)" rx="2" ry="2" />
<text  x="758.41" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (482,164 us., 0.64%)</title><rect x="765.8" y="101" width="7.5" height="15.0" fill="rgb(244,193,15)" rx="2" ry="2" />
<text  x="768.80" y="111.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (21,536 us., 0.03%)</title><rect x="35.1" y="149" width="0.4" height="15.0" fill="rgb(224,204,47)" rx="2" ry="2" />
<text  x="38.12" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(90):_forward (851,424 us., 1.12%)</title><rect x="780.9" y="245" width="13.2" height="15.0" fill="rgb(229,137,0)" rx="2" ry="2" />
<text  x="783.89" y="255.5" ></text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7ff2770989c0&gt; (7,850,583 us., 10.35%)</title><rect x="794.1" y="261" width="122.2" height="15.0" fill="rgb(209,72,34)" rx="2" ry="2" />
<text  x="797.14" y="271.5" >&lt;built-in_metho..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (11,080 us., 0.01%)</title><rect x="731.9" y="133" width="0.1" height="15.0" fill="rgb(230,29,22)" rx="2" ry="2" />
<text  x="734.87" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (7,859,768 us., 10.36%)</title><rect x="35.5" y="133" width="122.2" height="15.0" fill="rgb(223,215,41)" rx="2" ry="2" />
<text  x="38.45" y="143.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (487,499 us., 0.64%)</title><rect x="773.3" y="85" width="7.6" height="15.0" fill="rgb(238,186,40)" rx="2" ry="2" />
<text  x="776.30" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (17,566,674 us., 23.16%)</title><rect x="916.7" y="229" width="273.3" height="15.0" fill="rgb(251,89,15)" rx="2" ry="2" />
<text  x="919.68" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (851,424 us., 1.12%)</title><rect x="780.9" y="197" width="13.2" height="15.0" fill="rgb(232,183,26)" rx="2" ry="2" />
<text  x="783.89" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (21,536 us., 0.03%)</title><rect x="35.1" y="165" width="0.4" height="15.0" fill="rgb(237,109,14)" rx="2" ry="2" />
<text  x="38.12" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,888,476 us., 3.81%)</title><rect x="157.7" y="133" width="45.0" height="15.0" fill="rgb(240,178,51)" rx="2" ry="2" />
<text  x="160.74" y="143.5" >nn.M..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (29,710,035 us., 39.17%)</title><rect x="269.6" y="197" width="462.3" height="15.0" fill="rgb(243,209,30)" rx="2" ry="2" />
<text  x="272.61" y="207.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (21,536 us., 0.03%)</title><rect x="35.1" y="117" width="0.4" height="15.0" fill="rgb(226,147,47)" rx="2" ry="2" />
<text  x="38.12" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (667,970 us., 0.88%)</title><rect x="755.4" y="181" width="10.4" height="15.0" fill="rgb(224,23,5)" rx="2" ry="2" />
<text  x="758.41" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (17,566,674 us., 23.16%)</title><rect x="916.7" y="197" width="273.3" height="15.0" fill="rgb(206,52,40)" rx="2" ry="2" />
<text  x="919.68" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (7,850,583 us., 10.35%)</title><rect x="794.1" y="245" width="122.2" height="15.0" fill="rgb(228,56,44)" rx="2" ry="2" />
<text  x="797.14" y="255.5" >torch_int/nn/op..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,483,399 us., 1.96%)</title><rect x="732.3" y="133" width="23.1" height="15.0" fill="rgb(241,110,2)" rx="2" ry="2" />
<text  x="735.33" y="143.5" >t..</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (1,483,399 us., 1.96%)</title><rect x="732.3" y="229" width="23.1" height="15.0" fill="rgb(219,163,46)" rx="2" ry="2" />
<text  x="735.33" y="239.5" >t..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (21,717 us., 0.03%)</title><rect x="34.8" y="133" width="0.3" height="15.0" fill="rgb(235,58,17)" rx="2" ry="2" />
<text  x="37.78" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (11,080 us., 0.01%)</title><rect x="731.9" y="197" width="0.1" height="15.0" fill="rgb(250,104,52)" rx="2" ry="2" />
<text  x="734.87" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,483,399 us., 1.96%)</title><rect x="732.3" y="149" width="23.1" height="15.0" fill="rgb(221,117,22)" rx="2" ry="2" />
<text  x="735.33" y="159.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,970,908 us., 3.92%)</title><rect x="202.7" y="133" width="46.2" height="15.0" fill="rgb(251,213,14)" rx="2" ry="2" />
<text  x="205.68" y="143.5" >torc..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (21,717 us., 0.03%)</title><rect x="34.8" y="197" width="0.3" height="15.0" fill="rgb(243,54,18)" rx="2" ry="2" />
<text  x="37.78" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (851,424 us., 1.12%)</title><rect x="780.9" y="229" width="13.2" height="15.0" fill="rgb(219,120,18)" rx="2" ry="2" />
<text  x="783.89" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (21,536 us., 0.03%)</title><rect x="35.1" y="213" width="0.4" height="15.0" fill="rgb(239,161,51)" rx="2" ry="2" />
<text  x="38.12" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7ff182b8f4b0&gt; (44,771,585 us., 59.03%)</title><rect x="35.5" y="261" width="696.5" height="15.0" fill="rgb(253,50,45)" rx="2" ry="2" />
<text  x="38.45" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7ff182b8f4b0&gt;</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (7,859,768 us., 10.36%)</title><rect x="35.5" y="165" width="122.2" height="15.0" fill="rgb(240,177,19)" rx="2" ry="2" />
<text  x="38.45" y="175.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (18,623 us., 0.02%)</title><rect x="916.4" y="261" width="0.3" height="15.0" fill="rgb(242,22,36)" rx="2" ry="2" />
<text  x="919.39" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (79,322 us., 0.10%)</title><rect x="248.9" y="213" width="1.2" height="15.0" fill="rgb(253,28,13)" rx="2" ry="2" />
<text  x="251.90" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (7,850,583 us., 10.35%)</title><rect x="794.1" y="101" width="122.2" height="15.0" fill="rgb(230,153,38)" rx="2" ry="2" />
<text  x="797.14" y="111.5" >profiling/utils..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (2,970,908 us., 3.92%)</title><rect x="202.7" y="229" width="46.2" height="15.0" fill="rgb(229,164,3)" rx="2" ry="2" />
<text  x="205.68" y="239.5" >nn.M..</text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (1,589,129 us., 2.10%)</title><rect x="10.0" y="245" width="24.7" height="15.0" fill="rgb(247,173,50)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (79,322 us., 0.10%)</title><rect x="248.9" y="245" width="1.2" height="15.0" fill="rgb(220,89,1)" rx="2" ry="2" />
<text  x="251.90" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (7,850,583 us., 10.35%)</title><rect x="794.1" y="133" width="122.2" height="15.0" fill="rgb(207,40,40)" rx="2" ry="2" />
<text  x="797.14" y="143.5" >transformers/mo..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (21,717 us., 0.03%)</title><rect x="34.8" y="165" width="0.3" height="15.0" fill="rgb(245,186,1)" rx="2" ry="2" />
<text  x="37.78" y="175.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (1,501,950 us., 1.98%)</title><rect x="732.0" y="245" width="23.4" height="15.0" fill="rgb(221,195,27)" rx="2" ry="2" />
<text  x="735.04" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (482,164 us., 0.64%)</title><rect x="765.8" y="181" width="7.5" height="15.0" fill="rgb(221,55,11)" rx="2" ry="2" />
<text  x="768.80" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (667,970 us., 0.88%)</title><rect x="755.4" y="53" width="10.4" height="15.0" fill="rgb(229,77,5)" rx="2" ry="2" />
<text  x="758.41" y="63.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (667,970 us., 0.88%)</title><rect x="755.4" y="117" width="10.4" height="15.0" fill="rgb(252,200,50)" rx="2" ry="2" />
<text  x="758.41" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (17,566,674 us., 23.16%)</title><rect x="916.7" y="117" width="273.3" height="15.0" fill="rgb(207,104,31)" rx="2" ry="2" />
<text  x="919.68" y="127.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (29,710,035 us., 39.17%)</title><rect x="269.6" y="165" width="462.3" height="15.0" fill="rgb(218,211,49)" rx="2" ry="2" />
<text  x="272.61" y="175.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (29,710,035 us., 39.17%)</title><rect x="269.6" y="101" width="462.3" height="15.0" fill="rgb(231,183,17)" rx="2" ry="2" />
<text  x="272.61" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>nn.Module:_W8A8BFP32OFP32Linear (969,663 us., 1.28%)</title><rect x="765.8" y="213" width="15.1" height="15.0" fill="rgb(214,55,50)" rx="2" ry="2" />
<text  x="768.80" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (29,710,035 us., 39.17%)</title><rect x="269.6" y="149" width="462.3" height="15.0" fill="rgb(252,26,16)" rx="2" ry="2" />
<text  x="272.61" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (487,499 us., 0.64%)</title><rect x="773.3" y="197" width="7.6" height="15.0" fill="rgb(206,195,29)" rx="2" ry="2" />
<text  x="776.30" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (2,888,476 us., 3.81%)</title><rect x="157.7" y="213" width="45.0" height="15.0" fill="rgb(240,132,17)" rx="2" ry="2" />
<text  x="160.74" y="223.5" >torc..</text>
</g>
<g >
<title>nn.Module:_Embedding (21,717 us., 0.03%)</title><rect x="34.8" y="213" width="0.3" height="15.0" fill="rgb(209,210,18)" rx="2" ry="2" />
<text  x="37.78" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (18,623 us., 0.02%)</title><rect x="916.4" y="229" width="0.3" height="15.0" fill="rgb(231,30,32)" rx="2" ry="2" />
<text  x="919.39" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,589,129 us., 2.10%)</title><rect x="10.0" y="165" width="24.7" height="15.0" fill="rgb(240,176,43)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >t..</text>
</g>
<g >
<title>all (75,841,608 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(242,113,9)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (17,566,674 us., 23.16%)</title><rect x="916.7" y="165" width="273.3" height="15.0" fill="rgb(238,111,13)" rx="2" ry="2" />
<text  x="919.68" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (482,164 us., 0.64%)</title><rect x="765.8" y="165" width="7.5" height="15.0" fill="rgb(218,194,13)" rx="2" ry="2" />
<text  x="768.80" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,888,476 us., 3.81%)</title><rect x="157.7" y="149" width="45.0" height="15.0" fill="rgb(210,176,4)" rx="2" ry="2" />
<text  x="160.74" y="159.5" >tran..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,970,908 us., 3.92%)</title><rect x="202.7" y="181" width="46.2" height="15.0" fill="rgb(211,175,29)" rx="2" ry="2" />
<text  x="205.68" y="191.5" >tran..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,970,908 us., 3.92%)</title><rect x="202.7" y="149" width="46.2" height="15.0" fill="rgb(241,131,26)" rx="2" ry="2" />
<text  x="205.68" y="159.5" >prof..</text>
</g>
</g>
</svg>
