<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7f8b0ab029c0&gt; (1,970,000 us., 8.93%)</title><rect x="869.4" y="261" width="105.4" height="15.0" fill="rgb(242,202,20)" rx="2" ry="2" />
<text  x="872.43" y="271.5" >&lt;built-in_me..</text>
</g>
<g >
<title>nn.Module:_W8A8BFP32OFP32Linear (489,877 us., 2.22%)</title><rect x="820.7" y="213" width="26.2" height="15.0" fill="rgb(247,10,36)" rx="2" ry="2" />
<text  x="823.73" y="223.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (8,150 us., 0.04%)</title><rect x="313.5" y="245" width="0.4" height="15.0" fill="rgb(236,86,32)" rx="2" ry="2" />
<text  x="316.51" y="255.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (9,452 us., 0.04%)</title><rect x="974.9" y="197" width="0.5" height="15.0" fill="rgb(224,84,19)" rx="2" ry="2" />
<text  x="977.90" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (7,718,046 us., 35.00%)</title><rect x="347.7" y="85" width="412.9" height="15.0" fill="rgb(232,94,50)" rx="2" ry="2" />
<text  x="350.67" y="95.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (10,394 us., 0.05%)</title><rect x="47.9" y="133" width="0.6" height="15.0" fill="rgb(216,41,45)" rx="2" ry="2" />
<text  x="50.94" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (10,626 us., 0.05%)</title><rect x="47.4" y="117" width="0.5" height="15.0" fill="rgb(234,81,22)" rx="2" ry="2" />
<text  x="50.38" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (248,123 us., 1.13%)</title><rect x="833.7" y="149" width="13.2" height="15.0" fill="rgb(252,219,9)" rx="2" ry="2" />
<text  x="836.66" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (760,211 us., 3.45%)</title><rect x="761.3" y="101" width="40.6" height="15.0" fill="rgb(227,44,33)" rx="2" ry="2" />
<text  x="764.27" y="111.5" >pro..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (7,718,046 us., 35.00%)</title><rect x="347.7" y="213" width="412.9" height="15.0" fill="rgb(215,151,52)" rx="2" ry="2" />
<text  x="350.67" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,477,177 us., 6.70%)</title><rect x="154.0" y="165" width="79.1" height="15.0" fill="rgb(253,14,6)" rx="2" ry="2" />
<text  x="157.04" y="175.5" >nn.Module..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (9,487 us., 0.04%)</title><rect x="760.8" y="117" width="0.5" height="15.0" fill="rgb(222,225,31)" rx="2" ry="2" />
<text  x="763.76" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (7,718,046 us., 35.00%)</title><rect x="347.7" y="101" width="412.9" height="15.0" fill="rgb(240,116,12)" rx="2" ry="2" />
<text  x="350.67" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,009,979 us., 18.18%)</title><rect x="975.4" y="133" width="214.6" height="15.0" fill="rgb(228,221,35)" rx="2" ry="2" />
<text  x="978.41" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (351,078 us., 1.59%)</title><rect x="801.9" y="37" width="18.8" height="15.0" fill="rgb(227,50,45)" rx="2" ry="2" />
<text  x="804.94" y="47.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (696,841 us., 3.16%)</title><rect x="10.0" y="261" width="37.3" height="15.0" fill="rgb(246,96,1)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;bu..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,154 us., 0.01%)</title><rect x="760.6" y="133" width="0.2" height="15.0" fill="rgb(230,202,51)" rx="2" ry="2" />
<text  x="763.64" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,503,246 us., 6.82%)</title><rect x="233.1" y="245" width="80.4" height="15.0" fill="rgb(233,56,21)" rx="2" ry="2" />
<text  x="236.08" y="255.5" >torch_int..</text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (2,154 us., 0.01%)</title><rect x="760.6" y="229" width="0.2" height="15.0" fill="rgb(235,36,45)" rx="2" ry="2" />
<text  x="763.64" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (9,487 us., 0.04%)</title><rect x="760.8" y="133" width="0.5" height="15.0" fill="rgb(222,10,40)" rx="2" ry="2" />
<text  x="763.76" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (10,394 us., 0.05%)</title><rect x="47.9" y="149" width="0.6" height="15.0" fill="rgb(245,209,38)" rx="2" ry="2" />
<text  x="50.94" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (630,224 us., 2.86%)</title><rect x="313.9" y="181" width="33.8" height="15.0" fill="rgb(209,56,27)" rx="2" ry="2" />
<text  x="316.95" y="191.5" >to..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (9,452 us., 0.04%)</title><rect x="974.9" y="261" width="0.5" height="15.0" fill="rgb(246,186,54)" rx="2" ry="2" />
<text  x="977.90" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (241,754 us., 1.10%)</title><rect x="820.7" y="165" width="13.0" height="15.0" fill="rgb(239,134,29)" rx="2" ry="2" />
<text  x="823.73" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (7,718,046 us., 35.00%)</title><rect x="347.7" y="181" width="412.9" height="15.0" fill="rgb(227,18,20)" rx="2" ry="2" />
<text  x="350.67" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (248,123 us., 1.13%)</title><rect x="833.7" y="117" width="13.2" height="15.0" fill="rgb(239,89,33)" rx="2" ry="2" />
<text  x="836.66" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,970,000 us., 8.93%)</title><rect x="869.4" y="165" width="105.4" height="15.0" fill="rgb(215,62,38)" rx="2" ry="2" />
<text  x="872.43" y="175.5" >torch_int/nn..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (10,626 us., 0.05%)</title><rect x="47.4" y="133" width="0.5" height="15.0" fill="rgb(235,28,32)" rx="2" ry="2" />
<text  x="50.38" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (7,718,046 us., 35.00%)</title><rect x="347.7" y="197" width="412.9" height="15.0" fill="rgb(228,220,30)" rx="2" ry="2" />
<text  x="350.67" y="207.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,970,000 us., 8.93%)</title><rect x="869.4" y="197" width="105.4" height="15.0" fill="rgb(222,124,18)" rx="2" ry="2" />
<text  x="872.43" y="207.5" >torch_int/nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (9,452 us., 0.04%)</title><rect x="974.9" y="245" width="0.5" height="15.0" fill="rgb(250,169,27)" rx="2" ry="2" />
<text  x="977.90" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (7,718,046 us., 35.00%)</title><rect x="347.7" y="245" width="412.9" height="15.0" fill="rgb(239,218,51)" rx="2" ry="2" />
<text  x="350.67" y="255.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,970,000 us., 8.93%)</title><rect x="869.4" y="85" width="105.4" height="15.0" fill="rgb(221,157,27)" rx="2" ry="2" />
<text  x="872.43" y="95.5" >torch/autogr..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,009,979 us., 18.18%)</title><rect x="975.4" y="165" width="214.6" height="15.0" fill="rgb(235,150,1)" rx="2" ry="2" />
<text  x="978.41" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,477,177 us., 6.70%)</title><rect x="154.0" y="149" width="79.1" height="15.0" fill="rgb(251,93,46)" rx="2" ry="2" />
<text  x="157.04" y="159.5" >transform..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,972,448 us., 8.94%)</title><rect x="48.5" y="181" width="105.5" height="15.0" fill="rgb(243,10,12)" rx="2" ry="2" />
<text  x="51.50" y="191.5" >torch_int/nn..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (8,150 us., 0.04%)</title><rect x="313.5" y="165" width="0.4" height="15.0" fill="rgb(205,24,28)" rx="2" ry="2" />
<text  x="316.51" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (696,841 us., 3.16%)</title><rect x="10.0" y="165" width="37.3" height="15.0" fill="rgb(225,229,50)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >tor..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (420,392 us., 1.91%)</title><rect x="846.9" y="197" width="22.5" height="15.0" fill="rgb(233,4,21)" rx="2" ry="2" />
<text  x="849.94" y="207.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (696,841 us., 3.16%)</title><rect x="10.0" y="197" width="37.3" height="15.0" fill="rgb(211,164,9)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >nn...</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,503,246 us., 6.82%)</title><rect x="233.1" y="181" width="80.4" height="15.0" fill="rgb(244,32,42)" rx="2" ry="2" />
<text  x="236.08" y="191.5" >transform..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (248,123 us., 1.13%)</title><rect x="833.7" y="133" width="13.2" height="15.0" fill="rgb(212,115,38)" rx="2" ry="2" />
<text  x="836.66" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(90):_forward (420,392 us., 1.91%)</title><rect x="846.9" y="245" width="22.5" height="15.0" fill="rgb(247,192,27)" rx="2" ry="2" />
<text  x="849.94" y="255.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (7,718,046 us., 35.00%)</title><rect x="347.7" y="165" width="412.9" height="15.0" fill="rgb(238,81,24)" rx="2" ry="2" />
<text  x="350.67" y="175.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (760,211 us., 3.45%)</title><rect x="761.3" y="165" width="40.6" height="15.0" fill="rgb(237,110,35)" rx="2" ry="2" />
<text  x="764.27" y="175.5" >tor..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,477,177 us., 6.70%)</title><rect x="154.0" y="213" width="79.1" height="15.0" fill="rgb(229,25,19)" rx="2" ry="2" />
<text  x="157.04" y="223.5" >torch_int..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (8,150 us., 0.04%)</title><rect x="313.5" y="181" width="0.4" height="15.0" fill="rgb(219,167,23)" rx="2" ry="2" />
<text  x="316.51" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (760,211 us., 3.45%)</title><rect x="761.3" y="133" width="40.6" height="15.0" fill="rgb(236,150,12)" rx="2" ry="2" />
<text  x="764.27" y="143.5" >tra..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,009,979 us., 18.18%)</title><rect x="975.4" y="117" width="214.6" height="15.0" fill="rgb(229,47,36)" rx="2" ry="2" />
<text  x="978.41" y="127.5" >profiling/utils.py(18):_prof..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (696,841 us., 3.16%)</title><rect x="10.0" y="213" width="37.3" height="15.0" fill="rgb(248,5,15)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >tra..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (351,078 us., 1.59%)</title><rect x="801.9" y="117" width="18.8" height="15.0" fill="rgb(222,2,29)" rx="2" ry="2" />
<text  x="804.94" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,970,000 us., 8.93%)</title><rect x="869.4" y="229" width="105.4" height="15.0" fill="rgb(212,21,41)" rx="2" ry="2" />
<text  x="872.43" y="239.5" >torch/autogr..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (4,009,979 us., 18.18%)</title><rect x="975.4" y="181" width="214.6" height="15.0" fill="rgb(239,211,22)" rx="2" ry="2" />
<text  x="978.41" y="191.5" >torch_int/nn/opt.py(346):_fo..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,477,177 us., 6.70%)</title><rect x="154.0" y="133" width="79.1" height="15.0" fill="rgb(216,61,22)" rx="2" ry="2" />
<text  x="157.04" y="143.5" >nn.Module..</text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (696,841 us., 3.16%)</title><rect x="10.0" y="245" width="37.3" height="15.0" fill="rgb(240,122,8)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >tor..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (7,718,046 us., 35.00%)</title><rect x="347.7" y="229" width="412.9" height="15.0" fill="rgb(228,25,54)" rx="2" ry="2" />
<text  x="350.67" y="239.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,503,246 us., 6.82%)</title><rect x="233.1" y="165" width="80.4" height="15.0" fill="rgb(221,54,54)" rx="2" ry="2" />
<text  x="236.08" y="175.5" >nn.Module..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (241,754 us., 1.10%)</title><rect x="820.7" y="85" width="13.0" height="15.0" fill="rgb(241,35,20)" rx="2" ry="2" />
<text  x="823.73" y="95.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (21,020 us., 0.10%)</title><rect x="47.4" y="245" width="1.1" height="15.0" fill="rgb(254,151,33)" rx="2" ry="2" />
<text  x="50.38" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (4,009,979 us., 18.18%)</title><rect x="975.4" y="261" width="214.6" height="15.0" fill="rgb(213,84,38)" rx="2" ry="2" />
<text  x="978.41" y="271.5" >torch_int/nn/opt.py(72):_for..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,970,000 us., 8.93%)</title><rect x="869.4" y="213" width="105.4" height="15.0" fill="rgb(253,35,5)" rx="2" ry="2" />
<text  x="872.43" y="223.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (4,009,979 us., 18.18%)</title><rect x="975.4" y="213" width="214.6" height="15.0" fill="rgb(246,168,41)" rx="2" ry="2" />
<text  x="978.41" y="223.5" >torch_int/nn/opt.py(213):_fo..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (9,452 us., 0.04%)</title><rect x="974.9" y="229" width="0.5" height="15.0" fill="rgb(254,184,43)" rx="2" ry="2" />
<text  x="977.90" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (10,394 us., 0.05%)</title><rect x="47.9" y="117" width="0.6" height="15.0" fill="rgb(207,29,8)" rx="2" ry="2" />
<text  x="50.94" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (248,123 us., 1.13%)</title><rect x="833.7" y="53" width="13.2" height="15.0" fill="rgb(221,120,11)" rx="2" ry="2" />
<text  x="836.66" y="63.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (420,392 us., 1.91%)</title><rect x="846.9" y="101" width="22.5" height="15.0" fill="rgb(238,44,30)" rx="2" ry="2" />
<text  x="849.94" y="111.5" >p..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (9,452 us., 0.04%)</title><rect x="974.9" y="181" width="0.5" height="15.0" fill="rgb(205,169,48)" rx="2" ry="2" />
<text  x="977.90" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (420,392 us., 1.91%)</title><rect x="846.9" y="85" width="22.5" height="15.0" fill="rgb(253,72,21)" rx="2" ry="2" />
<text  x="849.94" y="95.5" >t..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (10,394 us., 0.05%)</title><rect x="47.9" y="197" width="0.6" height="15.0" fill="rgb(228,212,9)" rx="2" ry="2" />
<text  x="50.94" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (9,487 us., 0.04%)</title><rect x="760.8" y="149" width="0.5" height="15.0" fill="rgb(226,112,16)" rx="2" ry="2" />
<text  x="763.76" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNorm (9,487 us., 0.04%)</title><rect x="760.8" y="213" width="0.5" height="15.0" fill="rgb(254,225,43)" rx="2" ry="2" />
<text  x="763.76" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (8,150 us., 0.04%)</title><rect x="313.5" y="213" width="0.4" height="15.0" fill="rgb(250,36,34)" rx="2" ry="2" />
<text  x="316.51" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,970,000 us., 8.93%)</title><rect x="869.4" y="149" width="105.4" height="15.0" fill="rgb(240,12,32)" rx="2" ry="2" />
<text  x="872.43" y="159.5" >nn.Module:_I..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,503,246 us., 6.82%)</title><rect x="233.1" y="197" width="80.4" height="15.0" fill="rgb(239,55,46)" rx="2" ry="2" />
<text  x="236.08" y="207.5" >nn.Module..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (630,224 us., 2.86%)</title><rect x="313.9" y="165" width="33.8" height="15.0" fill="rgb(208,165,19)" rx="2" ry="2" />
<text  x="316.95" y="175.5" >nn..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (1,972,448 us., 8.94%)</title><rect x="48.5" y="229" width="105.5" height="15.0" fill="rgb(254,50,39)" rx="2" ry="2" />
<text  x="51.50" y="239.5" >torch_int/nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (351,078 us., 1.59%)</title><rect x="801.9" y="165" width="18.8" height="15.0" fill="rgb(251,212,53)" rx="2" ry="2" />
<text  x="804.94" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,477,177 us., 6.70%)</title><rect x="154.0" y="101" width="79.1" height="15.0" fill="rgb(224,63,29)" rx="2" ry="2" />
<text  x="157.04" y="111.5" >torch/aut..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (2,154 us., 0.01%)</title><rect x="760.6" y="213" width="0.2" height="15.0" fill="rgb(233,189,1)" rx="2" ry="2" />
<text  x="763.64" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (351,078 us., 1.59%)</title><rect x="801.9" y="149" width="18.8" height="15.0" fill="rgb(217,164,37)" rx="2" ry="2" />
<text  x="804.94" y="159.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_bfp32_ofp32_of_PyCapsule_object_at_0x7f8a15f9c7b0&gt; (489,877 us., 2.22%)</title><rect x="820.7" y="261" width="26.2" height="15.0" fill="rgb(238,105,21)" rx="2" ry="2" />
<text  x="823.73" y="271.5" >&lt;..</text>
</g>
<g >
<title>nn.Module:_Linear (696,841 us., 3.16%)</title><rect x="10.0" y="229" width="37.3" height="15.0" fill="rgb(234,69,45)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >nn...</text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7f8a165fa4b0&gt; (13,311,747 us., 60.36%)</title><rect x="48.5" y="261" width="712.3" height="15.0" fill="rgb(239,224,20)" rx="2" ry="2" />
<text  x="51.50" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7f8a165fa4b0&gt;</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (760,211 us., 3.45%)</title><rect x="761.3" y="229" width="40.6" height="15.0" fill="rgb(239,48,25)" rx="2" ry="2" />
<text  x="764.27" y="239.5" >tor..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,154 us., 0.01%)</title><rect x="760.6" y="165" width="0.2" height="15.0" fill="rgb(247,35,51)" rx="2" ry="2" />
<text  x="763.64" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (241,754 us., 1.10%)</title><rect x="820.7" y="133" width="13.0" height="15.0" fill="rgb(225,17,21)" rx="2" ry="2" />
<text  x="823.73" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,972,448 us., 8.94%)</title><rect x="48.5" y="133" width="105.5" height="15.0" fill="rgb(239,29,12)" rx="2" ry="2" />
<text  x="51.50" y="143.5" >nn.Module:_I..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (760,211 us., 3.45%)</title><rect x="761.3" y="117" width="40.6" height="15.0" fill="rgb(219,78,19)" rx="2" ry="2" />
<text  x="764.27" y="127.5" >nn...</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,972,448 us., 8.94%)</title><rect x="48.5" y="197" width="105.5" height="15.0" fill="rgb(218,62,0)" rx="2" ry="2" />
<text  x="51.50" y="207.5" >nn.Module:_I..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (351,078 us., 1.59%)</title><rect x="801.9" y="85" width="18.8" height="15.0" fill="rgb(206,202,19)" rx="2" ry="2" />
<text  x="804.94" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,972,448 us., 8.94%)</title><rect x="48.5" y="101" width="105.5" height="15.0" fill="rgb(205,200,7)" rx="2" ry="2" />
<text  x="51.50" y="111.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (9,487 us., 0.04%)</title><rect x="760.8" y="229" width="0.5" height="15.0" fill="rgb(219,184,19)" rx="2" ry="2" />
<text  x="763.76" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (241,754 us., 1.10%)</title><rect x="820.7" y="197" width="13.0" height="15.0" fill="rgb(206,169,1)" rx="2" ry="2" />
<text  x="823.73" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (248,123 us., 1.13%)</title><rect x="833.7" y="37" width="13.2" height="15.0" fill="rgb(214,96,3)" rx="2" ry="2" />
<text  x="836.66" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,477,177 us., 6.70%)</title><rect x="154.0" y="197" width="79.1" height="15.0" fill="rgb(230,88,24)" rx="2" ry="2" />
<text  x="157.04" y="207.5" >nn.Module..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (630,224 us., 2.86%)</title><rect x="313.9" y="133" width="33.8" height="15.0" fill="rgb(225,219,43)" rx="2" ry="2" />
<text  x="316.95" y="143.5" >nn..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (630,224 us., 2.86%)</title><rect x="313.9" y="149" width="33.8" height="15.0" fill="rgb(221,75,41)" rx="2" ry="2" />
<text  x="316.95" y="159.5" >to..</text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (1,972,448 us., 8.94%)</title><rect x="48.5" y="245" width="105.5" height="15.0" fill="rgb(246,55,5)" rx="2" ry="2" />
<text  x="51.50" y="255.5" >torch/nn/fun..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (2,154 us., 0.01%)</title><rect x="760.6" y="245" width="0.2" height="15.0" fill="rgb(222,104,27)" rx="2" ry="2" />
<text  x="763.64" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (10,626 us., 0.05%)</title><rect x="47.4" y="197" width="0.5" height="15.0" fill="rgb(237,16,1)" rx="2" ry="2" />
<text  x="50.38" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (9,487 us., 0.04%)</title><rect x="760.8" y="181" width="0.5" height="15.0" fill="rgb(234,79,48)" rx="2" ry="2" />
<text  x="763.76" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (760,211 us., 3.45%)</title><rect x="761.3" y="85" width="40.6" height="15.0" fill="rgb(222,228,23)" rx="2" ry="2" />
<text  x="764.27" y="95.5" >tor..</text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7f8b0ab029c0&gt; (769,698 us., 3.49%)</title><rect x="760.8" y="261" width="41.1" height="15.0" fill="rgb(232,171,15)" rx="2" ry="2" />
<text  x="763.76" y="271.5" >&lt;bu..</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f8a15f9c810&gt; (351,078 us., 1.59%)</title><rect x="801.9" y="261" width="18.8" height="15.0" fill="rgb(250,55,43)" rx="2" ry="2" />
<text  x="804.94" y="271.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (248,123 us., 1.13%)</title><rect x="833.7" y="85" width="13.2" height="15.0" fill="rgb(237,17,45)" rx="2" ry="2" />
<text  x="836.66" y="95.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (420,392 us., 1.91%)</title><rect x="846.9" y="133" width="22.5" height="15.0" fill="rgb(241,163,4)" rx="2" ry="2" />
<text  x="849.94" y="143.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,154 us., 0.01%)</title><rect x="760.6" y="197" width="0.2" height="15.0" fill="rgb(253,60,35)" rx="2" ry="2" />
<text  x="763.64" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (248,123 us., 1.13%)</title><rect x="833.7" y="101" width="13.2" height="15.0" fill="rgb(225,136,3)" rx="2" ry="2" />
<text  x="836.66" y="111.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,154 us., 0.01%)</title><rect x="760.6" y="149" width="0.2" height="15.0" fill="rgb(253,72,11)" rx="2" ry="2" />
<text  x="763.64" y="159.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (769,698 us., 3.49%)</title><rect x="760.8" y="245" width="41.1" height="15.0" fill="rgb(244,97,4)" rx="2" ry="2" />
<text  x="763.76" y="255.5" >tor..</text>
</g>
<g >
<title>nn.Module:_LayerNormQ (1,477,177 us., 6.70%)</title><rect x="154.0" y="229" width="79.1" height="15.0" fill="rgb(253,109,35)" rx="2" ry="2" />
<text  x="157.04" y="239.5" >nn.Module..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (8,150 us., 0.04%)</title><rect x="313.5" y="229" width="0.4" height="15.0" fill="rgb(234,58,0)" rx="2" ry="2" />
<text  x="316.51" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (7,718,046 us., 35.00%)</title><rect x="347.7" y="149" width="412.9" height="15.0" fill="rgb(236,128,53)" rx="2" ry="2" />
<text  x="350.67" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (8,150 us., 0.04%)</title><rect x="313.5" y="197" width="0.4" height="15.0" fill="rgb(217,229,43)" rx="2" ry="2" />
<text  x="316.51" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (630,224 us., 2.86%)</title><rect x="313.9" y="197" width="33.8" height="15.0" fill="rgb(215,23,45)" rx="2" ry="2" />
<text  x="316.95" y="207.5" >nn..</text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (21,020 us., 0.10%)</title><rect x="47.4" y="229" width="1.1" height="15.0" fill="rgb(210,133,17)" rx="2" ry="2" />
<text  x="50.38" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(69):__shape (630,224 us., 2.86%)</title><rect x="313.9" y="245" width="33.8" height="15.0" fill="rgb(237,43,4)" rx="2" ry="2" />
<text  x="316.95" y="255.5" >to..</text>
</g>
<g >
<title>nn.Module:_Embedding (10,626 us., 0.05%)</title><rect x="47.4" y="213" width="0.5" height="15.0" fill="rgb(233,49,39)" rx="2" ry="2" />
<text  x="50.38" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (351,078 us., 1.59%)</title><rect x="801.9" y="69" width="18.8" height="15.0" fill="rgb(228,201,25)" rx="2" ry="2" />
<text  x="804.94" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (248,123 us., 1.13%)</title><rect x="833.7" y="69" width="13.2" height="15.0" fill="rgb(248,124,34)" rx="2" ry="2" />
<text  x="836.66" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,972,448 us., 8.94%)</title><rect x="48.5" y="149" width="105.5" height="15.0" fill="rgb(226,79,20)" rx="2" ry="2" />
<text  x="51.50" y="159.5" >torch_int/nn..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (489,877 us., 2.22%)</title><rect x="820.7" y="229" width="26.2" height="15.0" fill="rgb(218,183,27)" rx="2" ry="2" />
<text  x="823.73" y="239.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (10,626 us., 0.05%)</title><rect x="47.4" y="165" width="0.5" height="15.0" fill="rgb(251,55,20)" rx="2" ry="2" />
<text  x="50.38" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,503,246 us., 6.82%)</title><rect x="233.1" y="229" width="80.4" height="15.0" fill="rgb(235,153,17)" rx="2" ry="2" />
<text  x="236.08" y="239.5" >nn.Module..</text>
</g>
<g >
<title>all (22,053,550 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(250,126,14)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (760,211 us., 3.45%)</title><rect x="761.3" y="181" width="40.6" height="15.0" fill="rgb(219,138,45)" rx="2" ry="2" />
<text  x="764.27" y="191.5" >nn...</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,970,000 us., 8.93%)</title><rect x="869.4" y="133" width="105.4" height="15.0" fill="rgb(223,115,15)" rx="2" ry="2" />
<text  x="872.43" y="143.5" >transformers..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (10,626 us., 0.05%)</title><rect x="47.4" y="181" width="0.5" height="15.0" fill="rgb(219,93,13)" rx="2" ry="2" />
<text  x="50.38" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNormQ (760,211 us., 3.45%)</title><rect x="761.3" y="213" width="40.6" height="15.0" fill="rgb(245,14,24)" rx="2" ry="2" />
<text  x="764.27" y="223.5" >nn...</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (696,841 us., 3.16%)</title><rect x="10.0" y="181" width="37.3" height="15.0" fill="rgb(230,204,51)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >pro..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (420,392 us., 1.91%)</title><rect x="846.9" y="149" width="22.5" height="15.0" fill="rgb(223,124,8)" rx="2" ry="2" />
<text  x="849.94" y="159.5" >n..</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (1,477,177 us., 6.70%)</title><rect x="154.0" y="245" width="79.1" height="15.0" fill="rgb(238,181,52)" rx="2" ry="2" />
<text  x="157.04" y="255.5" >torch_int..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (420,392 us., 1.91%)</title><rect x="846.9" y="181" width="22.5" height="15.0" fill="rgb(209,64,53)" rx="2" ry="2" />
<text  x="849.94" y="191.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (241,754 us., 1.10%)</title><rect x="820.7" y="117" width="13.0" height="15.0" fill="rgb(225,53,41)" rx="2" ry="2" />
<text  x="823.73" y="127.5" ></text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7f8b0ab029c0&gt; (21,020 us., 0.10%)</title><rect x="47.4" y="261" width="1.1" height="15.0" fill="rgb(237,39,36)" rx="2" ry="2" />
<text  x="50.38" y="271.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,972,448 us., 8.94%)</title><rect x="48.5" y="117" width="105.5" height="15.0" fill="rgb(220,168,16)" rx="2" ry="2" />
<text  x="51.50" y="127.5" >transformers..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (630,224 us., 2.86%)</title><rect x="313.9" y="117" width="33.8" height="15.0" fill="rgb(226,10,30)" rx="2" ry="2" />
<text  x="316.95" y="127.5" >tr..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (10,394 us., 0.05%)</title><rect x="47.9" y="165" width="0.6" height="15.0" fill="rgb(244,56,22)" rx="2" ry="2" />
<text  x="50.94" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (9,487 us., 0.04%)</title><rect x="760.8" y="165" width="0.5" height="15.0" fill="rgb(243,201,39)" rx="2" ry="2" />
<text  x="763.76" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (9,452 us., 0.04%)</title><rect x="974.9" y="213" width="0.5" height="15.0" fill="rgb(222,60,21)" rx="2" ry="2" />
<text  x="977.90" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (351,078 us., 1.59%)</title><rect x="801.9" y="181" width="18.8" height="15.0" fill="rgb(234,224,18)" rx="2" ry="2" />
<text  x="804.94" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(225):_forward (489,877 us., 2.22%)</title><rect x="820.7" y="245" width="26.2" height="15.0" fill="rgb(205,145,20)" rx="2" ry="2" />
<text  x="823.73" y="255.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,972,448 us., 8.94%)</title><rect x="48.5" y="69" width="105.5" height="15.0" fill="rgb(211,0,9)" rx="2" ry="2" />
<text  x="51.50" y="79.5" >torch/autogr..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (351,078 us., 1.59%)</title><rect x="801.9" y="133" width="18.8" height="15.0" fill="rgb(239,165,18)" rx="2" ry="2" />
<text  x="804.94" y="143.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,503,246 us., 6.82%)</title><rect x="233.1" y="149" width="80.4" height="15.0" fill="rgb(239,141,40)" rx="2" ry="2" />
<text  x="236.08" y="159.5" >profiling..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (760,211 us., 3.45%)</title><rect x="761.3" y="149" width="40.6" height="15.0" fill="rgb(210,211,32)" rx="2" ry="2" />
<text  x="764.27" y="159.5" >nn...</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,970,000 us., 8.93%)</title><rect x="869.4" y="117" width="105.4" height="15.0" fill="rgb(248,214,39)" rx="2" ry="2" />
<text  x="872.43" y="127.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch_int/nn/linear.py(40):_forward (351,078 us., 1.59%)</title><rect x="801.9" y="245" width="18.8" height="15.0" fill="rgb(244,207,23)" rx="2" ry="2" />
<text  x="804.94" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (4,009,979 us., 18.18%)</title><rect x="975.4" y="229" width="214.6" height="15.0" fill="rgb(236,175,45)" rx="2" ry="2" />
<text  x="978.41" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (241,754 us., 1.10%)</title><rect x="820.7" y="181" width="13.0" height="15.0" fill="rgb(223,180,33)" rx="2" ry="2" />
<text  x="823.73" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (351,078 us., 1.59%)</title><rect x="801.9" y="197" width="18.8" height="15.0" fill="rgb(240,98,9)" rx="2" ry="2" />
<text  x="804.94" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,477,177 us., 6.70%)</title><rect x="154.0" y="117" width="79.1" height="15.0" fill="rgb(212,109,29)" rx="2" ry="2" />
<text  x="157.04" y="127.5" >profiling..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (630,224 us., 2.86%)</title><rect x="313.9" y="69" width="33.8" height="15.0" fill="rgb(233,149,9)" rx="2" ry="2" />
<text  x="316.95" y="79.5" >to..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (630,224 us., 2.86%)</title><rect x="313.9" y="85" width="33.8" height="15.0" fill="rgb(241,213,29)" rx="2" ry="2" />
<text  x="316.95" y="95.5" >pr..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (630,224 us., 2.86%)</title><rect x="313.9" y="229" width="33.8" height="15.0" fill="rgb(215,87,7)" rx="2" ry="2" />
<text  x="316.95" y="239.5" >to..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (10,626 us., 0.05%)</title><rect x="47.4" y="149" width="0.5" height="15.0" fill="rgb(242,88,32)" rx="2" ry="2" />
<text  x="50.38" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (248,123 us., 1.13%)</title><rect x="833.7" y="181" width="13.2" height="15.0" fill="rgb(223,219,43)" rx="2" ry="2" />
<text  x="836.66" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (351,078 us., 1.59%)</title><rect x="801.9" y="213" width="18.8" height="15.0" fill="rgb(216,36,42)" rx="2" ry="2" />
<text  x="804.94" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (7,718,046 us., 35.00%)</title><rect x="347.7" y="133" width="412.9" height="15.0" fill="rgb(205,178,37)" rx="2" ry="2" />
<text  x="350.67" y="143.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,009,979 us., 18.18%)</title><rect x="975.4" y="149" width="214.6" height="15.0" fill="rgb(249,208,0)" rx="2" ry="2" />
<text  x="978.41" y="159.5" >transformers/models/opt/mode..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (420,392 us., 1.91%)</title><rect x="846.9" y="229" width="22.5" height="15.0" fill="rgb(210,135,52)" rx="2" ry="2" />
<text  x="849.94" y="239.5" >t..</text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f8a15f9c750&gt; (420,392 us., 1.91%)</title><rect x="846.9" y="261" width="22.5" height="15.0" fill="rgb(205,174,25)" rx="2" ry="2" />
<text  x="849.94" y="271.5" >&lt;..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,972,448 us., 8.94%)</title><rect x="48.5" y="213" width="105.5" height="15.0" fill="rgb(230,29,41)" rx="2" ry="2" />
<text  x="51.50" y="223.5" >torch/autogr..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (630,224 us., 2.86%)</title><rect x="313.9" y="213" width="33.8" height="15.0" fill="rgb(218,91,43)" rx="2" ry="2" />
<text  x="316.95" y="223.5" >to..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (10,394 us., 0.05%)</title><rect x="47.9" y="101" width="0.6" height="15.0" fill="rgb(231,219,6)" rx="2" ry="2" />
<text  x="50.94" y="111.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (241,754 us., 1.10%)</title><rect x="820.7" y="101" width="13.0" height="15.0" fill="rgb(239,109,26)" rx="2" ry="2" />
<text  x="823.73" y="111.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,972,448 us., 8.94%)</title><rect x="48.5" y="85" width="105.5" height="15.0" fill="rgb(229,126,33)" rx="2" ry="2" />
<text  x="51.50" y="95.5" >profiling/ut..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,154 us., 0.01%)</title><rect x="760.6" y="181" width="0.2" height="15.0" fill="rgb(218,184,42)" rx="2" ry="2" />
<text  x="763.64" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,477,177 us., 6.70%)</title><rect x="154.0" y="181" width="79.1" height="15.0" fill="rgb(235,149,53)" rx="2" ry="2" />
<text  x="157.04" y="191.5" >torch_int..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (420,392 us., 1.91%)</title><rect x="846.9" y="213" width="22.5" height="15.0" fill="rgb(214,201,41)" rx="2" ry="2" />
<text  x="849.94" y="223.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (10,394 us., 0.05%)</title><rect x="47.9" y="181" width="0.6" height="15.0" fill="rgb(245,7,18)" rx="2" ry="2" />
<text  x="50.94" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,970,000 us., 8.93%)</title><rect x="869.4" y="181" width="105.4" height="15.0" fill="rgb(217,54,45)" rx="2" ry="2" />
<text  x="872.43" y="191.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,009,979 us., 18.18%)</title><rect x="975.4" y="101" width="214.6" height="15.0" fill="rgb(253,75,37)" rx="2" ry="2" />
<text  x="978.41" y="111.5" >torch/autograd/grad_mode.py(..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (241,754 us., 1.10%)</title><rect x="820.7" y="149" width="13.0" height="15.0" fill="rgb(227,70,37)" rx="2" ry="2" />
<text  x="823.73" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (8,150 us., 0.04%)</title><rect x="313.5" y="149" width="0.4" height="15.0" fill="rgb(246,72,47)" rx="2" ry="2" />
<text  x="316.51" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (7,718,046 us., 35.00%)</title><rect x="347.7" y="117" width="412.9" height="15.0" fill="rgb(243,221,36)" rx="2" ry="2" />
<text  x="350.67" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (1,970,000 us., 8.93%)</title><rect x="869.4" y="245" width="105.4" height="15.0" fill="rgb(248,190,50)" rx="2" ry="2" />
<text  x="872.43" y="255.5" >torch_int/nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (248,123 us., 1.13%)</title><rect x="833.7" y="165" width="13.2" height="15.0" fill="rgb(236,5,34)" rx="2" ry="2" />
<text  x="836.66" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (351,078 us., 1.59%)</title><rect x="801.9" y="229" width="18.8" height="15.0" fill="rgb(217,77,34)" rx="2" ry="2" />
<text  x="804.94" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (630,224 us., 2.86%)</title><rect x="313.9" y="101" width="33.8" height="15.0" fill="rgb(230,115,32)" rx="2" ry="2" />
<text  x="316.95" y="111.5" >nn..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,503,246 us., 6.82%)</title><rect x="233.1" y="133" width="80.4" height="15.0" fill="rgb(251,94,51)" rx="2" ry="2" />
<text  x="236.08" y="143.5" >torch/aut..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (4,009,979 us., 18.18%)</title><rect x="975.4" y="197" width="214.6" height="15.0" fill="rgb(217,221,32)" rx="2" ry="2" />
<text  x="978.41" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,970,000 us., 8.93%)</title><rect x="869.4" y="101" width="105.4" height="15.0" fill="rgb(215,101,49)" rx="2" ry="2" />
<text  x="872.43" y="111.5" >profiling/ut..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (420,392 us., 1.91%)</title><rect x="846.9" y="117" width="22.5" height="15.0" fill="rgb(226,139,18)" rx="2" ry="2" />
<text  x="849.94" y="127.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (4,009,979 us., 18.18%)</title><rect x="975.4" y="245" width="214.6" height="15.0" fill="rgb(245,112,1)" rx="2" ry="2" />
<text  x="978.41" y="255.5" >torch/autograd/grad_mode.py(..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (420,392 us., 1.91%)</title><rect x="846.9" y="165" width="22.5" height="15.0" fill="rgb(208,51,50)" rx="2" ry="2" />
<text  x="849.94" y="175.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (760,211 us., 3.45%)</title><rect x="761.3" y="197" width="40.6" height="15.0" fill="rgb(251,108,17)" rx="2" ry="2" />
<text  x="764.27" y="207.5" >tor..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (248,123 us., 1.13%)</title><rect x="833.7" y="197" width="13.2" height="15.0" fill="rgb(234,103,41)" rx="2" ry="2" />
<text  x="836.66" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,503,246 us., 6.82%)</title><rect x="233.1" y="213" width="80.4" height="15.0" fill="rgb(220,192,38)" rx="2" ry="2" />
<text  x="236.08" y="223.5" >torch_int..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (10,394 us., 0.05%)</title><rect x="47.9" y="213" width="0.6" height="15.0" fill="rgb(221,18,45)" rx="2" ry="2" />
<text  x="50.94" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (351,078 us., 1.59%)</title><rect x="801.9" y="53" width="18.8" height="15.0" fill="rgb(233,150,0)" rx="2" ry="2" />
<text  x="804.94" y="63.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (9,487 us., 0.04%)</title><rect x="760.8" y="197" width="0.5" height="15.0" fill="rgb(245,162,40)" rx="2" ry="2" />
<text  x="763.76" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,972,448 us., 8.94%)</title><rect x="48.5" y="165" width="105.5" height="15.0" fill="rgb(216,112,23)" rx="2" ry="2" />
<text  x="51.50" y="175.5" >nn.Module:_I..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (351,078 us., 1.59%)</title><rect x="801.9" y="101" width="18.8" height="15.0" fill="rgb(245,206,1)" rx="2" ry="2" />
<text  x="804.94" y="111.5" ></text>
</g>
</g>
</svg>
