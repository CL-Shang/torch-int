<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (33,400 us., 0.09%)</title><rect x="247.6" y="245" width="1.1" height="15.0" fill="rgb(254,156,42)" rx="2" ry="2" />
<text  x="250.64" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (762,017 us., 2.01%)</title><rect x="730.8" y="197" width="23.7" height="15.0" fill="rgb(206,102,22)" rx="2" ry="2" />
<text  x="733.78" y="207.5" >t..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (9,525 us., 0.03%)</title><rect x="730.5" y="133" width="0.3" height="15.0" fill="rgb(210,109,4)" rx="2" ry="2" />
<text  x="733.48" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (241,620 us., 0.64%)</title><rect x="765.4" y="85" width="7.5" height="15.0" fill="rgb(228,37,21)" rx="2" ry="2" />
<text  x="768.35" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (10,643 us., 0.03%)</title><rect x="31.8" y="181" width="0.4" height="15.0" fill="rgb(249,144,38)" rx="2" ry="2" />
<text  x="34.84" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (762,017 us., 2.01%)</title><rect x="730.8" y="85" width="23.7" height="15.0" fill="rgb(244,134,39)" rx="2" ry="2" />
<text  x="733.78" y="95.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (14,852,607 us., 39.14%)</title><rect x="268.5" y="133" width="461.8" height="15.0" fill="rgb(252,147,50)" rx="2" ry="2" />
<text  x="271.51" y="143.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (8,805,508 us., 23.20%)</title><rect x="916.2" y="245" width="273.8" height="15.0" fill="rgb(241,16,47)" rx="2" ry="2" />
<text  x="919.19" y="255.5" >torch/autograd/grad_mode.py(24):_dec..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (33,400 us., 0.09%)</title><rect x="247.6" y="213" width="1.1" height="15.0" fill="rgb(244,158,29)" rx="2" ry="2" />
<text  x="250.64" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (699,324 us., 1.84%)</title><rect x="10.0" y="213" width="21.7" height="15.0" fill="rgb(218,96,47)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (248,069 us., 0.65%)</title><rect x="772.9" y="69" width="7.7" height="15.0" fill="rgb(220,184,33)" rx="2" ry="2" />
<text  x="775.87" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (241,620 us., 0.64%)</title><rect x="765.4" y="117" width="7.5" height="15.0" fill="rgb(242,217,47)" rx="2" ry="2" />
<text  x="768.35" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (3,939,060 us., 10.38%)</title><rect x="32.5" y="181" width="122.5" height="15.0" fill="rgb(214,165,29)" rx="2" ry="2" />
<text  x="35.50" y="191.5" >torch_int/nn/op..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (637,805 us., 1.68%)</title><rect x="248.7" y="101" width="19.8" height="15.0" fill="rgb(210,167,7)" rx="2" ry="2" />
<text  x="251.68" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (14,852,607 us., 39.14%)</title><rect x="268.5" y="85" width="461.8" height="15.0" fill="rgb(248,72,36)" rx="2" ry="2" />
<text  x="271.51" y="95.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (241,620 us., 0.64%)</title><rect x="765.4" y="197" width="7.5" height="15.0" fill="rgb(228,192,2)" rx="2" ry="2" />
<text  x="768.35" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (3,928,987 us., 10.35%)</title><rect x="793.7" y="197" width="122.1" height="15.0" fill="rgb(218,175,43)" rx="2" ry="2" />
<text  x="796.66" y="207.5" >torch_int/nn/op..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,939,060 us., 10.38%)</title><rect x="32.5" y="117" width="122.5" height="15.0" fill="rgb(242,219,8)" rx="2" ry="2" />
<text  x="35.50" y="127.5" >transformers/mo..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (8,805,508 us., 23.20%)</title><rect x="916.2" y="133" width="273.8" height="15.0" fill="rgb(243,106,17)" rx="2" ry="2" />
<text  x="919.19" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch_int/nn/opt.py(69):__shape (637,805 us., 1.68%)</title><rect x="248.7" y="245" width="19.8" height="15.0" fill="rgb(210,13,39)" rx="2" ry="2" />
<text  x="251.68" y="255.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f5ba574b810&gt; (349,992 us., 0.92%)</title><rect x="754.5" y="261" width="10.9" height="15.0" fill="rgb(222,39,48)" rx="2" ry="2" />
<text  x="757.47" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (9,408 us., 0.02%)</title><rect x="915.9" y="181" width="0.3" height="15.0" fill="rgb(243,49,25)" rx="2" ry="2" />
<text  x="918.90" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,928,987 us., 10.35%)</title><rect x="793.7" y="149" width="122.1" height="15.0" fill="rgb(219,155,40)" rx="2" ry="2" />
<text  x="796.66" y="159.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (637,805 us., 1.68%)</title><rect x="248.7" y="133" width="19.8" height="15.0" fill="rgb(248,28,52)" rx="2" ry="2" />
<text  x="251.68" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Linear (699,324 us., 1.84%)</title><rect x="10.0" y="229" width="21.7" height="15.0" fill="rgb(226,113,49)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (8,805,508 us., 23.20%)</title><rect x="916.2" y="213" width="273.8" height="15.0" fill="rgb(244,33,12)" rx="2" ry="2" />
<text  x="919.19" y="223.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>nn.Module:_W8A8BFP32OFP32Linear (489,689 us., 1.29%)</title><rect x="765.4" y="213" width="15.2" height="15.0" fill="rgb(208,22,37)" rx="2" ry="2" />
<text  x="768.35" y="223.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (21,082 us., 0.06%)</title><rect x="31.8" y="245" width="0.7" height="15.0" fill="rgb(221,137,15)" rx="2" ry="2" />
<text  x="34.84" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (248,069 us., 0.65%)</title><rect x="772.9" y="181" width="7.7" height="15.0" fill="rgb(219,215,13)" rx="2" ry="2" />
<text  x="775.87" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (349,992 us., 0.92%)</title><rect x="754.5" y="85" width="10.9" height="15.0" fill="rgb(234,36,4)" rx="2" ry="2" />
<text  x="757.47" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(90):_forward (420,609 us., 1.11%)</title><rect x="780.6" y="245" width="13.1" height="15.0" fill="rgb(223,81,33)" rx="2" ry="2" />
<text  x="783.58" y="255.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,503,708 us., 3.96%)</title><rect x="200.9" y="149" width="46.7" height="15.0" fill="rgb(224,144,36)" rx="2" ry="2" />
<text  x="203.89" y="159.5" >prof..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,690 us., 0.01%)</title><rect x="730.3" y="165" width="0.2" height="15.0" fill="rgb(246,157,23)" rx="2" ry="2" />
<text  x="733.34" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (10,439 us., 0.03%)</title><rect x="32.2" y="133" width="0.3" height="15.0" fill="rgb(225,155,24)" rx="2" ry="2" />
<text  x="35.17" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (637,805 us., 1.68%)</title><rect x="248.7" y="149" width="19.8" height="15.0" fill="rgb(220,221,4)" rx="2" ry="2" />
<text  x="251.68" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,503,708 us., 3.96%)</title><rect x="200.9" y="245" width="46.7" height="15.0" fill="rgb(212,33,23)" rx="2" ry="2" />
<text  x="203.89" y="255.5" >torc..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,690 us., 0.01%)</title><rect x="730.3" y="133" width="0.2" height="15.0" fill="rgb(240,219,43)" rx="2" ry="2" />
<text  x="733.34" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (14,852,607 us., 39.14%)</title><rect x="268.5" y="197" width="461.8" height="15.0" fill="rgb(217,16,9)" rx="2" ry="2" />
<text  x="271.51" y="207.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (14,852,607 us., 39.14%)</title><rect x="268.5" y="101" width="461.8" height="15.0" fill="rgb(214,5,45)" rx="2" ry="2" />
<text  x="271.51" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (14,852,607 us., 39.14%)</title><rect x="268.5" y="149" width="461.8" height="15.0" fill="rgb(235,186,1)" rx="2" ry="2" />
<text  x="271.51" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (9,525 us., 0.03%)</title><rect x="730.5" y="197" width="0.3" height="15.0" fill="rgb(250,167,54)" rx="2" ry="2" />
<text  x="733.48" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (8,805,508 us., 23.20%)</title><rect x="916.2" y="149" width="273.8" height="15.0" fill="rgb(239,31,48)" rx="2" ry="2" />
<text  x="919.19" y="159.5" >transformers/models/opt/modeling_opt..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (9,525 us., 0.03%)</title><rect x="730.5" y="149" width="0.3" height="15.0" fill="rgb(253,217,32)" rx="2" ry="2" />
<text  x="733.48" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (10,643 us., 0.03%)</title><rect x="31.8" y="133" width="0.4" height="15.0" fill="rgb(211,109,0)" rx="2" ry="2" />
<text  x="34.84" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (33,400 us., 0.09%)</title><rect x="247.6" y="197" width="1.1" height="15.0" fill="rgb(210,188,40)" rx="2" ry="2" />
<text  x="250.64" y="207.5" ></text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (699,324 us., 1.84%)</title><rect x="10.0" y="245" width="21.7" height="15.0" fill="rgb(231,27,13)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (8,805,508 us., 23.20%)</title><rect x="916.2" y="229" width="273.8" height="15.0" fill="rgb(240,183,11)" rx="2" ry="2" />
<text  x="919.19" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (9,408 us., 0.02%)</title><rect x="915.9" y="245" width="0.3" height="15.0" fill="rgb(243,27,33)" rx="2" ry="2" />
<text  x="918.90" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (248,069 us., 0.65%)</title><rect x="772.9" y="165" width="7.7" height="15.0" fill="rgb(253,31,54)" rx="2" ry="2" />
<text  x="775.87" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(40):_forward (349,992 us., 0.92%)</title><rect x="754.5" y="245" width="10.9" height="15.0" fill="rgb(244,92,47)" rx="2" ry="2" />
<text  x="757.47" y="255.5" ></text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7f5c9a2b19c0&gt; (771,542 us., 2.03%)</title><rect x="730.5" y="261" width="24.0" height="15.0" fill="rgb(238,193,26)" rx="2" ry="2" />
<text  x="733.48" y="271.5" >&lt;..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (248,069 us., 0.65%)</title><rect x="772.9" y="53" width="7.7" height="15.0" fill="rgb(246,178,0)" rx="2" ry="2" />
<text  x="775.87" y="63.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (349,992 us., 0.92%)</title><rect x="754.5" y="213" width="10.9" height="15.0" fill="rgb(206,71,10)" rx="2" ry="2" />
<text  x="757.47" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (3,939,060 us., 10.38%)</title><rect x="32.5" y="149" width="122.5" height="15.0" fill="rgb(253,101,36)" rx="2" ry="2" />
<text  x="35.50" y="159.5" >torch_int/nn/op..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (10,643 us., 0.03%)</title><rect x="31.8" y="165" width="0.4" height="15.0" fill="rgb(228,174,50)" rx="2" ry="2" />
<text  x="34.84" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (33,400 us., 0.09%)</title><rect x="247.6" y="149" width="1.1" height="15.0" fill="rgb(234,129,24)" rx="2" ry="2" />
<text  x="250.64" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (637,805 us., 1.68%)</title><rect x="248.7" y="213" width="19.8" height="15.0" fill="rgb(206,209,4)" rx="2" ry="2" />
<text  x="251.68" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (10,439 us., 0.03%)</title><rect x="32.2" y="181" width="0.3" height="15.0" fill="rgb(251,169,18)" rx="2" ry="2" />
<text  x="35.17" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (10,439 us., 0.03%)</title><rect x="32.2" y="165" width="0.3" height="15.0" fill="rgb(251,12,31)" rx="2" ry="2" />
<text  x="35.17" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (762,017 us., 2.01%)</title><rect x="730.8" y="181" width="23.7" height="15.0" fill="rgb(240,210,21)" rx="2" ry="2" />
<text  x="733.78" y="191.5" >n..</text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (9,525 us., 0.03%)</title><rect x="730.5" y="229" width="0.3" height="15.0" fill="rgb(253,48,45)" rx="2" ry="2" />
<text  x="733.48" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (3,939,060 us., 10.38%)</title><rect x="32.5" y="213" width="122.5" height="15.0" fill="rgb(216,28,31)" rx="2" ry="2" />
<text  x="35.50" y="223.5" >torch/autograd/..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (420,609 us., 1.11%)</title><rect x="780.6" y="213" width="13.1" height="15.0" fill="rgb(224,71,53)" rx="2" ry="2" />
<text  x="783.58" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (637,805 us., 1.68%)</title><rect x="248.7" y="117" width="19.8" height="15.0" fill="rgb(230,155,0)" rx="2" ry="2" />
<text  x="251.68" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (10,439 us., 0.03%)</title><rect x="32.2" y="117" width="0.3" height="15.0" fill="rgb(245,38,27)" rx="2" ry="2" />
<text  x="35.17" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (762,017 us., 2.01%)</title><rect x="730.8" y="229" width="23.7" height="15.0" fill="rgb(237,109,5)" rx="2" ry="2" />
<text  x="733.78" y="239.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (14,852,607 us., 39.14%)</title><rect x="268.5" y="165" width="461.8" height="15.0" fill="rgb(248,96,36)" rx="2" ry="2" />
<text  x="271.51" y="175.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (9,408 us., 0.02%)</title><rect x="915.9" y="213" width="0.3" height="15.0" fill="rgb(253,90,23)" rx="2" ry="2" />
<text  x="918.90" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (10,643 us., 0.03%)</title><rect x="31.8" y="197" width="0.4" height="15.0" fill="rgb(233,84,16)" rx="2" ry="2" />
<text  x="34.84" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (3,928,987 us., 10.35%)</title><rect x="793.7" y="229" width="122.1" height="15.0" fill="rgb(227,84,3)" rx="2" ry="2" />
<text  x="796.66" y="239.5" >torch/autograd/..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,476,678 us., 3.89%)</title><rect x="155.0" y="197" width="45.9" height="15.0" fill="rgb(233,8,17)" rx="2" ry="2" />
<text  x="157.97" y="207.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,476,678 us., 3.89%)</title><rect x="155.0" y="133" width="45.9" height="15.0" fill="rgb(241,74,2)" rx="2" ry="2" />
<text  x="157.97" y="143.5" >nn.M..</text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (4,690 us., 0.01%)</title><rect x="730.3" y="229" width="0.2" height="15.0" fill="rgb(253,105,44)" rx="2" ry="2" />
<text  x="733.34" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (33,400 us., 0.09%)</title><rect x="247.6" y="165" width="1.1" height="15.0" fill="rgb(237,197,33)" rx="2" ry="2" />
<text  x="250.64" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (10,439 us., 0.03%)</title><rect x="32.2" y="213" width="0.3" height="15.0" fill="rgb(253,144,24)" rx="2" ry="2" />
<text  x="35.17" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (349,992 us., 0.92%)</title><rect x="754.5" y="229" width="10.9" height="15.0" fill="rgb(248,152,46)" rx="2" ry="2" />
<text  x="757.47" y="239.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (3,939,060 us., 10.38%)</title><rect x="32.5" y="245" width="122.5" height="15.0" fill="rgb(208,190,47)" rx="2" ry="2" />
<text  x="35.50" y="255.5" >torch/nn/functi..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (420,609 us., 1.11%)</title><rect x="780.6" y="117" width="13.1" height="15.0" fill="rgb(216,2,21)" rx="2" ry="2" />
<text  x="783.58" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (420,609 us., 1.11%)</title><rect x="780.6" y="149" width="13.1" height="15.0" fill="rgb(237,156,47)" rx="2" ry="2" />
<text  x="783.58" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (699,324 us., 1.84%)</title><rect x="10.0" y="197" width="21.7" height="15.0" fill="rgb(205,152,18)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (3,939,060 us., 10.38%)</title><rect x="32.5" y="197" width="122.5" height="15.0" fill="rgb(226,122,41)" rx="2" ry="2" />
<text  x="35.50" y="207.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,476,678 us., 3.89%)</title><rect x="155.0" y="149" width="45.9" height="15.0" fill="rgb(232,177,45)" rx="2" ry="2" />
<text  x="157.97" y="159.5" >tran..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,690 us., 0.01%)</title><rect x="730.3" y="149" width="0.2" height="15.0" fill="rgb(219,216,6)" rx="2" ry="2" />
<text  x="733.34" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (762,017 us., 2.01%)</title><rect x="730.8" y="149" width="23.7" height="15.0" fill="rgb(240,62,5)" rx="2" ry="2" />
<text  x="733.78" y="159.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (248,069 us., 0.65%)</title><rect x="772.9" y="149" width="7.7" height="15.0" fill="rgb(227,138,9)" rx="2" ry="2" />
<text  x="775.87" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (10,643 us., 0.03%)</title><rect x="31.8" y="149" width="0.4" height="15.0" fill="rgb(217,185,16)" rx="2" ry="2" />
<text  x="34.84" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (3,928,987 us., 10.35%)</title><rect x="793.7" y="245" width="122.1" height="15.0" fill="rgb(254,201,12)" rx="2" ry="2" />
<text  x="796.66" y="255.5" >torch_int/nn/op..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (8,805,508 us., 23.20%)</title><rect x="916.2" y="117" width="273.8" height="15.0" fill="rgb(234,171,50)" rx="2" ry="2" />
<text  x="919.19" y="127.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (4,690 us., 0.01%)</title><rect x="730.3" y="245" width="0.2" height="15.0" fill="rgb(253,143,19)" rx="2" ry="2" />
<text  x="733.34" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,939,060 us., 10.38%)</title><rect x="32.5" y="69" width="122.5" height="15.0" fill="rgb(226,56,45)" rx="2" ry="2" />
<text  x="35.50" y="79.5" >torch/autograd/..</text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (771,542 us., 2.03%)</title><rect x="730.5" y="245" width="24.0" height="15.0" fill="rgb(253,213,12)" rx="2" ry="2" />
<text  x="733.48" y="255.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (3,939,060 us., 10.38%)</title><rect x="32.5" y="229" width="122.5" height="15.0" fill="rgb(225,30,9)" rx="2" ry="2" />
<text  x="35.50" y="239.5" >torch_int/nn/op..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (3,928,987 us., 10.35%)</title><rect x="793.7" y="181" width="122.1" height="15.0" fill="rgb(221,40,49)" rx="2" ry="2" />
<text  x="796.66" y="191.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (349,992 us., 0.92%)</title><rect x="754.5" y="37" width="10.9" height="15.0" fill="rgb(207,167,19)" rx="2" ry="2" />
<text  x="757.47" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Embedding (10,643 us., 0.03%)</title><rect x="31.8" y="213" width="0.4" height="15.0" fill="rgb(212,7,26)" rx="2" ry="2" />
<text  x="34.84" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (699,324 us., 1.84%)</title><rect x="10.0" y="181" width="21.7" height="15.0" fill="rgb(206,148,31)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >p..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (248,069 us., 0.65%)</title><rect x="772.9" y="117" width="7.7" height="15.0" fill="rgb(212,43,51)" rx="2" ry="2" />
<text  x="775.87" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (241,620 us., 0.64%)</title><rect x="765.4" y="149" width="7.5" height="15.0" fill="rgb(236,202,34)" rx="2" ry="2" />
<text  x="768.35" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,690 us., 0.01%)</title><rect x="730.3" y="197" width="0.2" height="15.0" fill="rgb(242,4,48)" rx="2" ry="2" />
<text  x="733.34" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,928,987 us., 10.35%)</title><rect x="793.7" y="133" width="122.1" height="15.0" fill="rgb(213,150,53)" rx="2" ry="2" />
<text  x="796.66" y="143.5" >transformers/mo..</text>
</g>
<g >
<title>nn.Module:_LayerNorm (9,525 us., 0.03%)</title><rect x="730.5" y="213" width="0.3" height="15.0" fill="rgb(239,193,10)" rx="2" ry="2" />
<text  x="733.48" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (248,069 us., 0.65%)</title><rect x="772.9" y="133" width="7.7" height="15.0" fill="rgb(205,206,8)" rx="2" ry="2" />
<text  x="775.87" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (248,069 us., 0.65%)</title><rect x="772.9" y="37" width="7.7" height="15.0" fill="rgb(250,184,2)" rx="2" ry="2" />
<text  x="775.87" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (8,805,508 us., 23.20%)</title><rect x="916.2" y="165" width="273.8" height="15.0" fill="rgb(207,224,40)" rx="2" ry="2" />
<text  x="919.19" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (420,609 us., 1.11%)</title><rect x="780.6" y="229" width="13.1" height="15.0" fill="rgb(240,169,26)" rx="2" ry="2" />
<text  x="783.58" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,928,987 us., 10.35%)</title><rect x="793.7" y="85" width="122.1" height="15.0" fill="rgb(223,117,54)" rx="2" ry="2" />
<text  x="796.66" y="95.5" >torch/autograd/..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (420,609 us., 1.11%)</title><rect x="780.6" y="133" width="13.1" height="15.0" fill="rgb(217,98,13)" rx="2" ry="2" />
<text  x="783.58" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (248,069 us., 0.65%)</title><rect x="772.9" y="101" width="7.7" height="15.0" fill="rgb(243,202,32)" rx="2" ry="2" />
<text  x="775.87" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (9,525 us., 0.03%)</title><rect x="730.5" y="181" width="0.3" height="15.0" fill="rgb(230,8,37)" rx="2" ry="2" />
<text  x="733.48" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (14,852,607 us., 39.14%)</title><rect x="268.5" y="229" width="461.8" height="15.0" fill="rgb(223,192,22)" rx="2" ry="2" />
<text  x="271.51" y="239.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>nn.Module:_LayerNormQ (1,476,678 us., 3.89%)</title><rect x="155.0" y="229" width="45.9" height="15.0" fill="rgb(220,59,19)" rx="2" ry="2" />
<text  x="157.97" y="239.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (241,620 us., 0.64%)</title><rect x="765.4" y="181" width="7.5" height="15.0" fill="rgb(222,185,18)" rx="2" ry="2" />
<text  x="768.35" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (420,609 us., 1.11%)</title><rect x="780.6" y="165" width="13.1" height="15.0" fill="rgb(243,150,6)" rx="2" ry="2" />
<text  x="783.58" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,476,678 us., 3.89%)</title><rect x="155.0" y="165" width="45.9" height="15.0" fill="rgb(239,48,18)" rx="2" ry="2" />
<text  x="157.97" y="175.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (10,439 us., 0.03%)</title><rect x="32.2" y="197" width="0.3" height="15.0" fill="rgb(225,67,17)" rx="2" ry="2" />
<text  x="35.17" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (10,439 us., 0.03%)</title><rect x="32.2" y="101" width="0.3" height="15.0" fill="rgb(213,25,42)" rx="2" ry="2" />
<text  x="35.17" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (3,939,060 us., 10.38%)</title><rect x="32.5" y="165" width="122.5" height="15.0" fill="rgb(250,60,33)" rx="2" ry="2" />
<text  x="35.50" y="175.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (699,324 us., 1.84%)</title><rect x="10.0" y="261" width="21.7" height="15.0" fill="rgb(234,51,37)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,503,708 us., 3.96%)</title><rect x="200.9" y="213" width="46.7" height="15.0" fill="rgb(243,192,40)" rx="2" ry="2" />
<text  x="203.89" y="223.5" >torc..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,503,708 us., 3.96%)</title><rect x="200.9" y="165" width="46.7" height="15.0" fill="rgb(218,87,18)" rx="2" ry="2" />
<text  x="203.89" y="175.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (14,852,607 us., 39.14%)</title><rect x="268.5" y="181" width="461.8" height="15.0" fill="rgb(237,37,47)" rx="2" ry="2" />
<text  x="271.51" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,503,708 us., 3.96%)</title><rect x="200.9" y="133" width="46.7" height="15.0" fill="rgb(222,179,0)" rx="2" ry="2" />
<text  x="203.89" y="143.5" >torc..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (33,400 us., 0.09%)</title><rect x="247.6" y="229" width="1.1" height="15.0" fill="rgb(253,110,10)" rx="2" ry="2" />
<text  x="250.64" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (3,928,987 us., 10.35%)</title><rect x="793.7" y="165" width="122.1" height="15.0" fill="rgb(230,87,45)" rx="2" ry="2" />
<text  x="796.66" y="175.5" >torch_int/nn/op..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (489,689 us., 1.29%)</title><rect x="765.4" y="229" width="15.2" height="15.0" fill="rgb(208,146,12)" rx="2" ry="2" />
<text  x="768.35" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,476,678 us., 3.89%)</title><rect x="155.0" y="101" width="45.9" height="15.0" fill="rgb(251,168,30)" rx="2" ry="2" />
<text  x="157.97" y="111.5" >torc..</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (1,476,678 us., 3.89%)</title><rect x="155.0" y="245" width="45.9" height="15.0" fill="rgb(239,177,22)" rx="2" ry="2" />
<text  x="157.97" y="255.5" >torc..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (8,805,508 us., 23.20%)</title><rect x="916.2" y="101" width="273.8" height="15.0" fill="rgb(207,50,35)" rx="2" ry="2" />
<text  x="919.19" y="111.5" >torch/autograd/grad_mode.py(27):_dec..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (8,805,508 us., 23.20%)</title><rect x="916.2" y="181" width="273.8" height="15.0" fill="rgb(243,35,40)" rx="2" ry="2" />
<text  x="919.19" y="191.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (762,017 us., 2.01%)</title><rect x="730.8" y="101" width="23.7" height="15.0" fill="rgb(249,226,51)" rx="2" ry="2" />
<text  x="733.78" y="111.5" >p..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,503,708 us., 3.96%)</title><rect x="200.9" y="197" width="46.7" height="15.0" fill="rgb(213,143,3)" rx="2" ry="2" />
<text  x="203.89" y="207.5" >nn.M..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (10,439 us., 0.03%)</title><rect x="32.2" y="149" width="0.3" height="15.0" fill="rgb(233,68,1)" rx="2" ry="2" />
<text  x="35.17" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (14,852,607 us., 39.14%)</title><rect x="268.5" y="245" width="461.8" height="15.0" fill="rgb(210,18,46)" rx="2" ry="2" />
<text  x="271.51" y="255.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,503,708 us., 3.96%)</title><rect x="200.9" y="181" width="46.7" height="15.0" fill="rgb(240,5,31)" rx="2" ry="2" />
<text  x="203.89" y="191.5" >tran..</text>
</g>
<g >
<title>all (37,950,526 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(205,138,25)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (637,805 us., 1.68%)</title><rect x="248.7" y="181" width="19.8" height="15.0" fill="rgb(242,4,4)" rx="2" ry="2" />
<text  x="251.68" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (349,992 us., 0.92%)</title><rect x="754.5" y="69" width="10.9" height="15.0" fill="rgb(211,97,42)" rx="2" ry="2" />
<text  x="757.47" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (420,609 us., 1.11%)</title><rect x="780.6" y="181" width="13.1" height="15.0" fill="rgb(245,18,27)" rx="2" ry="2" />
<text  x="783.58" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (762,017 us., 2.01%)</title><rect x="730.8" y="133" width="23.7" height="15.0" fill="rgb(247,136,6)" rx="2" ry="2" />
<text  x="733.78" y="143.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (699,324 us., 1.84%)</title><rect x="10.0" y="165" width="21.7" height="15.0" fill="rgb(225,77,32)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >t..</text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7f5c9a2b19c0&gt; (21,082 us., 0.06%)</title><rect x="31.8" y="261" width="0.7" height="15.0" fill="rgb(210,203,53)" rx="2" ry="2" />
<text  x="34.84" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (637,805 us., 1.68%)</title><rect x="248.7" y="69" width="19.8" height="15.0" fill="rgb(247,164,52)" rx="2" ry="2" />
<text  x="251.68" y="79.5" ></text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7f5c9a2b19c0&gt; (3,928,987 us., 10.35%)</title><rect x="793.7" y="261" width="122.1" height="15.0" fill="rgb(231,223,45)" rx="2" ry="2" />
<text  x="796.66" y="271.5" >&lt;built-in_metho..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (349,992 us., 0.92%)</title><rect x="754.5" y="165" width="10.9" height="15.0" fill="rgb(237,169,3)" rx="2" ry="2" />
<text  x="757.47" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (637,805 us., 1.68%)</title><rect x="248.7" y="165" width="19.8" height="15.0" fill="rgb(238,164,35)" rx="2" ry="2" />
<text  x="251.68" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (637,805 us., 1.68%)</title><rect x="248.7" y="85" width="19.8" height="15.0" fill="rgb(236,75,37)" rx="2" ry="2" />
<text  x="251.68" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (4,690 us., 0.01%)</title><rect x="730.3" y="213" width="0.2" height="15.0" fill="rgb(226,167,54)" rx="2" ry="2" />
<text  x="733.34" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7f5ba5da84b0&gt; (22,448,251 us., 59.15%)</title><rect x="32.5" y="261" width="698.0" height="15.0" fill="rgb(226,99,11)" rx="2" ry="2" />
<text  x="35.50" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7f5ba5da84b0&gt;</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (8,805,508 us., 23.20%)</title><rect x="916.2" y="261" width="273.8" height="15.0" fill="rgb(244,223,32)" rx="2" ry="2" />
<text  x="919.19" y="271.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,928,987 us., 10.35%)</title><rect x="793.7" y="101" width="122.1" height="15.0" fill="rgb(245,164,18)" rx="2" ry="2" />
<text  x="796.66" y="111.5" >profiling/utils..</text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (21,082 us., 0.06%)</title><rect x="31.8" y="229" width="0.7" height="15.0" fill="rgb(208,141,8)" rx="2" ry="2" />
<text  x="34.84" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (10,643 us., 0.03%)</title><rect x="31.8" y="117" width="0.4" height="15.0" fill="rgb(243,171,9)" rx="2" ry="2" />
<text  x="34.84" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (14,852,607 us., 39.14%)</title><rect x="268.5" y="117" width="461.8" height="15.0" fill="rgb(251,88,0)" rx="2" ry="2" />
<text  x="271.51" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (241,620 us., 0.64%)</title><rect x="765.4" y="133" width="7.5" height="15.0" fill="rgb(223,182,12)" rx="2" ry="2" />
<text  x="768.35" y="143.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f5ba574b750&gt; (420,609 us., 1.11%)</title><rect x="780.6" y="261" width="13.1" height="15.0" fill="rgb(253,133,15)" rx="2" ry="2" />
<text  x="783.58" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,503,708 us., 3.96%)</title><rect x="200.9" y="229" width="46.7" height="15.0" fill="rgb(235,8,37)" rx="2" ry="2" />
<text  x="203.89" y="239.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (8,805,508 us., 23.20%)</title><rect x="916.2" y="197" width="273.8" height="15.0" fill="rgb(212,57,32)" rx="2" ry="2" />
<text  x="919.19" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (420,609 us., 1.11%)</title><rect x="780.6" y="85" width="13.1" height="15.0" fill="rgb(212,75,44)" rx="2" ry="2" />
<text  x="783.58" y="95.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,690 us., 0.01%)</title><rect x="730.3" y="181" width="0.2" height="15.0" fill="rgb(243,37,8)" rx="2" ry="2" />
<text  x="733.34" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,476,678 us., 3.89%)</title><rect x="155.0" y="117" width="45.9" height="15.0" fill="rgb(249,138,25)" rx="2" ry="2" />
<text  x="157.97" y="127.5" >prof..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (9,408 us., 0.02%)</title><rect x="915.9" y="261" width="0.3" height="15.0" fill="rgb(219,158,21)" rx="2" ry="2" />
<text  x="918.90" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,939,060 us., 10.38%)</title><rect x="32.5" y="133" width="122.5" height="15.0" fill="rgb(250,229,27)" rx="2" ry="2" />
<text  x="35.50" y="143.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (349,992 us., 0.92%)</title><rect x="754.5" y="197" width="10.9" height="15.0" fill="rgb(239,12,28)" rx="2" ry="2" />
<text  x="757.47" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (420,609 us., 1.11%)</title><rect x="780.6" y="101" width="13.1" height="15.0" fill="rgb(210,52,13)" rx="2" ry="2" />
<text  x="783.58" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,928,987 us., 10.35%)</title><rect x="793.7" y="117" width="122.1" height="15.0" fill="rgb(237,96,2)" rx="2" ry="2" />
<text  x="796.66" y="127.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (420,609 us., 1.11%)</title><rect x="780.6" y="197" width="13.1" height="15.0" fill="rgb(220,53,28)" rx="2" ry="2" />
<text  x="783.58" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,476,678 us., 3.89%)</title><rect x="155.0" y="213" width="45.9" height="15.0" fill="rgb(244,222,21)" rx="2" ry="2" />
<text  x="157.97" y="223.5" >torc..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (637,805 us., 1.68%)</title><rect x="248.7" y="197" width="19.8" height="15.0" fill="rgb(225,37,46)" rx="2" ry="2" />
<text  x="251.68" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (9,408 us., 0.02%)</title><rect x="915.9" y="229" width="0.3" height="15.0" fill="rgb(243,122,40)" rx="2" ry="2" />
<text  x="918.90" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNormQ (762,017 us., 2.01%)</title><rect x="730.8" y="213" width="23.7" height="15.0" fill="rgb(241,187,50)" rx="2" ry="2" />
<text  x="733.78" y="223.5" >n..</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_bfp32_ofp32_of_PyCapsule_object_at_0x7f5ba574b7b0&gt; (489,689 us., 1.29%)</title><rect x="765.4" y="261" width="15.2" height="15.0" fill="rgb(223,57,5)" rx="2" ry="2" />
<text  x="768.35" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (349,992 us., 0.92%)</title><rect x="754.5" y="181" width="10.9" height="15.0" fill="rgb(205,121,9)" rx="2" ry="2" />
<text  x="757.47" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (349,992 us., 0.92%)</title><rect x="754.5" y="133" width="10.9" height="15.0" fill="rgb(236,54,54)" rx="2" ry="2" />
<text  x="757.47" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (33,400 us., 0.09%)</title><rect x="247.6" y="181" width="1.1" height="15.0" fill="rgb(241,148,44)" rx="2" ry="2" />
<text  x="250.64" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,476,678 us., 3.89%)</title><rect x="155.0" y="181" width="45.9" height="15.0" fill="rgb(235,155,16)" rx="2" ry="2" />
<text  x="157.97" y="191.5" >torc..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (9,525 us., 0.03%)</title><rect x="730.5" y="165" width="0.3" height="15.0" fill="rgb(230,25,33)" rx="2" ry="2" />
<text  x="733.48" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (241,620 us., 0.64%)</title><rect x="765.4" y="101" width="7.5" height="15.0" fill="rgb(223,75,52)" rx="2" ry="2" />
<text  x="768.35" y="111.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (9,408 us., 0.02%)</title><rect x="915.9" y="197" width="0.3" height="15.0" fill="rgb(208,98,21)" rx="2" ry="2" />
<text  x="918.90" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (349,992 us., 0.92%)</title><rect x="754.5" y="53" width="10.9" height="15.0" fill="rgb(240,52,23)" rx="2" ry="2" />
<text  x="757.47" y="63.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (3,928,987 us., 10.35%)</title><rect x="793.7" y="213" width="122.1" height="15.0" fill="rgb(236,14,7)" rx="2" ry="2" />
<text  x="796.66" y="223.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (349,992 us., 0.92%)</title><rect x="754.5" y="149" width="10.9" height="15.0" fill="rgb(242,125,0)" rx="2" ry="2" />
<text  x="757.47" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (637,805 us., 1.68%)</title><rect x="248.7" y="229" width="19.8" height="15.0" fill="rgb(228,221,23)" rx="2" ry="2" />
<text  x="251.68" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (349,992 us., 0.92%)</title><rect x="754.5" y="101" width="10.9" height="15.0" fill="rgb(230,2,52)" rx="2" ry="2" />
<text  x="757.47" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(225):_forward (489,689 us., 1.29%)</title><rect x="765.4" y="245" width="15.2" height="15.0" fill="rgb(213,200,15)" rx="2" ry="2" />
<text  x="768.35" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (241,620 us., 0.64%)</title><rect x="765.4" y="165" width="7.5" height="15.0" fill="rgb(242,139,39)" rx="2" ry="2" />
<text  x="768.35" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (349,992 us., 0.92%)</title><rect x="754.5" y="117" width="10.9" height="15.0" fill="rgb(238,54,52)" rx="2" ry="2" />
<text  x="757.47" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (248,069 us., 0.65%)</title><rect x="772.9" y="85" width="7.7" height="15.0" fill="rgb(250,104,53)" rx="2" ry="2" />
<text  x="775.87" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (14,852,607 us., 39.14%)</title><rect x="268.5" y="213" width="461.8" height="15.0" fill="rgb(210,140,23)" rx="2" ry="2" />
<text  x="271.51" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (9,525 us., 0.03%)</title><rect x="730.5" y="117" width="0.3" height="15.0" fill="rgb(230,112,3)" rx="2" ry="2" />
<text  x="733.48" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (762,017 us., 2.01%)</title><rect x="730.8" y="117" width="23.7" height="15.0" fill="rgb(213,89,14)" rx="2" ry="2" />
<text  x="733.78" y="127.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,939,060 us., 10.38%)</title><rect x="32.5" y="101" width="122.5" height="15.0" fill="rgb(219,118,38)" rx="2" ry="2" />
<text  x="35.50" y="111.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (762,017 us., 2.01%)</title><rect x="730.8" y="165" width="23.7" height="15.0" fill="rgb(244,200,9)" rx="2" ry="2" />
<text  x="733.78" y="175.5" >t..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,939,060 us., 10.38%)</title><rect x="32.5" y="85" width="122.5" height="15.0" fill="rgb(245,100,50)" rx="2" ry="2" />
<text  x="35.50" y="95.5" >profiling/utils..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (248,069 us., 0.65%)</title><rect x="772.9" y="197" width="7.7" height="15.0" fill="rgb(227,21,48)" rx="2" ry="2" />
<text  x="775.87" y="207.5" ></text>
</g>
</g>
</svg>
