<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (5,254 us., 0.03%)</title><rect x="33.3" y="149" width="0.4" height="15.0" fill="rgb(219,215,9)" rx="2" ry="2" />
<text  x="36.33" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (8,226 us., 0.04%)</title><rect x="250.2" y="229" width="0.5" height="15.0" fill="rgb(248,94,40)" rx="2" ry="2" />
<text  x="253.21" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNormQ (360,417 us., 1.89%)</title><rect x="731.3" y="213" width="22.3" height="15.0" fill="rgb(248,200,2)" rx="2" ry="2" />
<text  x="734.27" y="223.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (192,281 us., 1.01%)</title><rect x="753.6" y="229" width="11.9" height="15.0" fill="rgb(243,201,49)" rx="2" ry="2" />
<text  x="756.56" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (8,226 us., 0.04%)</title><rect x="250.2" y="197" width="0.5" height="15.0" fill="rgb(225,150,48)" rx="2" ry="2" />
<text  x="253.21" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (314,831 us., 1.65%)</title><rect x="250.7" y="85" width="19.5" height="15.0" fill="rgb(218,132,35)" rx="2" ry="2" />
<text  x="253.72" y="95.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,518 us., 0.02%)</title><rect x="731.0" y="133" width="0.3" height="15.0" fill="rgb(216,76,44)" rx="2" ry="2" />
<text  x="733.99" y="143.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (364,935 us., 1.91%)</title><rect x="731.0" y="245" width="22.6" height="15.0" fill="rgb(207,99,27)" rx="2" ry="2" />
<text  x="733.99" y="255.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,420,644 us., 23.17%)</title><rect x="916.5" y="101" width="273.5" height="15.0" fill="rgb(223,76,32)" rx="2" ry="2" />
<text  x="919.53" y="111.5" >torch/autograd/grad_mode.py(27):_dec..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (314,831 us., 1.65%)</title><rect x="250.7" y="213" width="19.5" height="15.0" fill="rgb(239,112,36)" rx="2" ry="2" />
<text  x="253.72" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (7,447,672 us., 39.04%)</title><rect x="270.2" y="85" width="460.6" height="15.0" fill="rgb(247,182,21)" rx="2" ry="2" />
<text  x="273.19" y="95.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (128,273 us., 0.67%)</title><rect x="773.2" y="133" width="7.9" height="15.0" fill="rgb(216,18,42)" rx="2" ry="2" />
<text  x="776.16" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (371,339 us., 1.95%)</title><rect x="10.0" y="197" width="23.0" height="15.0" fill="rgb(207,55,34)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (360,417 us., 1.89%)</title><rect x="731.3" y="133" width="22.3" height="15.0" fill="rgb(253,228,4)" rx="2" ry="2" />
<text  x="734.27" y="143.5" >t..</text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (10,677 us., 0.06%)</title><rect x="33.0" y="245" width="0.7" height="15.0" fill="rgb(228,92,53)" rx="2" ry="2" />
<text  x="35.99" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (7,447,672 us., 39.04%)</title><rect x="270.2" y="133" width="460.6" height="15.0" fill="rgb(214,158,36)" rx="2" ry="2" />
<text  x="273.19" y="143.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (124,581 us., 0.65%)</title><rect x="765.5" y="165" width="7.7" height="15.0" fill="rgb(214,7,30)" rx="2" ry="2" />
<text  x="768.46" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (192,281 us., 1.01%)</title><rect x="753.6" y="53" width="11.9" height="15.0" fill="rgb(219,97,38)" rx="2" ry="2" />
<text  x="756.56" y="63.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (764,115 us., 4.01%)</title><rect x="202.9" y="229" width="47.3" height="15.0" fill="rgb(222,66,31)" rx="2" ry="2" />
<text  x="205.95" y="239.5" >nn.M..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (314,831 us., 1.65%)</title><rect x="250.7" y="117" width="19.5" height="15.0" fill="rgb(222,85,20)" rx="2" ry="2" />
<text  x="253.72" y="127.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (1,979,719 us., 10.38%)</title><rect x="33.7" y="245" width="122.4" height="15.0" fill="rgb(206,218,45)" rx="2" ry="2" />
<text  x="36.65" y="255.5" >torch/nn/functi..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (314,831 us., 1.65%)</title><rect x="250.7" y="133" width="19.5" height="15.0" fill="rgb(209,201,53)" rx="2" ry="2" />
<text  x="253.72" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (757,327 us., 3.97%)</title><rect x="156.1" y="197" width="46.8" height="15.0" fill="rgb(231,201,39)" rx="2" ry="2" />
<text  x="159.10" y="207.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_LayerNormQ (757,327 us., 3.97%)</title><rect x="156.1" y="229" width="46.8" height="15.0" fill="rgb(247,42,26)" rx="2" ry="2" />
<text  x="159.10" y="239.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (7,447,672 us., 39.04%)</title><rect x="270.2" y="117" width="460.6" height="15.0" fill="rgb(214,150,51)" rx="2" ry="2" />
<text  x="273.19" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (128,273 us., 0.67%)</title><rect x="773.2" y="85" width="7.9" height="15.0" fill="rgb(245,103,39)" rx="2" ry="2" />
<text  x="776.16" y="95.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,979,719 us., 10.38%)</title><rect x="33.7" y="117" width="122.4" height="15.0" fill="rgb(242,19,15)" rx="2" ry="2" />
<text  x="36.65" y="127.5" >transformers/mo..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (192,281 us., 1.01%)</title><rect x="753.6" y="101" width="11.9" height="15.0" fill="rgb(232,143,41)" rx="2" ry="2" />
<text  x="756.56" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (192,281 us., 1.01%)</title><rect x="753.6" y="133" width="11.9" height="15.0" fill="rgb(211,153,4)" rx="2" ry="2" />
<text  x="756.56" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,979,719 us., 10.38%)</title><rect x="33.7" y="133" width="122.4" height="15.0" fill="rgb(224,92,39)" rx="2" ry="2" />
<text  x="36.65" y="143.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (757,327 us., 3.97%)</title><rect x="156.1" y="213" width="46.8" height="15.0" fill="rgb(247,205,29)" rx="2" ry="2" />
<text  x="159.10" y="223.5" >torc..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (252,854 us., 1.33%)</title><rect x="765.5" y="229" width="15.6" height="15.0" fill="rgb(251,130,17)" rx="2" ry="2" />
<text  x="768.46" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (7,447,672 us., 39.04%)</title><rect x="270.2" y="149" width="460.6" height="15.0" fill="rgb(216,159,32)" rx="2" ry="2" />
<text  x="273.19" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (192,281 us., 1.01%)</title><rect x="753.6" y="85" width="11.9" height="15.0" fill="rgb(246,228,28)" rx="2" ry="2" />
<text  x="756.56" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (213,973 us., 1.12%)</title><rect x="781.1" y="165" width="13.2" height="15.0" fill="rgb(226,55,39)" rx="2" ry="2" />
<text  x="784.10" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (213,973 us., 1.12%)</title><rect x="781.1" y="149" width="13.2" height="15.0" fill="rgb(228,100,46)" rx="2" ry="2" />
<text  x="784.10" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (314,831 us., 1.65%)</title><rect x="250.7" y="101" width="19.5" height="15.0" fill="rgb(233,178,42)" rx="2" ry="2" />
<text  x="253.72" y="111.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (764,115 us., 4.01%)</title><rect x="202.9" y="149" width="47.3" height="15.0" fill="rgb(252,47,18)" rx="2" ry="2" />
<text  x="205.95" y="159.5" >prof..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (192,281 us., 1.01%)</title><rect x="753.6" y="37" width="11.9" height="15.0" fill="rgb(216,100,44)" rx="2" ry="2" />
<text  x="756.56" y="47.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (764,115 us., 4.01%)</title><rect x="202.9" y="133" width="47.3" height="15.0" fill="rgb(249,110,47)" rx="2" ry="2" />
<text  x="205.95" y="143.5" >torc..</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_bfp32_ofp32_of_PyCapsule_object_at_0x7fd8359547b0&gt; (252,854 us., 1.33%)</title><rect x="765.5" y="261" width="15.6" height="15.0" fill="rgb(248,72,45)" rx="2" ry="2" />
<text  x="768.46" y="271.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,852 us., 0.03%)</title><rect x="916.2" y="197" width="0.3" height="15.0" fill="rgb(211,71,28)" rx="2" ry="2" />
<text  x="919.23" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (4,420,644 us., 23.17%)</title><rect x="916.5" y="245" width="273.5" height="15.0" fill="rgb(209,111,2)" rx="2" ry="2" />
<text  x="919.53" y="255.5" >torch/autograd/grad_mode.py(24):_dec..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (7,447,672 us., 39.04%)</title><rect x="270.2" y="213" width="460.6" height="15.0" fill="rgb(225,176,22)" rx="2" ry="2" />
<text  x="273.19" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (192,281 us., 1.01%)</title><rect x="753.6" y="149" width="11.9" height="15.0" fill="rgb(241,141,4)" rx="2" ry="2" />
<text  x="756.56" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (128,273 us., 0.67%)</title><rect x="773.2" y="197" width="7.9" height="15.0" fill="rgb(238,181,49)" rx="2" ry="2" />
<text  x="776.16" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (4,420,644 us., 23.17%)</title><rect x="916.5" y="197" width="273.5" height="15.0" fill="rgb(236,86,33)" rx="2" ry="2" />
<text  x="919.53" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (5,423 us., 0.03%)</title><rect x="33.0" y="181" width="0.3" height="15.0" fill="rgb(231,142,44)" rx="2" ry="2" />
<text  x="35.99" y="191.5" ></text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7fd92a4ba9c0&gt; (364,935 us., 1.91%)</title><rect x="731.0" y="261" width="22.6" height="15.0" fill="rgb(226,227,38)" rx="2" ry="2" />
<text  x="733.99" y="271.5" >&lt;..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,979,719 us., 10.38%)</title><rect x="33.7" y="165" width="122.4" height="15.0" fill="rgb(240,199,35)" rx="2" ry="2" />
<text  x="36.65" y="175.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,420,644 us., 23.17%)</title><rect x="916.5" y="165" width="273.5" height="15.0" fill="rgb(206,124,43)" rx="2" ry="2" />
<text  x="919.53" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,997 us., 0.01%)</title><rect x="730.9" y="133" width="0.1" height="15.0" fill="rgb(244,206,16)" rx="2" ry="2" />
<text  x="733.87" y="143.5" ></text>
</g>
<g >
<title>all (19,077,604 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(236,114,6)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (764,115 us., 4.01%)</title><rect x="202.9" y="181" width="47.3" height="15.0" fill="rgb(243,163,41)" rx="2" ry="2" />
<text  x="205.95" y="191.5" >tran..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (7,447,672 us., 39.04%)</title><rect x="270.2" y="229" width="460.6" height="15.0" fill="rgb(247,110,28)" rx="2" ry="2" />
<text  x="273.19" y="239.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (1,969,683 us., 10.32%)</title><rect x="794.3" y="245" width="121.9" height="15.0" fill="rgb(210,216,12)" rx="2" ry="2" />
<text  x="797.33" y="255.5" >torch_int/nn/op..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (213,973 us., 1.12%)</title><rect x="781.1" y="117" width="13.2" height="15.0" fill="rgb(231,178,34)" rx="2" ry="2" />
<text  x="784.10" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,979,719 us., 10.38%)</title><rect x="33.7" y="197" width="122.4" height="15.0" fill="rgb(240,56,35)" rx="2" ry="2" />
<text  x="36.65" y="207.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Linear (371,339 us., 1.95%)</title><rect x="10.0" y="229" width="23.0" height="15.0" fill="rgb(207,153,24)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,518 us., 0.02%)</title><rect x="731.0" y="165" width="0.3" height="15.0" fill="rgb(210,44,22)" rx="2" ry="2" />
<text  x="733.99" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (371,339 us., 1.95%)</title><rect x="10.0" y="213" width="23.0" height="15.0" fill="rgb(252,185,38)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (371,339 us., 1.95%)</title><rect x="10.0" y="165" width="23.0" height="15.0" fill="rgb(208,67,40)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (1,997 us., 0.01%)</title><rect x="730.9" y="245" width="0.1" height="15.0" fill="rgb(234,217,11)" rx="2" ry="2" />
<text  x="733.87" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (764,115 us., 4.01%)</title><rect x="202.9" y="213" width="47.3" height="15.0" fill="rgb(223,216,46)" rx="2" ry="2" />
<text  x="205.95" y="223.5" >torc..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (124,581 us., 0.65%)</title><rect x="765.5" y="181" width="7.7" height="15.0" fill="rgb(228,126,41)" rx="2" ry="2" />
<text  x="768.46" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (757,327 us., 3.97%)</title><rect x="156.1" y="101" width="46.8" height="15.0" fill="rgb(215,89,4)" rx="2" ry="2" />
<text  x="159.10" y="111.5" >torc..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (5,423 us., 0.03%)</title><rect x="33.0" y="117" width="0.3" height="15.0" fill="rgb(246,12,8)" rx="2" ry="2" />
<text  x="35.99" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,420,644 us., 23.17%)</title><rect x="916.5" y="133" width="273.5" height="15.0" fill="rgb(230,58,27)" rx="2" ry="2" />
<text  x="919.53" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (10,677 us., 0.06%)</title><rect x="33.0" y="229" width="0.7" height="15.0" fill="rgb(205,10,39)" rx="2" ry="2" />
<text  x="35.99" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (4,852 us., 0.03%)</title><rect x="916.2" y="261" width="0.3" height="15.0" fill="rgb(237,34,28)" rx="2" ry="2" />
<text  x="919.23" y="271.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (213,973 us., 1.12%)</title><rect x="781.1" y="101" width="13.2" height="15.0" fill="rgb(243,47,37)" rx="2" ry="2" />
<text  x="784.10" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (1,979,719 us., 10.38%)</title><rect x="33.7" y="229" width="122.4" height="15.0" fill="rgb(226,135,53)" rx="2" ry="2" />
<text  x="36.65" y="239.5" >torch_int/nn/op..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (128,273 us., 0.67%)</title><rect x="773.2" y="53" width="7.9" height="15.0" fill="rgb(240,169,22)" rx="2" ry="2" />
<text  x="776.16" y="63.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (124,581 us., 0.65%)</title><rect x="765.5" y="85" width="7.7" height="15.0" fill="rgb(229,155,35)" rx="2" ry="2" />
<text  x="768.46" y="95.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,969,683 us., 10.32%)</title><rect x="794.3" y="101" width="121.9" height="15.0" fill="rgb(233,124,26)" rx="2" ry="2" />
<text  x="797.33" y="111.5" >profiling/utils..</text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (371,339 us., 1.95%)</title><rect x="10.0" y="245" width="23.0" height="15.0" fill="rgb(240,53,51)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,969,683 us., 10.32%)</title><rect x="794.3" y="85" width="121.9" height="15.0" fill="rgb(247,168,11)" rx="2" ry="2" />
<text  x="797.33" y="95.5" >torch/autograd/..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (4,420,644 us., 23.17%)</title><rect x="916.5" y="181" width="273.5" height="15.0" fill="rgb(213,204,40)" rx="2" ry="2" />
<text  x="919.53" y="191.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,979,719 us., 10.38%)</title><rect x="33.7" y="213" width="122.4" height="15.0" fill="rgb(233,142,7)" rx="2" ry="2" />
<text  x="36.65" y="223.5" >torch/autograd/..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (757,327 us., 3.97%)</title><rect x="156.1" y="133" width="46.8" height="15.0" fill="rgb(244,33,2)" rx="2" ry="2" />
<text  x="159.10" y="143.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (764,115 us., 4.01%)</title><rect x="202.9" y="197" width="47.3" height="15.0" fill="rgb(212,37,21)" rx="2" ry="2" />
<text  x="205.95" y="207.5" >nn.M..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (192,281 us., 1.01%)</title><rect x="753.6" y="181" width="11.9" height="15.0" fill="rgb(245,172,16)" rx="2" ry="2" />
<text  x="756.56" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,518 us., 0.02%)</title><rect x="731.0" y="181" width="0.3" height="15.0" fill="rgb(231,97,41)" rx="2" ry="2" />
<text  x="733.99" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (314,831 us., 1.65%)</title><rect x="250.7" y="229" width="19.5" height="15.0" fill="rgb(218,156,9)" rx="2" ry="2" />
<text  x="253.72" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (360,417 us., 1.89%)</title><rect x="731.3" y="229" width="22.3" height="15.0" fill="rgb(235,159,32)" rx="2" ry="2" />
<text  x="734.27" y="239.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (360,417 us., 1.89%)</title><rect x="731.3" y="197" width="22.3" height="15.0" fill="rgb(224,72,48)" rx="2" ry="2" />
<text  x="734.27" y="207.5" >t..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (5,254 us., 0.03%)</title><rect x="33.3" y="117" width="0.4" height="15.0" fill="rgb(240,139,6)" rx="2" ry="2" />
<text  x="36.33" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,420,644 us., 23.17%)</title><rect x="916.5" y="149" width="273.5" height="15.0" fill="rgb(229,76,23)" rx="2" ry="2" />
<text  x="919.53" y="159.5" >transformers/models/opt/modeling_opt..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (5,254 us., 0.03%)</title><rect x="33.3" y="101" width="0.4" height="15.0" fill="rgb(222,66,19)" rx="2" ry="2" />
<text  x="36.33" y="111.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,997 us., 0.01%)</title><rect x="730.9" y="181" width="0.1" height="15.0" fill="rgb(251,180,51)" rx="2" ry="2" />
<text  x="733.87" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (4,420,644 us., 23.17%)</title><rect x="916.5" y="229" width="273.5" height="15.0" fill="rgb(230,6,13)" rx="2" ry="2" />
<text  x="919.53" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (124,581 us., 0.65%)</title><rect x="765.5" y="117" width="7.7" height="15.0" fill="rgb(212,75,15)" rx="2" ry="2" />
<text  x="768.46" y="127.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fd835954750&gt; (213,973 us., 1.12%)</title><rect x="781.1" y="261" width="13.2" height="15.0" fill="rgb(234,184,21)" rx="2" ry="2" />
<text  x="784.10" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (4,420,644 us., 23.17%)</title><rect x="916.5" y="261" width="273.5" height="15.0" fill="rgb(246,88,6)" rx="2" ry="2" />
<text  x="919.53" y="271.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (124,581 us., 0.65%)</title><rect x="765.5" y="133" width="7.7" height="15.0" fill="rgb(217,180,34)" rx="2" ry="2" />
<text  x="768.46" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,997 us., 0.01%)</title><rect x="730.9" y="197" width="0.1" height="15.0" fill="rgb(254,193,11)" rx="2" ry="2" />
<text  x="733.87" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (8,226 us., 0.04%)</title><rect x="250.2" y="213" width="0.5" height="15.0" fill="rgb(253,119,42)" rx="2" ry="2" />
<text  x="253.21" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (124,581 us., 0.65%)</title><rect x="765.5" y="149" width="7.7" height="15.0" fill="rgb(219,98,42)" rx="2" ry="2" />
<text  x="768.46" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (5,254 us., 0.03%)</title><rect x="33.3" y="181" width="0.4" height="15.0" fill="rgb(228,179,32)" rx="2" ry="2" />
<text  x="36.33" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,852 us., 0.03%)</title><rect x="916.2" y="213" width="0.3" height="15.0" fill="rgb(214,92,20)" rx="2" ry="2" />
<text  x="919.23" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (757,327 us., 3.97%)</title><rect x="156.1" y="181" width="46.8" height="15.0" fill="rgb(238,79,29)" rx="2" ry="2" />
<text  x="159.10" y="191.5" >torc..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (192,281 us., 1.01%)</title><rect x="753.6" y="117" width="11.9" height="15.0" fill="rgb(252,129,24)" rx="2" ry="2" />
<text  x="756.56" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(40):_forward (192,281 us., 1.01%)</title><rect x="753.6" y="245" width="11.9" height="15.0" fill="rgb(246,77,4)" rx="2" ry="2" />
<text  x="756.56" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,518 us., 0.02%)</title><rect x="731.0" y="117" width="0.3" height="15.0" fill="rgb(226,218,14)" rx="2" ry="2" />
<text  x="733.99" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (128,273 us., 0.67%)</title><rect x="773.2" y="69" width="7.9" height="15.0" fill="rgb(222,104,3)" rx="2" ry="2" />
<text  x="776.16" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (7,447,672 us., 39.04%)</title><rect x="270.2" y="165" width="460.6" height="15.0" fill="rgb(217,185,47)" rx="2" ry="2" />
<text  x="273.19" y="175.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (8,226 us., 0.04%)</title><rect x="250.2" y="181" width="0.5" height="15.0" fill="rgb(218,116,11)" rx="2" ry="2" />
<text  x="253.21" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (5,254 us., 0.03%)</title><rect x="33.3" y="197" width="0.4" height="15.0" fill="rgb(205,181,54)" rx="2" ry="2" />
<text  x="36.33" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (371,339 us., 1.95%)</title><rect x="10.0" y="181" width="23.0" height="15.0" fill="rgb(239,22,54)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >p..</text>
</g>
<g >
<title>nn.Module:_Embedding (5,423 us., 0.03%)</title><rect x="33.0" y="213" width="0.3" height="15.0" fill="rgb(240,49,49)" rx="2" ry="2" />
<text  x="35.99" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (360,417 us., 1.89%)</title><rect x="731.3" y="117" width="22.3" height="15.0" fill="rgb(248,208,39)" rx="2" ry="2" />
<text  x="734.27" y="127.5" >n..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,979,719 us., 10.38%)</title><rect x="33.7" y="85" width="122.4" height="15.0" fill="rgb(212,62,43)" rx="2" ry="2" />
<text  x="36.65" y="95.5" >profiling/utils..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (757,327 us., 3.97%)</title><rect x="156.1" y="149" width="46.8" height="15.0" fill="rgb(233,188,27)" rx="2" ry="2" />
<text  x="159.10" y="159.5" >tran..</text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7fd92a4ba9c0&gt; (1,969,683 us., 10.32%)</title><rect x="794.3" y="261" width="121.9" height="15.0" fill="rgb(250,118,11)" rx="2" ry="2" />
<text  x="797.33" y="271.5" >&lt;built-in_metho..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (4,518 us., 0.02%)</title><rect x="731.0" y="197" width="0.3" height="15.0" fill="rgb(236,141,38)" rx="2" ry="2" />
<text  x="733.99" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (8,226 us., 0.04%)</title><rect x="250.2" y="149" width="0.5" height="15.0" fill="rgb(243,75,54)" rx="2" ry="2" />
<text  x="253.21" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (124,581 us., 0.65%)</title><rect x="765.5" y="101" width="7.7" height="15.0" fill="rgb(245,174,6)" rx="2" ry="2" />
<text  x="768.46" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (128,273 us., 0.67%)</title><rect x="773.2" y="181" width="7.9" height="15.0" fill="rgb(237,69,40)" rx="2" ry="2" />
<text  x="776.16" y="191.5" ></text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7fd835fb14b0&gt; (11,274,187 us., 59.10%)</title><rect x="33.7" y="261" width="697.3" height="15.0" fill="rgb(222,223,1)" rx="2" ry="2" />
<text  x="36.65" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7fd835fb14b0&gt;</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,969,683 us., 10.32%)</title><rect x="794.3" y="117" width="121.9" height="15.0" fill="rgb(215,25,26)" rx="2" ry="2" />
<text  x="797.33" y="127.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_W8A8BFP32OFP32Linear (252,854 us., 1.33%)</title><rect x="765.5" y="213" width="15.6" height="15.0" fill="rgb(213,76,10)" rx="2" ry="2" />
<text  x="768.46" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,852 us., 0.03%)</title><rect x="916.2" y="181" width="0.3" height="15.0" fill="rgb(254,213,51)" rx="2" ry="2" />
<text  x="919.23" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(69):__shape (314,831 us., 1.65%)</title><rect x="250.7" y="245" width="19.5" height="15.0" fill="rgb(234,166,33)" rx="2" ry="2" />
<text  x="253.72" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (192,281 us., 1.01%)</title><rect x="753.6" y="197" width="11.9" height="15.0" fill="rgb(222,185,16)" rx="2" ry="2" />
<text  x="756.56" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (360,417 us., 1.89%)</title><rect x="731.3" y="165" width="22.3" height="15.0" fill="rgb(224,177,18)" rx="2" ry="2" />
<text  x="734.27" y="175.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (213,973 us., 1.12%)</title><rect x="781.1" y="85" width="13.2" height="15.0" fill="rgb(223,202,4)" rx="2" ry="2" />
<text  x="784.10" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,969,683 us., 10.32%)</title><rect x="794.3" y="213" width="121.9" height="15.0" fill="rgb(248,114,1)" rx="2" ry="2" />
<text  x="797.33" y="223.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (124,581 us., 0.65%)</title><rect x="765.5" y="197" width="7.7" height="15.0" fill="rgb(247,196,44)" rx="2" ry="2" />
<text  x="768.46" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,969,683 us., 10.32%)</title><rect x="794.3" y="181" width="121.9" height="15.0" fill="rgb(214,36,11)" rx="2" ry="2" />
<text  x="797.33" y="191.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (764,115 us., 4.01%)</title><rect x="202.9" y="245" width="47.3" height="15.0" fill="rgb(228,223,49)" rx="2" ry="2" />
<text  x="205.95" y="255.5" >torc..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (5,423 us., 0.03%)</title><rect x="33.0" y="133" width="0.3" height="15.0" fill="rgb(219,60,24)" rx="2" ry="2" />
<text  x="35.99" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (7,447,672 us., 39.04%)</title><rect x="270.2" y="197" width="460.6" height="15.0" fill="rgb(228,3,2)" rx="2" ry="2" />
<text  x="273.19" y="207.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (5,254 us., 0.03%)</title><rect x="33.3" y="213" width="0.4" height="15.0" fill="rgb(251,114,52)" rx="2" ry="2" />
<text  x="36.33" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (371,339 us., 1.95%)</title><rect x="10.0" y="261" width="23.0" height="15.0" fill="rgb(212,111,51)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,969,683 us., 10.32%)</title><rect x="794.3" y="133" width="121.9" height="15.0" fill="rgb(236,83,18)" rx="2" ry="2" />
<text  x="797.33" y="143.5" >transformers/mo..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (757,327 us., 3.97%)</title><rect x="156.1" y="117" width="46.8" height="15.0" fill="rgb(247,14,51)" rx="2" ry="2" />
<text  x="159.10" y="127.5" >prof..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (360,417 us., 1.89%)</title><rect x="731.3" y="85" width="22.3" height="15.0" fill="rgb(213,120,14)" rx="2" ry="2" />
<text  x="734.27" y="95.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (5,423 us., 0.03%)</title><rect x="33.0" y="165" width="0.3" height="15.0" fill="rgb(207,211,47)" rx="2" ry="2" />
<text  x="35.99" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7fd92a4ba9c0&gt; (10,677 us., 0.06%)</title><rect x="33.0" y="261" width="0.7" height="15.0" fill="rgb(227,67,36)" rx="2" ry="2" />
<text  x="35.99" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (314,831 us., 1.65%)</title><rect x="250.7" y="69" width="19.5" height="15.0" fill="rgb(253,3,49)" rx="2" ry="2" />
<text  x="253.72" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (192,281 us., 1.01%)</title><rect x="753.6" y="69" width="11.9" height="15.0" fill="rgb(229,126,49)" rx="2" ry="2" />
<text  x="756.56" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (8,226 us., 0.04%)</title><rect x="250.2" y="245" width="0.5" height="15.0" fill="rgb(245,67,44)" rx="2" ry="2" />
<text  x="253.21" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,969,683 us., 10.32%)</title><rect x="794.3" y="197" width="121.9" height="15.0" fill="rgb(233,199,48)" rx="2" ry="2" />
<text  x="797.33" y="207.5" >torch_int/nn/op..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (360,417 us., 1.89%)</title><rect x="731.3" y="149" width="22.3" height="15.0" fill="rgb(229,70,21)" rx="2" ry="2" />
<text  x="734.27" y="159.5" >n..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (213,973 us., 1.12%)</title><rect x="781.1" y="213" width="13.2" height="15.0" fill="rgb(217,206,49)" rx="2" ry="2" />
<text  x="784.10" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fd835954810&gt; (192,281 us., 1.01%)</title><rect x="753.6" y="261" width="11.9" height="15.0" fill="rgb(226,224,2)" rx="2" ry="2" />
<text  x="756.56" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (4,420,644 us., 23.17%)</title><rect x="916.5" y="213" width="273.5" height="15.0" fill="rgb(205,176,33)" rx="2" ry="2" />
<text  x="919.53" y="223.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (8,226 us., 0.04%)</title><rect x="250.2" y="165" width="0.5" height="15.0" fill="rgb(209,103,52)" rx="2" ry="2" />
<text  x="253.21" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (5,254 us., 0.03%)</title><rect x="33.3" y="133" width="0.4" height="15.0" fill="rgb(243,133,16)" rx="2" ry="2" />
<text  x="36.33" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (5,423 us., 0.03%)</title><rect x="33.0" y="149" width="0.3" height="15.0" fill="rgb(232,80,7)" rx="2" ry="2" />
<text  x="35.99" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (5,423 us., 0.03%)</title><rect x="33.0" y="197" width="0.3" height="15.0" fill="rgb(226,36,17)" rx="2" ry="2" />
<text  x="35.99" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (192,281 us., 1.01%)</title><rect x="753.6" y="213" width="11.9" height="15.0" fill="rgb(212,3,53)" rx="2" ry="2" />
<text  x="756.56" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (213,973 us., 1.12%)</title><rect x="781.1" y="229" width="13.2" height="15.0" fill="rgb(230,124,51)" rx="2" ry="2" />
<text  x="784.10" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,979,719 us., 10.38%)</title><rect x="33.7" y="149" width="122.4" height="15.0" fill="rgb(231,192,13)" rx="2" ry="2" />
<text  x="36.65" y="159.5" >torch_int/nn/op..</text>
</g>
<g >
<title>nn.Module:_LayerNorm (4,518 us., 0.02%)</title><rect x="731.0" y="213" width="0.3" height="15.0" fill="rgb(211,29,35)" rx="2" ry="2" />
<text  x="733.99" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (7,447,672 us., 39.04%)</title><rect x="270.2" y="101" width="460.6" height="15.0" fill="rgb(247,22,8)" rx="2" ry="2" />
<text  x="273.19" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,969,683 us., 10.32%)</title><rect x="794.3" y="165" width="121.9" height="15.0" fill="rgb(241,198,11)" rx="2" ry="2" />
<text  x="797.33" y="175.5" >torch_int/nn/op..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,997 us., 0.01%)</title><rect x="730.9" y="165" width="0.1" height="15.0" fill="rgb(219,80,34)" rx="2" ry="2" />
<text  x="733.87" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (5,254 us., 0.03%)</title><rect x="33.3" y="165" width="0.4" height="15.0" fill="rgb(231,57,36)" rx="2" ry="2" />
<text  x="36.33" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,979,719 us., 10.38%)</title><rect x="33.7" y="181" width="122.4" height="15.0" fill="rgb(219,118,35)" rx="2" ry="2" />
<text  x="36.65" y="191.5" >torch_int/nn/op..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,969,683 us., 10.32%)</title><rect x="794.3" y="229" width="121.9" height="15.0" fill="rgb(249,95,27)" rx="2" ry="2" />
<text  x="797.33" y="239.5" >torch/autograd/..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (213,973 us., 1.12%)</title><rect x="781.1" y="197" width="13.2" height="15.0" fill="rgb(229,206,22)" rx="2" ry="2" />
<text  x="784.10" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (213,973 us., 1.12%)</title><rect x="781.1" y="133" width="13.2" height="15.0" fill="rgb(236,1,3)" rx="2" ry="2" />
<text  x="784.10" y="143.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,997 us., 0.01%)</title><rect x="730.9" y="149" width="0.1" height="15.0" fill="rgb(219,43,25)" rx="2" ry="2" />
<text  x="733.87" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (128,273 us., 0.67%)</title><rect x="773.2" y="37" width="7.9" height="15.0" fill="rgb(238,27,24)" rx="2" ry="2" />
<text  x="776.16" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (314,831 us., 1.65%)</title><rect x="250.7" y="165" width="19.5" height="15.0" fill="rgb(249,5,0)" rx="2" ry="2" />
<text  x="253.72" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(225):_forward (252,854 us., 1.33%)</title><rect x="765.5" y="245" width="15.6" height="15.0" fill="rgb(235,175,7)" rx="2" ry="2" />
<text  x="768.46" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,852 us., 0.03%)</title><rect x="916.2" y="245" width="0.3" height="15.0" fill="rgb(252,73,41)" rx="2" ry="2" />
<text  x="919.23" y="255.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (360,417 us., 1.89%)</title><rect x="731.3" y="101" width="22.3" height="15.0" fill="rgb(245,77,7)" rx="2" ry="2" />
<text  x="734.27" y="111.5" >p..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,420,644 us., 23.17%)</title><rect x="916.5" y="117" width="273.5" height="15.0" fill="rgb(246,99,37)" rx="2" ry="2" />
<text  x="919.53" y="127.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,969,683 us., 10.32%)</title><rect x="794.3" y="149" width="121.9" height="15.0" fill="rgb(208,84,8)" rx="2" ry="2" />
<text  x="797.33" y="159.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (360,417 us., 1.89%)</title><rect x="731.3" y="181" width="22.3" height="15.0" fill="rgb(245,48,39)" rx="2" ry="2" />
<text  x="734.27" y="191.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,979,719 us., 10.38%)</title><rect x="33.7" y="69" width="122.4" height="15.0" fill="rgb(217,126,13)" rx="2" ry="2" />
<text  x="36.65" y="79.5" >torch/autograd/..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (314,831 us., 1.65%)</title><rect x="250.7" y="149" width="19.5" height="15.0" fill="rgb(231,109,7)" rx="2" ry="2" />
<text  x="253.72" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,518 us., 0.02%)</title><rect x="731.0" y="149" width="0.3" height="15.0" fill="rgb(220,51,0)" rx="2" ry="2" />
<text  x="733.99" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,979,719 us., 10.38%)</title><rect x="33.7" y="101" width="122.4" height="15.0" fill="rgb(222,103,30)" rx="2" ry="2" />
<text  x="36.65" y="111.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (128,273 us., 0.67%)</title><rect x="773.2" y="101" width="7.9" height="15.0" fill="rgb(247,217,48)" rx="2" ry="2" />
<text  x="776.16" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (757,327 us., 3.97%)</title><rect x="156.1" y="165" width="46.8" height="15.0" fill="rgb(235,137,54)" rx="2" ry="2" />
<text  x="159.10" y="175.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (192,281 us., 1.01%)</title><rect x="753.6" y="165" width="11.9" height="15.0" fill="rgb(228,87,43)" rx="2" ry="2" />
<text  x="756.56" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (128,273 us., 0.67%)</title><rect x="773.2" y="149" width="7.9" height="15.0" fill="rgb(249,183,21)" rx="2" ry="2" />
<text  x="776.16" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (1,997 us., 0.01%)</title><rect x="730.9" y="229" width="0.1" height="15.0" fill="rgb(210,81,1)" rx="2" ry="2" />
<text  x="733.87" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (314,831 us., 1.65%)</title><rect x="250.7" y="181" width="19.5" height="15.0" fill="rgb(218,165,37)" rx="2" ry="2" />
<text  x="253.72" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (757,327 us., 3.97%)</title><rect x="156.1" y="245" width="46.8" height="15.0" fill="rgb(220,58,44)" rx="2" ry="2" />
<text  x="159.10" y="255.5" >torc..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (7,447,672 us., 39.04%)</title><rect x="270.2" y="245" width="460.6" height="15.0" fill="rgb(205,227,29)" rx="2" ry="2" />
<text  x="273.19" y="255.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (7,447,672 us., 39.04%)</title><rect x="270.2" y="181" width="460.6" height="15.0" fill="rgb(246,47,19)" rx="2" ry="2" />
<text  x="273.19" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,997 us., 0.01%)</title><rect x="730.9" y="213" width="0.1" height="15.0" fill="rgb(207,22,39)" rx="2" ry="2" />
<text  x="733.87" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (213,973 us., 1.12%)</title><rect x="781.1" y="181" width="13.2" height="15.0" fill="rgb(206,152,5)" rx="2" ry="2" />
<text  x="784.10" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (764,115 us., 4.01%)</title><rect x="202.9" y="165" width="47.3" height="15.0" fill="rgb(231,54,33)" rx="2" ry="2" />
<text  x="205.95" y="175.5" >nn.M..</text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (4,518 us., 0.02%)</title><rect x="731.0" y="229" width="0.3" height="15.0" fill="rgb(236,53,21)" rx="2" ry="2" />
<text  x="733.99" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,852 us., 0.03%)</title><rect x="916.2" y="229" width="0.3" height="15.0" fill="rgb(242,227,20)" rx="2" ry="2" />
<text  x="919.23" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (314,831 us., 1.65%)</title><rect x="250.7" y="197" width="19.5" height="15.0" fill="rgb(231,128,16)" rx="2" ry="2" />
<text  x="253.72" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (128,273 us., 0.67%)</title><rect x="773.2" y="165" width="7.9" height="15.0" fill="rgb(226,153,17)" rx="2" ry="2" />
<text  x="776.16" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(90):_forward (213,973 us., 1.12%)</title><rect x="781.1" y="245" width="13.2" height="15.0" fill="rgb(254,106,7)" rx="2" ry="2" />
<text  x="784.10" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (128,273 us., 0.67%)</title><rect x="773.2" y="117" width="7.9" height="15.0" fill="rgb(248,4,34)" rx="2" ry="2" />
<text  x="776.16" y="127.5" ></text>
</g>
</g>
</svg>
