<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>nn.Module:_Int8OPTForCausalLM (31,636 us., 0.64%)</title><rect x="691.5" y="69" width="7.5" height="15.0" fill="rgb(250,226,15)" rx="2" ry="2" />
<text  x="694.48" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (275,061 us., 5.58%)</title><rect x="48.4" y="165" width="65.8" height="15.0" fill="rgb(215,122,23)" rx="2" ry="2" />
<text  x="51.39" y="175.5" >torch_i..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (57,567 us., 1.17%)</title><rect x="713.8" y="149" width="13.7" height="15.0" fill="rgb(252,123,40)" rx="2" ry="2" />
<text  x="716.77" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (479,239 us., 9.72%)</title><rect x="115.3" y="181" width="114.7" height="15.0" fill="rgb(213,5,11)" rx="2" ry="2" />
<text  x="118.32" y="191.5" >torch_int/nn/o..</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f3d1d104f00&gt; (61,536 us., 1.25%)</title><rect x="699.0" y="261" width="14.8" height="15.0" fill="rgb(222,218,47)" rx="2" ry="2" />
<text  x="702.05" y="271.5" ></text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7f3d1d767450&gt; (2,373,089 us., 48.12%)</title><rect x="115.3" y="261" width="567.8" height="15.0" fill="rgb(215,94,15)" rx="2" ry="2" />
<text  x="118.32" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7f3d1d767450&gt;</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,709 us., 0.08%)</title><rect x="231.0" y="197" width="0.8" height="15.0" fill="rgb(212,19,18)" rx="2" ry="2" />
<text  x="233.96" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (33,610 us., 0.68%)</title><rect x="683.4" y="133" width="8.1" height="15.0" fill="rgb(249,85,44)" rx="2" ry="2" />
<text  x="686.44" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (80,396 us., 1.63%)</title><rect x="231.8" y="197" width="19.3" height="15.0" fill="rgb(214,103,49)" rx="2" ry="2" />
<text  x="234.85" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,451,232 us., 29.43%)</title><rect x="842.6" y="165" width="347.3" height="15.0" fill="rgb(229,99,37)" rx="2" ry="2" />
<text  x="845.64" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>&lt;built-in_method_add_of_type_object_at_0x7f3e11c719c0&gt; (2,463 us., 0.05%)</title><rect x="47.4" y="261" width="0.6" height="15.0" fill="rgb(211,216,3)" rx="2" ry="2" />
<text  x="50.42" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (2,463 us., 0.05%)</title><rect x="47.4" y="245" width="0.6" height="15.0" fill="rgb(234,29,14)" rx="2" ry="2" />
<text  x="50.42" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (61,536 us., 1.25%)</title><rect x="699.0" y="229" width="14.8" height="15.0" fill="rgb(242,178,8)" rx="2" ry="2" />
<text  x="702.05" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (1,600 us., 0.03%)</title><rect x="48.0" y="229" width="0.4" height="15.0" fill="rgb(242,127,43)" rx="2" ry="2" />
<text  x="51.01" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,582 us., 0.07%)</title><rect x="841.8" y="181" width="0.8" height="15.0" fill="rgb(205,177,38)" rx="2" ry="2" />
<text  x="844.78" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,803,945 us., 36.58%)</title><rect x="251.1" y="117" width="431.6" height="15.0" fill="rgb(206,12,7)" rx="2" ry="2" />
<text  x="254.08" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (4,691 us., 0.10%)</title><rect x="114.2" y="229" width="1.1" height="15.0" fill="rgb(209,69,23)" rx="2" ry="2" />
<text  x="117.20" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (1,803,945 us., 36.58%)</title><rect x="251.1" y="197" width="431.6" height="15.0" fill="rgb(206,91,10)" rx="2" ry="2" />
<text  x="254.08" y="207.5" >torch_int/nn/opt.py(183):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,188 us., 0.04%)</title><rect x="114.8" y="117" width="0.5" height="15.0" fill="rgb(237,185,20)" rx="2" ry="2" />
<text  x="117.80" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (80,396 us., 1.63%)</title><rect x="231.8" y="69" width="19.3" height="15.0" fill="rgb(224,143,14)" rx="2" ry="2" />
<text  x="234.85" y="79.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,394 us., 0.03%)</title><rect x="683.1" y="133" width="0.3" height="15.0" fill="rgb(251,109,50)" rx="2" ry="2" />
<text  x="686.10" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,451,232 us., 29.43%)</title><rect x="842.6" y="245" width="347.3" height="15.0" fill="rgb(224,134,6)" rx="2" ry="2" />
<text  x="845.64" y="255.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,582 us., 0.07%)</title><rect x="841.8" y="197" width="0.8" height="15.0" fill="rgb(231,149,18)" rx="2" ry="2" />
<text  x="844.78" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,188 us., 0.04%)</title><rect x="114.8" y="101" width="0.5" height="15.0" fill="rgb(220,210,28)" rx="2" ry="2" />
<text  x="117.80" y="111.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (605 us., 0.01%)</title><rect x="841.5" y="245" width="0.2" height="15.0" fill="rgb(215,32,39)" rx="2" ry="2" />
<text  x="844.54" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (33,610 us., 0.68%)</title><rect x="683.4" y="149" width="8.1" height="15.0" fill="rgb(234,131,24)" rx="2" ry="2" />
<text  x="686.44" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (479,239 us., 9.72%)</title><rect x="115.3" y="149" width="114.7" height="15.0" fill="rgb(225,37,52)" rx="2" ry="2" />
<text  x="118.32" y="159.5" >torch_int/nn/o..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (275,061 us., 5.58%)</title><rect x="48.4" y="197" width="65.8" height="15.0" fill="rgb(208,62,15)" rx="2" ry="2" />
<text  x="51.39" y="207.5" >torch_i..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (2,188 us., 0.04%)</title><rect x="114.8" y="197" width="0.5" height="15.0" fill="rgb(224,25,5)" rx="2" ry="2" />
<text  x="117.80" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,463 us., 0.05%)</title><rect x="47.4" y="197" width="0.6" height="15.0" fill="rgb(221,174,44)" rx="2" ry="2" />
<text  x="50.42" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,803,945 us., 36.58%)</title><rect x="251.1" y="165" width="431.6" height="15.0" fill="rgb(254,211,38)" rx="2" ry="2" />
<text  x="254.08" y="175.5" >torch_int/nn/opt.py(321):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,451,232 us., 29.43%)</title><rect x="842.6" y="181" width="347.3" height="15.0" fill="rgb(251,69,36)" rx="2" ry="2" />
<text  x="845.64" y="191.5" >torch_int/nn/opt.py(321):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (598 us., 0.01%)</title><rect x="1189.9" y="197" width="0.1" height="15.0" fill="rgb(234,80,12)" rx="2" ry="2" />
<text  x="1192.86" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,600 us., 0.03%)</title><rect x="48.0" y="165" width="0.4" height="15.0" fill="rgb(227,181,50)" rx="2" ry="2" />
<text  x="51.01" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (275,061 us., 5.58%)</title><rect x="48.4" y="181" width="65.8" height="15.0" fill="rgb(230,36,51)" rx="2" ry="2" />
<text  x="51.39" y="191.5" >nn.Modu..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,394 us., 0.03%)</title><rect x="683.1" y="181" width="0.3" height="15.0" fill="rgb(242,18,41)" rx="2" ry="2" />
<text  x="686.10" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (57,567 us., 1.17%)</title><rect x="713.8" y="85" width="13.7" height="15.0" fill="rgb(222,155,21)" rx="2" ry="2" />
<text  x="716.77" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (3,709 us., 0.08%)</title><rect x="231.0" y="245" width="0.8" height="15.0" fill="rgb(227,24,33)" rx="2" ry="2" />
<text  x="233.96" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (80,396 us., 1.63%)</title><rect x="231.8" y="149" width="19.3" height="15.0" fill="rgb(248,106,20)" rx="2" ry="2" />
<text  x="234.85" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,432 us., 0.03%)</title><rect x="682.8" y="133" width="0.3" height="15.0" fill="rgb(239,87,11)" rx="2" ry="2" />
<text  x="685.76" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,600 us., 0.03%)</title><rect x="48.0" y="197" width="0.4" height="15.0" fill="rgb(215,225,8)" rx="2" ry="2" />
<text  x="51.01" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (475,972 us., 9.65%)</title><rect x="727.5" y="117" width="113.9" height="15.0" fill="rgb(241,191,50)" rx="2" ry="2" />
<text  x="730.54" y="127.5" >nn.Module:_Int..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (475,972 us., 9.65%)</title><rect x="727.5" y="133" width="113.9" height="15.0" fill="rgb(246,121,33)" rx="2" ry="2" />
<text  x="730.54" y="143.5" >transformers/m..</text>
</g>
<g >
<title>torch_int/nn/opt.py(300):__prepare_decoder_attention_mask (4,066 us., 0.08%)</title><rect x="230.0" y="245" width="1.0" height="15.0" fill="rgb(217,129,28)" rx="2" ry="2" />
<text  x="232.98" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (275,061 us., 5.58%)</title><rect x="48.4" y="149" width="65.8" height="15.0" fill="rgb(222,163,46)" rx="2" ry="2" />
<text  x="51.39" y="159.5" >nn.Modu..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (475,972 us., 9.65%)</title><rect x="727.5" y="181" width="113.9" height="15.0" fill="rgb(230,100,6)" rx="2" ry="2" />
<text  x="730.54" y="191.5" >nn.Module:_Int..</text>
</g>
<g >
<title>nn.Module:_Linear (156,394 us., 3.17%)</title><rect x="10.0" y="229" width="37.4" height="15.0" fill="rgb(244,11,27)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >nn...</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (1,451,232 us., 29.43%)</title><rect x="842.6" y="213" width="347.3" height="15.0" fill="rgb(235,195,20)" rx="2" ry="2" />
<text  x="845.64" y="223.5" >torch_int/nn/opt.py(183):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (57,567 us., 1.17%)</title><rect x="713.8" y="229" width="13.7" height="15.0" fill="rgb(215,124,18)" rx="2" ry="2" />
<text  x="716.77" y="239.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (156,394 us., 3.17%)</title><rect x="10.0" y="261" width="37.4" height="15.0" fill="rgb(214,100,30)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;bu..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (61,536 us., 1.25%)</title><rect x="699.0" y="181" width="14.8" height="15.0" fill="rgb(220,10,9)" rx="2" ry="2" />
<text  x="702.05" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (156,394 us., 3.17%)</title><rect x="10.0" y="181" width="37.4" height="15.0" fill="rgb(208,81,15)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >pro..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,432 us., 0.03%)</title><rect x="682.8" y="197" width="0.3" height="15.0" fill="rgb(210,96,35)" rx="2" ry="2" />
<text  x="685.76" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (31,636 us., 0.64%)</title><rect x="691.5" y="37" width="7.5" height="15.0" fill="rgb(219,46,5)" rx="2" ry="2" />
<text  x="694.48" y="47.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,503 us., 0.05%)</title><rect x="114.2" y="117" width="0.6" height="15.0" fill="rgb(217,101,10)" rx="2" ry="2" />
<text  x="117.20" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (61,536 us., 1.25%)</title><rect x="699.0" y="133" width="14.8" height="15.0" fill="rgb(236,172,35)" rx="2" ry="2" />
<text  x="702.05" y="143.5" ></text>
</g>
<g >
<title>&lt;built-in_method_dq_add_layernorm_q_of_PyCapsule_object_at_0x7f3d1d104f30&gt; (275,061 us., 5.58%)</title><rect x="48.4" y="261" width="65.8" height="15.0" fill="rgb(230,84,28)" rx="2" ry="2" />
<text  x="51.39" y="271.5" >&lt;built-..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,463 us., 0.05%)</title><rect x="47.4" y="229" width="0.6" height="15.0" fill="rgb(239,192,13)" rx="2" ry="2" />
<text  x="50.42" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,066 us., 0.08%)</title><rect x="230.0" y="181" width="1.0" height="15.0" fill="rgb(206,43,11)" rx="2" ry="2" />
<text  x="232.98" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,394 us., 0.03%)</title><rect x="683.1" y="117" width="0.3" height="15.0" fill="rgb(208,124,33)" rx="2" ry="2" />
<text  x="686.10" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,709 us., 0.08%)</title><rect x="231.0" y="165" width="0.8" height="15.0" fill="rgb(228,208,32)" rx="2" ry="2" />
<text  x="233.96" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (80,396 us., 1.63%)</title><rect x="231.8" y="101" width="19.3" height="15.0" fill="rgb(223,181,46)" rx="2" ry="2" />
<text  x="234.85" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (475,972 us., 9.65%)</title><rect x="727.5" y="213" width="113.9" height="15.0" fill="rgb(249,11,45)" rx="2" ry="2" />
<text  x="730.54" y="223.5" >nn.Module:_Int..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (31,636 us., 0.64%)</title><rect x="691.5" y="85" width="7.5" height="15.0" fill="rgb(215,86,2)" rx="2" ry="2" />
<text  x="694.48" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (605 us., 0.01%)</title><rect x="841.5" y="165" width="0.2" height="15.0" fill="rgb(217,5,15)" rx="2" ry="2" />
<text  x="844.54" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (475,972 us., 9.65%)</title><rect x="727.5" y="197" width="113.9" height="15.0" fill="rgb(234,140,41)" rx="2" ry="2" />
<text  x="730.54" y="207.5" >torch_int/nn/o..</text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (1,394 us., 0.03%)</title><rect x="683.1" y="245" width="0.3" height="15.0" fill="rgb(242,152,45)" rx="2" ry="2" />
<text  x="686.10" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,803,945 us., 36.58%)</title><rect x="251.1" y="213" width="431.6" height="15.0" fill="rgb(235,116,53)" rx="2" ry="2" />
<text  x="254.08" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7f3e11c719c0&gt; (475,972 us., 9.65%)</title><rect x="727.5" y="261" width="113.9" height="15.0" fill="rgb(237,76,52)" rx="2" ry="2" />
<text  x="730.54" y="271.5" >&lt;built-in_meth..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (156,394 us., 3.17%)</title><rect x="10.0" y="197" width="37.4" height="15.0" fill="rgb(229,155,29)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >nn...</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (479,239 us., 9.72%)</title><rect x="115.3" y="117" width="114.7" height="15.0" fill="rgb(244,206,46)" rx="2" ry="2" />
<text  x="118.32" y="127.5" >transformers/m..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (275,061 us., 5.58%)</title><rect x="48.4" y="133" width="65.8" height="15.0" fill="rgb(245,194,9)" rx="2" ry="2" />
<text  x="51.39" y="143.5" >transfo..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (61,536 us., 1.25%)</title><rect x="699.0" y="85" width="14.8" height="15.0" fill="rgb(233,25,12)" rx="2" ry="2" />
<text  x="702.05" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (31,636 us., 0.64%)</title><rect x="691.5" y="197" width="7.5" height="15.0" fill="rgb(236,91,39)" rx="2" ry="2" />
<text  x="694.48" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,709 us., 0.08%)</title><rect x="231.0" y="181" width="0.8" height="15.0" fill="rgb(236,53,6)" rx="2" ry="2" />
<text  x="233.96" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,803,945 us., 36.58%)</title><rect x="251.1" y="101" width="431.6" height="15.0" fill="rgb(211,187,25)" rx="2" ry="2" />
<text  x="254.08" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,803,945 us., 36.58%)</title><rect x="251.1" y="181" width="431.6" height="15.0" fill="rgb(219,223,13)" rx="2" ry="2" />
<text  x="254.08" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (80,396 us., 1.63%)</title><rect x="231.8" y="117" width="19.3" height="15.0" fill="rgb(235,180,37)" rx="2" ry="2" />
<text  x="234.85" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (598 us., 0.01%)</title><rect x="1189.9" y="261" width="0.1" height="15.0" fill="rgb(250,91,12)" rx="2" ry="2" />
<text  x="1192.86" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (3,582 us., 0.07%)</title><rect x="841.8" y="261" width="0.8" height="15.0" fill="rgb(238,119,53)" rx="2" ry="2" />
<text  x="844.78" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (598 us., 0.01%)</title><rect x="1189.9" y="229" width="0.1" height="15.0" fill="rgb(243,68,43)" rx="2" ry="2" />
<text  x="1192.86" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,432 us., 0.03%)</title><rect x="682.8" y="165" width="0.3" height="15.0" fill="rgb(229,80,47)" rx="2" ry="2" />
<text  x="685.76" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (31,636 us., 0.64%)</title><rect x="691.5" y="181" width="7.5" height="15.0" fill="rgb(246,154,7)" rx="2" ry="2" />
<text  x="694.48" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (31,636 us., 0.64%)</title><rect x="691.5" y="133" width="7.5" height="15.0" fill="rgb(206,166,30)" rx="2" ry="2" />
<text  x="694.48" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (80,396 us., 1.63%)</title><rect x="231.8" y="229" width="19.3" height="15.0" fill="rgb(211,133,7)" rx="2" ry="2" />
<text  x="234.85" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (57,567 us., 1.17%)</title><rect x="713.8" y="165" width="13.7" height="15.0" fill="rgb(245,63,51)" rx="2" ry="2" />
<text  x="716.77" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,503 us., 0.05%)</title><rect x="114.2" y="181" width="0.6" height="15.0" fill="rgb(211,147,17)" rx="2" ry="2" />
<text  x="117.20" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (2,188 us., 0.04%)</title><rect x="114.8" y="181" width="0.5" height="15.0" fill="rgb(229,188,33)" rx="2" ry="2" />
<text  x="117.80" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,394 us., 0.03%)</title><rect x="683.1" y="165" width="0.3" height="15.0" fill="rgb(251,142,16)" rx="2" ry="2" />
<text  x="686.10" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,709 us., 0.08%)</title><rect x="231.0" y="213" width="0.8" height="15.0" fill="rgb(238,4,40)" rx="2" ry="2" />
<text  x="233.96" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (598 us., 0.01%)</title><rect x="1189.9" y="165" width="0.1" height="15.0" fill="rgb(218,101,37)" rx="2" ry="2" />
<text  x="1192.86" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,432 us., 0.03%)</title><rect x="682.8" y="149" width="0.3" height="15.0" fill="rgb(247,127,39)" rx="2" ry="2" />
<text  x="685.76" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (475,972 us., 9.65%)</title><rect x="727.5" y="101" width="113.9" height="15.0" fill="rgb(208,68,36)" rx="2" ry="2" />
<text  x="730.54" y="111.5" >profiling/util..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (33,610 us., 0.68%)</title><rect x="683.4" y="181" width="8.1" height="15.0" fill="rgb(244,37,10)" rx="2" ry="2" />
<text  x="686.44" y="191.5" ></text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7f3e11c719c0&gt; (4,691 us., 0.10%)</title><rect x="114.2" y="261" width="1.1" height="15.0" fill="rgb(231,148,30)" rx="2" ry="2" />
<text  x="117.20" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (475,972 us., 9.65%)</title><rect x="727.5" y="165" width="113.9" height="15.0" fill="rgb(246,78,22)" rx="2" ry="2" />
<text  x="730.54" y="175.5" >torch_int/nn/o..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (57,567 us., 1.17%)</title><rect x="713.8" y="101" width="13.7" height="15.0" fill="rgb(215,219,31)" rx="2" ry="2" />
<text  x="716.77" y="111.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,432 us., 0.03%)</title><rect x="682.8" y="181" width="0.3" height="15.0" fill="rgb(233,213,19)" rx="2" ry="2" />
<text  x="685.76" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B32O32LinearWithScaling (65,246 us., 1.32%)</title><rect x="683.4" y="213" width="15.6" height="15.0" fill="rgb(218,208,19)" rx="2" ry="2" />
<text  x="686.44" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,066 us., 0.08%)</title><rect x="230.0" y="149" width="1.0" height="15.0" fill="rgb(224,154,47)" rx="2" ry="2" />
<text  x="232.98" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,600 us., 0.03%)</title><rect x="48.0" y="213" width="0.4" height="15.0" fill="rgb(245,29,15)" rx="2" ry="2" />
<text  x="51.01" y="223.5" ></text>
</g>
<g >
<title>torch_int/functional/fused.py(24):_dq_add_layernorm_q_cpp (275,061 us., 5.58%)</title><rect x="48.4" y="245" width="65.8" height="15.0" fill="rgb(231,60,45)" rx="2" ry="2" />
<text  x="51.39" y="255.5" >torch_i..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (80,396 us., 1.63%)</title><rect x="231.8" y="181" width="19.3" height="15.0" fill="rgb(231,192,0)" rx="2" ry="2" />
<text  x="234.85" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,803,945 us., 36.58%)</title><rect x="251.1" y="133" width="431.6" height="15.0" fill="rgb(220,27,52)" rx="2" ry="2" />
<text  x="254.08" y="143.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (479,239 us., 9.72%)</title><rect x="115.3" y="197" width="114.7" height="15.0" fill="rgb(242,90,33)" rx="2" ry="2" />
<text  x="118.32" y="207.5" >nn.Module:_Int..</text>
</g>
<g >
<title>nn.Module:_DQ_Add_LayerNorm_Q (275,061 us., 5.58%)</title><rect x="48.4" y="213" width="65.8" height="15.0" fill="rgb(210,45,40)" rx="2" ry="2" />
<text  x="51.39" y="223.5" >nn.Modu..</text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (1,451,232 us., 29.43%)</title><rect x="842.6" y="261" width="347.3" height="15.0" fill="rgb(226,169,32)" rx="2" ry="2" />
<text  x="845.64" y="271.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (61,536 us., 1.25%)</title><rect x="699.0" y="69" width="14.8" height="15.0" fill="rgb(216,52,0)" rx="2" ry="2" />
<text  x="702.05" y="79.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (61,536 us., 1.25%)</title><rect x="699.0" y="53" width="14.8" height="15.0" fill="rgb(216,29,2)" rx="2" ry="2" />
<text  x="702.05" y="63.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (479,239 us., 9.72%)</title><rect x="115.3" y="85" width="114.7" height="15.0" fill="rgb(234,53,0)" rx="2" ry="2" />
<text  x="118.32" y="95.5" >profiling/util..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (1,432 us., 0.03%)</title><rect x="682.8" y="245" width="0.3" height="15.0" fill="rgb(217,21,23)" rx="2" ry="2" />
<text  x="685.76" y="255.5" ></text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (156,394 us., 3.17%)</title><rect x="10.0" y="245" width="37.4" height="15.0" fill="rgb(224,226,50)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >tor..</text>
</g>
<g >
<title>&lt;built-in_method_cumsum_of_type_object_at_0x7f3e11c719c0&gt; (1,600 us., 0.03%)</title><rect x="48.0" y="261" width="0.4" height="15.0" fill="rgb(244,65,11)" rx="2" ry="2" />
<text  x="51.01" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (61,536 us., 1.25%)</title><rect x="699.0" y="165" width="14.8" height="15.0" fill="rgb(224,38,10)" rx="2" ry="2" />
<text  x="702.05" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,803,945 us., 36.58%)</title><rect x="251.1" y="85" width="431.6" height="15.0" fill="rgb(240,56,38)" rx="2" ry="2" />
<text  x="254.08" y="95.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,709 us., 0.08%)</title><rect x="231.0" y="229" width="0.8" height="15.0" fill="rgb(210,29,8)" rx="2" ry="2" />
<text  x="233.96" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,451,232 us., 29.43%)</title><rect x="842.6" y="133" width="347.3" height="15.0" fill="rgb(253,229,35)" rx="2" ry="2" />
<text  x="845.64" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (61,536 us., 1.25%)</title><rect x="699.0" y="117" width="14.8" height="15.0" fill="rgb(242,204,51)" rx="2" ry="2" />
<text  x="702.05" y="127.5" ></text>
</g>
<g >
<title>all (4,931,925 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(228,54,19)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (31,636 us., 0.64%)</title><rect x="691.5" y="165" width="7.5" height="15.0" fill="rgb(244,122,8)" rx="2" ry="2" />
<text  x="694.48" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (80,396 us., 1.63%)</title><rect x="231.8" y="165" width="19.3" height="15.0" fill="rgb(228,51,26)" rx="2" ry="2" />
<text  x="234.85" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (33,610 us., 0.68%)</title><rect x="683.4" y="117" width="8.1" height="15.0" fill="rgb(205,75,31)" rx="2" ry="2" />
<text  x="686.44" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (475,972 us., 9.65%)</title><rect x="727.5" y="149" width="113.9" height="15.0" fill="rgb(206,24,12)" rx="2" ry="2" />
<text  x="730.54" y="159.5" >nn.Module:_Int..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (57,567 us., 1.17%)</title><rect x="713.8" y="181" width="13.7" height="15.0" fill="rgb(239,143,15)" rx="2" ry="2" />
<text  x="716.77" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (156,394 us., 3.17%)</title><rect x="10.0" y="213" width="37.4" height="15.0" fill="rgb(227,225,35)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >tra..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (598 us., 0.01%)</title><rect x="1189.9" y="245" width="0.1" height="15.0" fill="rgb(210,71,43)" rx="2" ry="2" />
<text  x="1192.86" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (479,239 us., 9.72%)</title><rect x="115.3" y="213" width="114.7" height="15.0" fill="rgb(246,182,53)" rx="2" ry="2" />
<text  x="118.32" y="223.5" >torch/autograd..</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (275,061 us., 5.58%)</title><rect x="48.4" y="229" width="65.8" height="15.0" fill="rgb(224,44,17)" rx="2" ry="2" />
<text  x="51.39" y="239.5" >torch_i..</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (61,536 us., 1.25%)</title><rect x="699.0" y="149" width="14.8" height="15.0" fill="rgb(208,150,38)" rx="2" ry="2" />
<text  x="702.05" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,394 us., 0.03%)</title><rect x="683.1" y="149" width="0.3" height="15.0" fill="rgb(229,161,4)" rx="2" ry="2" />
<text  x="686.10" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,432 us., 0.03%)</title><rect x="682.8" y="213" width="0.3" height="15.0" fill="rgb(214,26,36)" rx="2" ry="2" />
<text  x="685.76" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (475,972 us., 9.65%)</title><rect x="727.5" y="245" width="113.9" height="15.0" fill="rgb(226,226,29)" rx="2" ry="2" />
<text  x="730.54" y="255.5" >torch_int/nn/o..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,451,232 us., 29.43%)</title><rect x="842.6" y="229" width="347.3" height="15.0" fill="rgb(249,44,54)" rx="2" ry="2" />
<text  x="845.64" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (65,246 us., 1.32%)</title><rect x="683.4" y="229" width="15.6" height="15.0" fill="rgb(222,203,40)" rx="2" ry="2" />
<text  x="686.44" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,188 us., 0.04%)</title><rect x="114.8" y="149" width="0.5" height="15.0" fill="rgb(245,131,42)" rx="2" ry="2" />
<text  x="117.80" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (275,061 us., 5.58%)</title><rect x="48.4" y="85" width="65.8" height="15.0" fill="rgb(221,199,39)" rx="2" ry="2" />
<text  x="51.39" y="95.5" >torch/a..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,066 us., 0.08%)</title><rect x="230.0" y="213" width="1.0" height="15.0" fill="rgb(210,132,30)" rx="2" ry="2" />
<text  x="232.98" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (605 us., 0.01%)</title><rect x="841.5" y="213" width="0.2" height="15.0" fill="rgb(215,70,25)" rx="2" ry="2" />
<text  x="844.54" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (80,396 us., 1.63%)</title><rect x="231.8" y="133" width="19.3" height="15.0" fill="rgb(228,20,50)" rx="2" ry="2" />
<text  x="234.85" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (1,600 us., 0.03%)</title><rect x="48.0" y="245" width="0.4" height="15.0" fill="rgb(221,95,38)" rx="2" ry="2" />
<text  x="51.01" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (475,972 us., 9.65%)</title><rect x="727.5" y="229" width="113.9" height="15.0" fill="rgb(244,23,17)" rx="2" ry="2" />
<text  x="730.54" y="239.5" >torch/autograd..</text>
</g>
<g >
<title>torch_int/nn/linear.py(62):_forward (65,246 us., 1.32%)</title><rect x="683.4" y="245" width="15.6" height="15.0" fill="rgb(217,11,37)" rx="2" ry="2" />
<text  x="686.44" y="255.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (479,239 us., 9.72%)</title><rect x="115.3" y="245" width="114.7" height="15.0" fill="rgb(213,62,53)" rx="2" ry="2" />
<text  x="118.32" y="255.5" >torch/nn/funct..</text>
</g>
<g >
<title>torch_int/nn/linear.py(122):_forward (57,567 us., 1.17%)</title><rect x="713.8" y="245" width="13.7" height="15.0" fill="rgb(234,105,12)" rx="2" ry="2" />
<text  x="716.77" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,451,232 us., 29.43%)</title><rect x="842.6" y="149" width="347.3" height="15.0" fill="rgb(231,204,52)" rx="2" ry="2" />
<text  x="845.64" y="159.5" >transformers/models/opt/modeling_opt.py(840):_f..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (33,610 us., 0.68%)</title><rect x="683.4" y="101" width="8.1" height="15.0" fill="rgb(228,72,45)" rx="2" ry="2" />
<text  x="686.44" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (61,536 us., 1.25%)</title><rect x="699.0" y="37" width="14.8" height="15.0" fill="rgb(221,70,4)" rx="2" ry="2" />
<text  x="702.05" y="47.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,582 us., 0.07%)</title><rect x="841.8" y="229" width="0.8" height="15.0" fill="rgb(252,224,12)" rx="2" ry="2" />
<text  x="844.78" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (598 us., 0.01%)</title><rect x="1189.9" y="213" width="0.1" height="15.0" fill="rgb(220,87,10)" rx="2" ry="2" />
<text  x="1192.86" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b32_o32_with_scaling_of_PyCapsule_object_at_0x7f3d1d104ed0&gt; (65,246 us., 1.32%)</title><rect x="683.4" y="261" width="15.6" height="15.0" fill="rgb(209,45,48)" rx="2" ry="2" />
<text  x="686.44" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (275,061 us., 5.58%)</title><rect x="48.4" y="117" width="65.8" height="15.0" fill="rgb(205,13,25)" rx="2" ry="2" />
<text  x="51.39" y="127.5" >nn.Modu..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (479,239 us., 9.72%)</title><rect x="115.3" y="101" width="114.7" height="15.0" fill="rgb(212,71,15)" rx="2" ry="2" />
<text  x="118.32" y="111.5" >nn.Module:_Int..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,582 us., 0.07%)</title><rect x="841.8" y="213" width="0.8" height="15.0" fill="rgb(215,5,6)" rx="2" ry="2" />
<text  x="844.78" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,066 us., 0.08%)</title><rect x="230.0" y="197" width="1.0" height="15.0" fill="rgb(216,63,38)" rx="2" ry="2" />
<text  x="232.98" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,582 us., 0.07%)</title><rect x="841.8" y="245" width="0.8" height="15.0" fill="rgb(235,45,53)" rx="2" ry="2" />
<text  x="844.78" y="255.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f3d1d104e70&gt; (57,567 us., 1.17%)</title><rect x="713.8" y="261" width="13.7" height="15.0" fill="rgb(222,174,42)" rx="2" ry="2" />
<text  x="716.77" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (598 us., 0.01%)</title><rect x="1189.9" y="149" width="0.1" height="15.0" fill="rgb(247,151,22)" rx="2" ry="2" />
<text  x="1192.86" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,503 us., 0.05%)</title><rect x="114.2" y="165" width="0.6" height="15.0" fill="rgb(238,8,17)" rx="2" ry="2" />
<text  x="117.20" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (479,239 us., 9.72%)</title><rect x="115.3" y="165" width="114.7" height="15.0" fill="rgb(236,155,9)" rx="2" ry="2" />
<text  x="118.32" y="175.5" >nn.Module:_Int..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (61,536 us., 1.25%)</title><rect x="699.0" y="101" width="14.8" height="15.0" fill="rgb(236,202,49)" rx="2" ry="2" />
<text  x="702.05" y="111.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,600 us., 0.03%)</title><rect x="48.0" y="181" width="0.4" height="15.0" fill="rgb(252,3,9)" rx="2" ry="2" />
<text  x="51.01" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (61,536 us., 1.25%)</title><rect x="699.0" y="197" width="14.8" height="15.0" fill="rgb(241,211,52)" rx="2" ry="2" />
<text  x="702.05" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,503 us., 0.05%)</title><rect x="114.2" y="149" width="0.6" height="15.0" fill="rgb(209,38,45)" rx="2" ry="2" />
<text  x="117.20" y="159.5" ></text>
</g>
<g >
<title>&lt;built-in_method_zeros_like_of_type_object_at_0x7f3e11c719c0&gt; (605 us., 0.01%)</title><rect x="841.5" y="261" width="0.2" height="15.0" fill="rgb(254,195,24)" rx="2" ry="2" />
<text  x="844.54" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,803,945 us., 36.58%)</title><rect x="251.1" y="149" width="431.6" height="15.0" fill="rgb(222,110,28)" rx="2" ry="2" />
<text  x="254.08" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (33,610 us., 0.68%)</title><rect x="683.4" y="197" width="8.1" height="15.0" fill="rgb(211,141,39)" rx="2" ry="2" />
<text  x="686.44" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (2,188 us., 0.04%)</title><rect x="114.8" y="213" width="0.5" height="15.0" fill="rgb(239,79,25)" rx="2" ry="2" />
<text  x="117.80" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (479,239 us., 9.72%)</title><rect x="115.3" y="229" width="114.7" height="15.0" fill="rgb(224,148,3)" rx="2" ry="2" />
<text  x="118.32" y="239.5" >torch_int/nn/o..</text>
</g>
<g >
<title>torch_int/nn/opt.py(300):__prepare_decoder_attention_mask (1,432 us., 0.03%)</title><rect x="682.8" y="229" width="0.3" height="15.0" fill="rgb(222,173,0)" rx="2" ry="2" />
<text  x="685.76" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(92):_forward (61,536 us., 1.25%)</title><rect x="699.0" y="245" width="14.8" height="15.0" fill="rgb(219,228,42)" rx="2" ry="2" />
<text  x="702.05" y="255.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (4,691 us., 0.10%)</title><rect x="114.2" y="245" width="1.1" height="15.0" fill="rgb(237,201,50)" rx="2" ry="2" />
<text  x="117.20" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (4,066 us., 0.08%)</title><rect x="230.0" y="229" width="1.0" height="15.0" fill="rgb(241,166,50)" rx="2" ry="2" />
<text  x="232.98" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (275,061 us., 5.58%)</title><rect x="48.4" y="101" width="65.8" height="15.0" fill="rgb(223,94,4)" rx="2" ry="2" />
<text  x="51.39" y="111.5" >profili..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,463 us., 0.05%)</title><rect x="47.4" y="165" width="0.6" height="15.0" fill="rgb(251,70,33)" rx="2" ry="2" />
<text  x="50.42" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (31,636 us., 0.64%)</title><rect x="691.5" y="101" width="7.5" height="15.0" fill="rgb(239,38,31)" rx="2" ry="2" />
<text  x="694.48" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (80,396 us., 1.63%)</title><rect x="231.8" y="213" width="19.3" height="15.0" fill="rgb(245,14,13)" rx="2" ry="2" />
<text  x="234.85" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,066 us., 0.08%)</title><rect x="230.0" y="165" width="1.0" height="15.0" fill="rgb(227,23,50)" rx="2" ry="2" />
<text  x="232.98" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (57,567 us., 1.17%)</title><rect x="713.8" y="213" width="13.7" height="15.0" fill="rgb(213,196,26)" rx="2" ry="2" />
<text  x="716.77" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,451,232 us., 29.43%)</title><rect x="842.6" y="101" width="347.3" height="15.0" fill="rgb(213,54,44)" rx="2" ry="2" />
<text  x="845.64" y="111.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,803,945 us., 36.58%)</title><rect x="251.1" y="229" width="431.6" height="15.0" fill="rgb(207,184,8)" rx="2" ry="2" />
<text  x="254.08" y="239.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,188 us., 0.04%)</title><rect x="114.8" y="165" width="0.5" height="15.0" fill="rgb(249,171,4)" rx="2" ry="2" />
<text  x="117.80" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7f3e11c719c0&gt; (1,394 us., 0.03%)</title><rect x="683.1" y="261" width="0.3" height="15.0" fill="rgb(209,215,15)" rx="2" ry="2" />
<text  x="686.10" y="271.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,600 us., 0.03%)</title><rect x="48.0" y="133" width="0.4" height="15.0" fill="rgb(211,103,30)" rx="2" ry="2" />
<text  x="51.01" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (61,536 us., 1.25%)</title><rect x="699.0" y="213" width="14.8" height="15.0" fill="rgb(206,171,54)" rx="2" ry="2" />
<text  x="702.05" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (598 us., 0.01%)</title><rect x="1189.9" y="181" width="0.1" height="15.0" fill="rgb(207,113,13)" rx="2" ry="2" />
<text  x="1192.86" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,503 us., 0.05%)</title><rect x="114.2" y="133" width="0.6" height="15.0" fill="rgb(243,183,16)" rx="2" ry="2" />
<text  x="117.20" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (605 us., 0.01%)</title><rect x="841.5" y="197" width="0.2" height="15.0" fill="rgb(220,175,32)" rx="2" ry="2" />
<text  x="844.54" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (57,567 us., 1.17%)</title><rect x="713.8" y="117" width="13.7" height="15.0" fill="rgb(218,123,37)" rx="2" ry="2" />
<text  x="716.77" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (605 us., 0.01%)</title><rect x="841.5" y="181" width="0.2" height="15.0" fill="rgb(214,18,24)" rx="2" ry="2" />
<text  x="844.54" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (33,610 us., 0.68%)</title><rect x="683.4" y="85" width="8.1" height="15.0" fill="rgb(229,172,4)" rx="2" ry="2" />
<text  x="686.44" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(43):__shape (80,396 us., 1.63%)</title><rect x="231.8" y="245" width="19.3" height="15.0" fill="rgb(209,185,43)" rx="2" ry="2" />
<text  x="234.85" y="255.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,451,232 us., 29.43%)</title><rect x="842.6" y="117" width="347.3" height="15.0" fill="rgb(213,151,51)" rx="2" ry="2" />
<text  x="845.64" y="127.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,463 us., 0.05%)</title><rect x="47.4" y="181" width="0.6" height="15.0" fill="rgb(253,34,26)" rx="2" ry="2" />
<text  x="50.42" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (605 us., 0.01%)</title><rect x="841.5" y="229" width="0.2" height="15.0" fill="rgb(228,111,21)" rx="2" ry="2" />
<text  x="844.54" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(46):_forward (1,803,945 us., 36.58%)</title><rect x="251.1" y="245" width="431.6" height="15.0" fill="rgb(225,215,29)" rx="2" ry="2" />
<text  x="254.08" y="255.5" >torch_int/nn/opt.py(46):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (31,636 us., 0.64%)</title><rect x="691.5" y="117" width="7.5" height="15.0" fill="rgb(233,80,4)" rx="2" ry="2" />
<text  x="694.48" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNorm (1,394 us., 0.03%)</title><rect x="683.1" y="213" width="0.3" height="15.0" fill="rgb(242,7,26)" rx="2" ry="2" />
<text  x="686.10" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,188 us., 0.04%)</title><rect x="114.8" y="133" width="0.5" height="15.0" fill="rgb(212,197,20)" rx="2" ry="2" />
<text  x="117.80" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (2,503 us., 0.05%)</title><rect x="114.2" y="197" width="0.6" height="15.0" fill="rgb(240,94,31)" rx="2" ry="2" />
<text  x="117.20" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (57,567 us., 1.17%)</title><rect x="713.8" y="133" width="13.7" height="15.0" fill="rgb(246,16,51)" rx="2" ry="2" />
<text  x="716.77" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Embedding (2,503 us., 0.05%)</title><rect x="114.2" y="213" width="0.6" height="15.0" fill="rgb(221,82,34)" rx="2" ry="2" />
<text  x="117.20" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (80,396 us., 1.63%)</title><rect x="231.8" y="85" width="19.3" height="15.0" fill="rgb(240,44,12)" rx="2" ry="2" />
<text  x="234.85" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (479,239 us., 9.72%)</title><rect x="115.3" y="133" width="114.7" height="15.0" fill="rgb(221,96,28)" rx="2" ry="2" />
<text  x="118.32" y="143.5" >nn.Module:_Int..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (475,972 us., 9.65%)</title><rect x="727.5" y="85" width="113.9" height="15.0" fill="rgb(228,209,4)" rx="2" ry="2" />
<text  x="730.54" y="95.5" >torch/autograd..</text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (1,394 us., 0.03%)</title><rect x="683.1" y="229" width="0.3" height="15.0" fill="rgb(225,177,22)" rx="2" ry="2" />
<text  x="686.10" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,600 us., 0.03%)</title><rect x="48.0" y="149" width="0.4" height="15.0" fill="rgb(216,119,18)" rx="2" ry="2" />
<text  x="51.01" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (57,567 us., 1.17%)</title><rect x="713.8" y="197" width="13.7" height="15.0" fill="rgb(230,58,42)" rx="2" ry="2" />
<text  x="716.77" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,463 us., 0.05%)</title><rect x="47.4" y="213" width="0.6" height="15.0" fill="rgb(249,72,10)" rx="2" ry="2" />
<text  x="50.42" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (479,239 us., 9.72%)</title><rect x="115.3" y="69" width="114.7" height="15.0" fill="rgb(236,31,29)" rx="2" ry="2" />
<text  x="118.32" y="79.5" >torch/autograd..</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (33,610 us., 0.68%)</title><rect x="683.4" y="165" width="8.1" height="15.0" fill="rgb(220,87,13)" rx="2" ry="2" />
<text  x="686.44" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (31,636 us., 0.64%)</title><rect x="691.5" y="53" width="7.5" height="15.0" fill="rgb(229,216,46)" rx="2" ry="2" />
<text  x="694.48" y="63.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,451,232 us., 29.43%)</title><rect x="842.6" y="197" width="347.3" height="15.0" fill="rgb(239,229,34)" rx="2" ry="2" />
<text  x="845.64" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch_int/nn/opt.py(321):_forward (1,394 us., 0.03%)</title><rect x="683.1" y="197" width="0.3" height="15.0" fill="rgb(221,56,23)" rx="2" ry="2" />
<text  x="686.10" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(183):_forward (31,636 us., 0.64%)</title><rect x="691.5" y="149" width="7.5" height="15.0" fill="rgb(207,181,45)" rx="2" ry="2" />
<text  x="694.48" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (156,394 us., 3.17%)</title><rect x="10.0" y="165" width="37.4" height="15.0" fill="rgb(251,160,9)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >tor..</text>
</g>
</g>
</svg>
