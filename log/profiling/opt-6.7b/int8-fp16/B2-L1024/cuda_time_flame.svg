<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (9,528,229 us., 39.02%)</title><rect x="272.8" y="229" width="460.4" height="15.0" fill="rgb(220,80,44)" rx="2" ry="2" />
<text  x="275.82" y="239.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (32,077 us., 0.13%)</title><rect x="251.7" y="181" width="1.6" height="15.0" fill="rgb(222,224,53)" rx="2" ry="2" />
<text  x="254.74" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (5,639,048 us., 23.09%)</title><rect x="917.5" y="165" width="272.5" height="15.0" fill="rgb(225,105,36)" rx="2" ry="2" />
<text  x="920.50" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (2,523,093 us., 10.33%)</title><rect x="37.8" y="245" width="122.0" height="15.0" fill="rgb(241,82,45)" rx="2" ry="2" />
<text  x="40.85" y="255.5" >torch/nn/functi..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (467,644 us., 1.91%)</title><rect x="733.8" y="133" width="22.6" height="15.0" fill="rgb(214,11,35)" rx="2" ry="2" />
<text  x="736.80" y="143.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (404,269 us., 1.66%)</title><rect x="253.3" y="149" width="19.5" height="15.0" fill="rgb(209,217,13)" rx="2" ry="2" />
<text  x="256.29" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (154,539 us., 0.63%)</title><rect x="767.4" y="197" width="7.5" height="15.0" fill="rgb(222,53,38)" rx="2" ry="2" />
<text  x="770.39" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (159,991 us., 0.66%)</title><rect x="774.9" y="149" width="7.7" height="15.0" fill="rgb(245,215,26)" rx="2" ry="2" />
<text  x="777.85" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (227,547 us., 0.93%)</title><rect x="756.4" y="37" width="11.0" height="15.0" fill="rgb(209,184,27)" rx="2" ry="2" />
<text  x="759.39" y="47.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (9,528,229 us., 39.02%)</title><rect x="272.8" y="165" width="460.4" height="15.0" fill="rgb(236,37,19)" rx="2" ry="2" />
<text  x="275.82" y="175.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (8,302 us., 0.03%)</title><rect x="37.4" y="149" width="0.4" height="15.0" fill="rgb(252,180,46)" rx="2" ry="2" />
<text  x="40.44" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (159,991 us., 0.66%)</title><rect x="774.9" y="85" width="7.7" height="15.0" fill="rgb(235,200,25)" rx="2" ry="2" />
<text  x="777.85" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (950,729 us., 3.89%)</title><rect x="205.8" y="245" width="45.9" height="15.0" fill="rgb(222,57,6)" rx="2" ry="2" />
<text  x="208.80" y="255.5" >torc..</text>
</g>
<g >
<title>torch_int/nn/linear.py(40):_forward (227,547 us., 0.93%)</title><rect x="756.4" y="245" width="11.0" height="15.0" fill="rgb(215,19,5)" rx="2" ry="2" />
<text  x="759.39" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (950,729 us., 3.89%)</title><rect x="205.8" y="229" width="45.9" height="15.0" fill="rgb(220,43,53)" rx="2" ry="2" />
<text  x="208.80" y="239.5" >nn.M..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,523,093 us., 10.33%)</title><rect x="37.8" y="85" width="122.0" height="15.0" fill="rgb(251,147,23)" rx="2" ry="2" />
<text  x="40.85" y="95.5" >profiling/utils..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,523,093 us., 10.33%)</title><rect x="37.8" y="101" width="122.0" height="15.0" fill="rgb(253,49,27)" rx="2" ry="2" />
<text  x="40.85" y="111.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (9,528,229 us., 39.02%)</title><rect x="272.8" y="117" width="460.4" height="15.0" fill="rgb(253,87,42)" rx="2" ry="2" />
<text  x="275.82" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (154,539 us., 0.63%)</title><rect x="767.4" y="165" width="7.5" height="15.0" fill="rgb(208,160,2)" rx="2" ry="2" />
<text  x="770.39" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (159,991 us., 0.66%)</title><rect x="774.9" y="53" width="7.7" height="15.0" fill="rgb(216,75,17)" rx="2" ry="2" />
<text  x="777.85" y="63.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,523,093 us., 10.33%)</title><rect x="37.8" y="117" width="122.0" height="15.0" fill="rgb(243,70,2)" rx="2" ry="2" />
<text  x="40.85" y="127.5" >transformers/mo..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (2,523,093 us., 10.33%)</title><rect x="37.8" y="149" width="122.0" height="15.0" fill="rgb(230,60,18)" rx="2" ry="2" />
<text  x="40.85" y="159.5" >torch_int/nn/op..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (952,932 us., 3.90%)</title><rect x="159.8" y="117" width="46.0" height="15.0" fill="rgb(229,134,18)" rx="2" ry="2" />
<text  x="162.76" y="127.5" >prof..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (2,516,546 us., 10.30%)</title><rect x="795.4" y="181" width="121.6" height="15.0" fill="rgb(225,73,29)" rx="2" ry="2" />
<text  x="798.43" y="191.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (2,523,093 us., 10.33%)</title><rect x="37.8" y="229" width="122.0" height="15.0" fill="rgb(254,106,20)" rx="2" ry="2" />
<text  x="40.85" y="239.5" >torch_int/nn/op..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (952,932 us., 3.90%)</title><rect x="159.8" y="197" width="46.0" height="15.0" fill="rgb(247,220,30)" rx="2" ry="2" />
<text  x="162.76" y="207.5" >nn.M..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,667 us., 0.02%)</title><rect x="733.2" y="133" width="0.2" height="15.0" fill="rgb(217,55,44)" rx="2" ry="2" />
<text  x="736.22" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (227,547 us., 0.93%)</title><rect x="756.4" y="85" width="11.0" height="15.0" fill="rgb(224,225,10)" rx="2" ry="2" />
<text  x="759.39" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,516,546 us., 10.30%)</title><rect x="795.4" y="85" width="121.6" height="15.0" fill="rgb(224,157,3)" rx="2" ry="2" />
<text  x="798.43" y="95.5" >torch/autograd/..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (154,539 us., 0.63%)</title><rect x="767.4" y="133" width="7.5" height="15.0" fill="rgb(232,72,16)" rx="2" ry="2" />
<text  x="770.39" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (5,639,048 us., 23.09%)</title><rect x="917.5" y="213" width="272.5" height="15.0" fill="rgb(207,204,10)" rx="2" ry="2" />
<text  x="920.50" y="223.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fbd3497c810&gt; (227,547 us., 0.93%)</title><rect x="756.4" y="261" width="11.0" height="15.0" fill="rgb(216,113,25)" rx="2" ry="2" />
<text  x="759.39" y="271.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (467,644 us., 1.91%)</title><rect x="733.8" y="101" width="22.6" height="15.0" fill="rgb(249,187,41)" rx="2" ry="2" />
<text  x="736.80" y="111.5" >p..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,031 us., 0.01%)</title><rect x="36.9" y="197" width="0.1" height="15.0" fill="rgb(229,162,4)" rx="2" ry="2" />
<text  x="39.89" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (7,558 us., 0.03%)</title><rect x="917.1" y="213" width="0.4" height="15.0" fill="rgb(206,187,3)" rx="2" ry="2" />
<text  x="920.14" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (467,644 us., 1.91%)</title><rect x="733.8" y="149" width="22.6" height="15.0" fill="rgb(219,101,19)" rx="2" ry="2" />
<text  x="736.80" y="159.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (159,991 us., 0.66%)</title><rect x="774.9" y="37" width="7.7" height="15.0" fill="rgb(230,163,31)" rx="2" ry="2" />
<text  x="777.85" y="47.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (8,302 us., 0.03%)</title><rect x="37.4" y="181" width="0.4" height="15.0" fill="rgb(241,100,53)" rx="2" ry="2" />
<text  x="40.44" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (7,276 us., 0.03%)</title><rect x="733.4" y="133" width="0.4" height="15.0" fill="rgb(221,74,3)" rx="2" ry="2" />
<text  x="736.45" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (952,932 us., 3.90%)</title><rect x="159.8" y="133" width="46.0" height="15.0" fill="rgb(208,149,4)" rx="2" ry="2" />
<text  x="162.76" y="143.5" >nn.M..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,667 us., 0.02%)</title><rect x="733.2" y="149" width="0.2" height="15.0" fill="rgb(240,55,16)" rx="2" ry="2" />
<text  x="736.22" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,516,546 us., 10.30%)</title><rect x="795.4" y="101" width="121.6" height="15.0" fill="rgb(226,207,51)" rx="2" ry="2" />
<text  x="798.43" y="111.5" >profiling/utils..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (265,837 us., 1.09%)</title><rect x="782.6" y="149" width="12.8" height="15.0" fill="rgb(237,141,26)" rx="2" ry="2" />
<text  x="785.58" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (7,276 us., 0.03%)</title><rect x="733.4" y="117" width="0.4" height="15.0" fill="rgb(208,129,18)" rx="2" ry="2" />
<text  x="736.45" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,031 us., 0.01%)</title><rect x="36.9" y="165" width="0.1" height="15.0" fill="rgb(215,54,23)" rx="2" ry="2" />
<text  x="39.89" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7fbe294e29c0&gt; (16,852 us., 0.07%)</title><rect x="37.0" y="261" width="0.8" height="15.0" fill="rgb(236,36,17)" rx="2" ry="2" />
<text  x="40.03" y="271.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (556,423 us., 2.28%)</title><rect x="10.0" y="261" width="26.9" height="15.0" fill="rgb(238,156,23)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (404,269 us., 1.66%)</title><rect x="253.3" y="181" width="19.5" height="15.0" fill="rgb(224,150,39)" rx="2" ry="2" />
<text  x="256.29" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (227,547 us., 0.93%)</title><rect x="756.4" y="101" width="11.0" height="15.0" fill="rgb(224,204,34)" rx="2" ry="2" />
<text  x="759.39" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (5,639,048 us., 23.09%)</title><rect x="917.5" y="101" width="272.5" height="15.0" fill="rgb(244,82,24)" rx="2" ry="2" />
<text  x="920.50" y="111.5" >torch/autograd/grad_mode.py(27):_dec..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (950,729 us., 3.89%)</title><rect x="205.8" y="165" width="45.9" height="15.0" fill="rgb(253,77,38)" rx="2" ry="2" />
<text  x="208.80" y="175.5" >nn.M..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (404,269 us., 1.66%)</title><rect x="253.3" y="85" width="19.5" height="15.0" fill="rgb(239,192,31)" rx="2" ry="2" />
<text  x="256.29" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (8,550 us., 0.04%)</title><rect x="37.0" y="117" width="0.4" height="15.0" fill="rgb(254,12,46)" rx="2" ry="2" />
<text  x="40.03" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (2,516,546 us., 10.30%)</title><rect x="795.4" y="245" width="121.6" height="15.0" fill="rgb(248,68,53)" rx="2" ry="2" />
<text  x="798.43" y="255.5" >torch_int/nn/op..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (227,547 us., 0.93%)</title><rect x="756.4" y="229" width="11.0" height="15.0" fill="rgb(210,66,29)" rx="2" ry="2" />
<text  x="759.39" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,031 us., 0.01%)</title><rect x="36.9" y="133" width="0.1" height="15.0" fill="rgb(212,119,20)" rx="2" ry="2" />
<text  x="39.89" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (8,302 us., 0.03%)</title><rect x="37.4" y="101" width="0.4" height="15.0" fill="rgb(250,91,52)" rx="2" ry="2" />
<text  x="40.44" y="111.5" ></text>
</g>
<g >
<title>all (24,421,576 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(221,48,53)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (8,550 us., 0.04%)</title><rect x="37.0" y="197" width="0.4" height="15.0" fill="rgb(207,77,25)" rx="2" ry="2" />
<text  x="40.03" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (227,547 us., 0.93%)</title><rect x="756.4" y="149" width="11.0" height="15.0" fill="rgb(229,200,37)" rx="2" ry="2" />
<text  x="759.39" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (556,423 us., 2.28%)</title><rect x="10.0" y="213" width="26.9" height="15.0" fill="rgb(215,155,16)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (9,528,229 us., 39.02%)</title><rect x="272.8" y="133" width="460.4" height="15.0" fill="rgb(240,158,47)" rx="2" ry="2" />
<text  x="275.82" y="143.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (3,031 us., 0.01%)</title><rect x="36.9" y="245" width="0.1" height="15.0" fill="rgb(208,186,25)" rx="2" ry="2" />
<text  x="39.89" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (8,302 us., 0.03%)</title><rect x="37.4" y="213" width="0.4" height="15.0" fill="rgb(230,124,12)" rx="2" ry="2" />
<text  x="40.44" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (32,077 us., 0.13%)</title><rect x="251.7" y="245" width="1.6" height="15.0" fill="rgb(244,102,35)" rx="2" ry="2" />
<text  x="254.74" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (8,302 us., 0.03%)</title><rect x="37.4" y="133" width="0.4" height="15.0" fill="rgb(254,71,54)" rx="2" ry="2" />
<text  x="40.44" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (9,528,229 us., 39.02%)</title><rect x="272.8" y="181" width="460.4" height="15.0" fill="rgb(239,203,29)" rx="2" ry="2" />
<text  x="275.82" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (32,077 us., 0.13%)</title><rect x="251.7" y="213" width="1.6" height="15.0" fill="rgb(243,118,12)" rx="2" ry="2" />
<text  x="254.74" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (2,516,546 us., 10.30%)</title><rect x="795.4" y="213" width="121.6" height="15.0" fill="rgb(237,77,12)" rx="2" ry="2" />
<text  x="798.43" y="223.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (404,269 us., 1.66%)</title><rect x="253.3" y="101" width="19.5" height="15.0" fill="rgb(231,224,23)" rx="2" ry="2" />
<text  x="256.29" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (467,644 us., 1.91%)</title><rect x="733.8" y="181" width="22.6" height="15.0" fill="rgb(213,123,1)" rx="2" ry="2" />
<text  x="736.80" y="191.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (265,837 us., 1.09%)</title><rect x="782.6" y="117" width="12.8" height="15.0" fill="rgb(245,71,41)" rx="2" ry="2" />
<text  x="785.58" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (9,528,229 us., 39.02%)</title><rect x="272.8" y="101" width="460.4" height="15.0" fill="rgb(243,4,7)" rx="2" ry="2" />
<text  x="275.82" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (5,639,048 us., 23.09%)</title><rect x="917.5" y="181" width="272.5" height="15.0" fill="rgb(248,160,53)" rx="2" ry="2" />
<text  x="920.50" y="191.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (5,639,048 us., 23.09%)</title><rect x="917.5" y="245" width="272.5" height="15.0" fill="rgb(220,0,27)" rx="2" ry="2" />
<text  x="920.50" y="255.5" >torch/autograd/grad_mode.py(24):_dec..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (159,991 us., 0.66%)</title><rect x="774.9" y="133" width="7.7" height="15.0" fill="rgb(242,83,15)" rx="2" ry="2" />
<text  x="777.85" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (556,423 us., 2.28%)</title><rect x="10.0" y="197" width="26.9" height="15.0" fill="rgb(223,9,34)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (952,932 us., 3.90%)</title><rect x="159.8" y="181" width="46.0" height="15.0" fill="rgb(209,196,45)" rx="2" ry="2" />
<text  x="162.76" y="191.5" >torc..</text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7fbd34fd94b0&gt; (14,396,296 us., 58.95%)</title><rect x="37.8" y="261" width="695.6" height="15.0" fill="rgb(222,183,24)" rx="2" ry="2" />
<text  x="40.85" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7fbd34fd94b0&gt;</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (32,077 us., 0.13%)</title><rect x="251.7" y="149" width="1.6" height="15.0" fill="rgb(244,196,3)" rx="2" ry="2" />
<text  x="254.74" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (4,667 us., 0.02%)</title><rect x="733.2" y="229" width="0.2" height="15.0" fill="rgb(230,22,50)" rx="2" ry="2" />
<text  x="736.22" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (467,644 us., 1.91%)</title><rect x="733.8" y="117" width="22.6" height="15.0" fill="rgb(216,21,5)" rx="2" ry="2" />
<text  x="736.80" y="127.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (159,991 us., 0.66%)</title><rect x="774.9" y="197" width="7.7" height="15.0" fill="rgb(208,150,53)" rx="2" ry="2" />
<text  x="777.85" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (154,539 us., 0.63%)</title><rect x="767.4" y="149" width="7.5" height="15.0" fill="rgb(219,21,11)" rx="2" ry="2" />
<text  x="770.39" y="159.5" ></text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (556,423 us., 2.28%)</title><rect x="10.0" y="245" width="26.9" height="15.0" fill="rgb(224,70,11)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (5,639,048 us., 23.09%)</title><rect x="917.5" y="133" width="272.5" height="15.0" fill="rgb(214,6,5)" rx="2" ry="2" />
<text  x="920.50" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (8,302 us., 0.03%)</title><rect x="37.4" y="165" width="0.4" height="15.0" fill="rgb(215,33,43)" rx="2" ry="2" />
<text  x="40.44" y="175.5" ></text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (16,852 us., 0.07%)</title><rect x="37.0" y="229" width="0.8" height="15.0" fill="rgb(225,94,26)" rx="2" ry="2" />
<text  x="40.03" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (950,729 us., 3.89%)</title><rect x="205.8" y="149" width="45.9" height="15.0" fill="rgb(240,209,51)" rx="2" ry="2" />
<text  x="208.80" y="159.5" >prof..</text>
</g>
<g >
<title>nn.Module:_Embedding (8,550 us., 0.04%)</title><rect x="37.0" y="213" width="0.4" height="15.0" fill="rgb(214,8,46)" rx="2" ry="2" />
<text  x="40.03" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (952,932 us., 3.90%)</title><rect x="159.8" y="165" width="46.0" height="15.0" fill="rgb(213,208,5)" rx="2" ry="2" />
<text  x="162.76" y="175.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (2,523,093 us., 10.33%)</title><rect x="37.8" y="197" width="122.0" height="15.0" fill="rgb(207,213,40)" rx="2" ry="2" />
<text  x="40.85" y="207.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (7,276 us., 0.03%)</title><rect x="733.4" y="165" width="0.4" height="15.0" fill="rgb(253,129,10)" rx="2" ry="2" />
<text  x="736.45" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (9,528,229 us., 39.02%)</title><rect x="272.8" y="213" width="460.4" height="15.0" fill="rgb(245,49,25)" rx="2" ry="2" />
<text  x="275.82" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,667 us., 0.02%)</title><rect x="733.2" y="181" width="0.2" height="15.0" fill="rgb(221,151,16)" rx="2" ry="2" />
<text  x="736.22" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (8,550 us., 0.04%)</title><rect x="37.0" y="149" width="0.4" height="15.0" fill="rgb(218,176,27)" rx="2" ry="2" />
<text  x="40.03" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (9,528,229 us., 39.02%)</title><rect x="272.8" y="149" width="460.4" height="15.0" fill="rgb(223,133,37)" rx="2" ry="2" />
<text  x="275.82" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (952,932 us., 3.90%)</title><rect x="159.8" y="245" width="46.0" height="15.0" fill="rgb(236,1,35)" rx="2" ry="2" />
<text  x="162.76" y="255.5" >torc..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,516,546 us., 10.30%)</title><rect x="795.4" y="117" width="121.6" height="15.0" fill="rgb(229,205,28)" rx="2" ry="2" />
<text  x="798.43" y="127.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (227,547 us., 0.93%)</title><rect x="756.4" y="117" width="11.0" height="15.0" fill="rgb(252,214,2)" rx="2" ry="2" />
<text  x="759.39" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (467,644 us., 1.91%)</title><rect x="733.8" y="197" width="22.6" height="15.0" fill="rgb(241,109,48)" rx="2" ry="2" />
<text  x="736.80" y="207.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (7,558 us., 0.03%)</title><rect x="917.1" y="229" width="0.4" height="15.0" fill="rgb(211,170,25)" rx="2" ry="2" />
<text  x="920.14" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Linear (556,423 us., 2.28%)</title><rect x="10.0" y="229" width="26.9" height="15.0" fill="rgb(212,197,11)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (265,837 us., 1.09%)</title><rect x="782.6" y="165" width="12.8" height="15.0" fill="rgb(211,221,4)" rx="2" ry="2" />
<text  x="785.58" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (4,667 us., 0.02%)</title><rect x="733.2" y="213" width="0.2" height="15.0" fill="rgb(241,205,46)" rx="2" ry="2" />
<text  x="736.22" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (227,547 us., 0.93%)</title><rect x="756.4" y="53" width="11.0" height="15.0" fill="rgb(213,184,39)" rx="2" ry="2" />
<text  x="759.39" y="63.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (2,523,093 us., 10.33%)</title><rect x="37.8" y="213" width="122.0" height="15.0" fill="rgb(237,49,30)" rx="2" ry="2" />
<text  x="40.85" y="223.5" >torch/autograd/..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (227,547 us., 0.93%)</title><rect x="756.4" y="213" width="11.0" height="15.0" fill="rgb(213,87,11)" rx="2" ry="2" />
<text  x="759.39" y="223.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,031 us., 0.01%)</title><rect x="36.9" y="149" width="0.1" height="15.0" fill="rgb(246,37,49)" rx="2" ry="2" />
<text  x="39.89" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (2,516,546 us., 10.30%)</title><rect x="795.4" y="229" width="121.6" height="15.0" fill="rgb(247,113,5)" rx="2" ry="2" />
<text  x="798.43" y="239.5" >torch/autograd/..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (950,729 us., 3.89%)</title><rect x="205.8" y="197" width="45.9" height="15.0" fill="rgb(208,74,46)" rx="2" ry="2" />
<text  x="208.80" y="207.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (265,837 us., 1.09%)</title><rect x="782.6" y="213" width="12.8" height="15.0" fill="rgb(231,84,2)" rx="2" ry="2" />
<text  x="785.58" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNormQ (952,932 us., 3.90%)</title><rect x="159.8" y="229" width="46.0" height="15.0" fill="rgb(246,18,48)" rx="2" ry="2" />
<text  x="162.76" y="239.5" >nn.M..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (5,639,048 us., 23.09%)</title><rect x="917.5" y="117" width="272.5" height="15.0" fill="rgb(212,43,54)" rx="2" ry="2" />
<text  x="920.50" y="127.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (950,729 us., 3.89%)</title><rect x="205.8" y="213" width="45.9" height="15.0" fill="rgb(230,114,30)" rx="2" ry="2" />
<text  x="208.80" y="223.5" >torc..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (9,528,229 us., 39.02%)</title><rect x="272.8" y="245" width="460.4" height="15.0" fill="rgb(218,118,13)" rx="2" ry="2" />
<text  x="275.82" y="255.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (2,523,093 us., 10.33%)</title><rect x="37.8" y="181" width="122.0" height="15.0" fill="rgb(227,25,26)" rx="2" ry="2" />
<text  x="40.85" y="191.5" >torch_int/nn/op..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (154,539 us., 0.63%)</title><rect x="767.4" y="181" width="7.5" height="15.0" fill="rgb(238,85,15)" rx="2" ry="2" />
<text  x="770.39" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (3,031 us., 0.01%)</title><rect x="36.9" y="229" width="0.1" height="15.0" fill="rgb(227,16,19)" rx="2" ry="2" />
<text  x="39.89" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (8,550 us., 0.04%)</title><rect x="37.0" y="181" width="0.4" height="15.0" fill="rgb(254,143,48)" rx="2" ry="2" />
<text  x="40.03" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,031 us., 0.01%)</title><rect x="36.9" y="181" width="0.1" height="15.0" fill="rgb(244,159,2)" rx="2" ry="2" />
<text  x="39.89" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (265,837 us., 1.09%)</title><rect x="782.6" y="197" width="12.8" height="15.0" fill="rgb(243,25,5)" rx="2" ry="2" />
<text  x="785.58" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (154,539 us., 0.63%)</title><rect x="767.4" y="85" width="7.5" height="15.0" fill="rgb(229,146,2)" rx="2" ry="2" />
<text  x="770.39" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (404,269 us., 1.66%)</title><rect x="253.3" y="133" width="19.5" height="15.0" fill="rgb(210,56,25)" rx="2" ry="2" />
<text  x="256.29" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (227,547 us., 0.93%)</title><rect x="756.4" y="165" width="11.0" height="15.0" fill="rgb(211,141,6)" rx="2" ry="2" />
<text  x="759.39" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (2,516,546 us., 10.30%)</title><rect x="795.4" y="165" width="121.6" height="15.0" fill="rgb(208,179,6)" rx="2" ry="2" />
<text  x="798.43" y="175.5" >torch_int/nn/op..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,523,093 us., 10.33%)</title><rect x="37.8" y="133" width="122.0" height="15.0" fill="rgb(212,95,18)" rx="2" ry="2" />
<text  x="40.85" y="143.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (556,423 us., 2.28%)</title><rect x="10.0" y="181" width="26.9" height="15.0" fill="rgb(208,207,15)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >p..</text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7fbe294e29c0&gt; (474,920 us., 1.94%)</title><rect x="733.4" y="261" width="23.0" height="15.0" fill="rgb(213,92,32)" rx="2" ry="2" />
<text  x="736.45" y="271.5" >&lt;..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (7,558 us., 0.03%)</title><rect x="917.1" y="261" width="0.4" height="15.0" fill="rgb(226,140,9)" rx="2" ry="2" />
<text  x="920.14" y="271.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (265,837 us., 1.09%)</title><rect x="782.6" y="133" width="12.8" height="15.0" fill="rgb(222,61,13)" rx="2" ry="2" />
<text  x="785.58" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (556,423 us., 2.28%)</title><rect x="10.0" y="165" width="26.9" height="15.0" fill="rgb(243,39,13)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (154,539 us., 0.63%)</title><rect x="767.4" y="117" width="7.5" height="15.0" fill="rgb(218,213,39)" rx="2" ry="2" />
<text  x="770.39" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (7,276 us., 0.03%)</title><rect x="733.4" y="197" width="0.4" height="15.0" fill="rgb(242,82,41)" rx="2" ry="2" />
<text  x="736.45" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (467,644 us., 1.91%)</title><rect x="733.8" y="165" width="22.6" height="15.0" fill="rgb(207,216,27)" rx="2" ry="2" />
<text  x="736.80" y="175.5" >t..</text>
</g>
<g >
<title>nn.Module:_W8A8BFP32OFP32Linear (314,530 us., 1.29%)</title><rect x="767.4" y="213" width="15.2" height="15.0" fill="rgb(247,5,20)" rx="2" ry="2" />
<text  x="770.39" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (952,932 us., 3.90%)</title><rect x="159.8" y="101" width="46.0" height="15.0" fill="rgb(247,29,3)" rx="2" ry="2" />
<text  x="162.76" y="111.5" >torc..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (227,547 us., 0.93%)</title><rect x="756.4" y="181" width="11.0" height="15.0" fill="rgb(246,4,29)" rx="2" ry="2" />
<text  x="759.39" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,516,546 us., 10.30%)</title><rect x="795.4" y="149" width="121.6" height="15.0" fill="rgb(253,157,39)" rx="2" ry="2" />
<text  x="798.43" y="159.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (227,547 us., 0.93%)</title><rect x="756.4" y="69" width="11.0" height="15.0" fill="rgb(208,11,27)" rx="2" ry="2" />
<text  x="759.39" y="79.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (4,667 us., 0.02%)</title><rect x="733.2" y="245" width="0.2" height="15.0" fill="rgb(221,175,53)" rx="2" ry="2" />
<text  x="736.22" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (404,269 us., 1.66%)</title><rect x="253.3" y="69" width="19.5" height="15.0" fill="rgb(226,136,51)" rx="2" ry="2" />
<text  x="256.29" y="79.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (7,558 us., 0.03%)</title><rect x="917.1" y="181" width="0.4" height="15.0" fill="rgb(217,161,18)" rx="2" ry="2" />
<text  x="920.14" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (404,269 us., 1.66%)</title><rect x="253.3" y="117" width="19.5" height="15.0" fill="rgb(217,157,0)" rx="2" ry="2" />
<text  x="256.29" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (7,276 us., 0.03%)</title><rect x="733.4" y="181" width="0.4" height="15.0" fill="rgb(250,15,4)" rx="2" ry="2" />
<text  x="736.45" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (2,523,093 us., 10.33%)</title><rect x="37.8" y="165" width="122.0" height="15.0" fill="rgb(234,43,46)" rx="2" ry="2" />
<text  x="40.85" y="175.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (950,729 us., 3.89%)</title><rect x="205.8" y="181" width="45.9" height="15.0" fill="rgb(234,114,28)" rx="2" ry="2" />
<text  x="208.80" y="191.5" >tran..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (5,639,048 us., 23.09%)</title><rect x="917.5" y="261" width="272.5" height="15.0" fill="rgb(214,136,33)" rx="2" ry="2" />
<text  x="920.50" y="271.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (8,302 us., 0.03%)</title><rect x="37.4" y="117" width="0.4" height="15.0" fill="rgb(213,114,44)" rx="2" ry="2" />
<text  x="40.44" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (32,077 us., 0.13%)</title><rect x="251.7" y="229" width="1.6" height="15.0" fill="rgb(246,198,45)" rx="2" ry="2" />
<text  x="254.74" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (32,077 us., 0.13%)</title><rect x="251.7" y="197" width="1.6" height="15.0" fill="rgb(218,153,37)" rx="2" ry="2" />
<text  x="254.74" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,516,546 us., 10.30%)</title><rect x="795.4" y="133" width="121.6" height="15.0" fill="rgb(251,197,32)" rx="2" ry="2" />
<text  x="798.43" y="143.5" >transformers/mo..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (404,269 us., 1.66%)</title><rect x="253.3" y="213" width="19.5" height="15.0" fill="rgb(230,58,43)" rx="2" ry="2" />
<text  x="256.29" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (5,639,048 us., 23.09%)</title><rect x="917.5" y="149" width="272.5" height="15.0" fill="rgb(234,221,9)" rx="2" ry="2" />
<text  x="920.50" y="159.5" >transformers/models/opt/modeling_opt..</text>
</g>
<g >
<title>torch_int/nn/linear.py(90):_forward (265,837 us., 1.09%)</title><rect x="782.6" y="245" width="12.8" height="15.0" fill="rgb(233,191,21)" rx="2" ry="2" />
<text  x="785.58" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (7,276 us., 0.03%)</title><rect x="733.4" y="149" width="0.4" height="15.0" fill="rgb(239,159,28)" rx="2" ry="2" />
<text  x="736.45" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (467,644 us., 1.91%)</title><rect x="733.8" y="85" width="22.6" height="15.0" fill="rgb(254,102,3)" rx="2" ry="2" />
<text  x="736.80" y="95.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (265,837 us., 1.09%)</title><rect x="782.6" y="85" width="12.8" height="15.0" fill="rgb(235,51,49)" rx="2" ry="2" />
<text  x="785.58" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (9,528,229 us., 39.02%)</title><rect x="272.8" y="85" width="460.4" height="15.0" fill="rgb(213,226,42)" rx="2" ry="2" />
<text  x="275.82" y="95.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>nn.Module:_LayerNormQ (467,644 us., 1.91%)</title><rect x="733.8" y="213" width="22.6" height="15.0" fill="rgb(218,159,54)" rx="2" ry="2" />
<text  x="736.80" y="223.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (404,269 us., 1.66%)</title><rect x="253.3" y="165" width="19.5" height="15.0" fill="rgb(252,187,4)" rx="2" ry="2" />
<text  x="256.29" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (952,932 us., 3.90%)</title><rect x="159.8" y="213" width="46.0" height="15.0" fill="rgb(240,117,42)" rx="2" ry="2" />
<text  x="162.76" y="223.5" >torc..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (159,991 us., 0.66%)</title><rect x="774.9" y="117" width="7.7" height="15.0" fill="rgb(251,204,21)" rx="2" ry="2" />
<text  x="777.85" y="127.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (16,852 us., 0.07%)</title><rect x="37.0" y="245" width="0.8" height="15.0" fill="rgb(240,169,26)" rx="2" ry="2" />
<text  x="40.03" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (159,991 us., 0.66%)</title><rect x="774.9" y="101" width="7.7" height="15.0" fill="rgb(253,141,44)" rx="2" ry="2" />
<text  x="777.85" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (159,991 us., 0.66%)</title><rect x="774.9" y="69" width="7.7" height="15.0" fill="rgb(212,18,25)" rx="2" ry="2" />
<text  x="777.85" y="79.5" ></text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7fbe294e29c0&gt; (2,516,546 us., 10.30%)</title><rect x="795.4" y="261" width="121.6" height="15.0" fill="rgb(217,43,36)" rx="2" ry="2" />
<text  x="798.43" y="271.5" >&lt;built-in_metho..</text>
</g>
<g >
<title>torch_int/nn/linear.py(225):_forward (314,530 us., 1.29%)</title><rect x="767.4" y="245" width="15.2" height="15.0" fill="rgb(240,198,11)" rx="2" ry="2" />
<text  x="770.39" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (8,550 us., 0.04%)</title><rect x="37.0" y="165" width="0.4" height="15.0" fill="rgb(226,148,12)" rx="2" ry="2" />
<text  x="40.03" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (159,991 us., 0.66%)</title><rect x="774.9" y="165" width="7.7" height="15.0" fill="rgb(238,212,27)" rx="2" ry="2" />
<text  x="777.85" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (5,639,048 us., 23.09%)</title><rect x="917.5" y="229" width="272.5" height="15.0" fill="rgb(238,49,32)" rx="2" ry="2" />
<text  x="920.50" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_bfp32_ofp32_of_PyCapsule_object_at_0x7fbd3497c7b0&gt; (314,530 us., 1.29%)</title><rect x="767.4" y="261" width="15.2" height="15.0" fill="rgb(225,138,8)" rx="2" ry="2" />
<text  x="770.39" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNorm (7,276 us., 0.03%)</title><rect x="733.4" y="213" width="0.4" height="15.0" fill="rgb(214,211,27)" rx="2" ry="2" />
<text  x="736.45" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7fbd3497c750&gt; (265,837 us., 1.09%)</title><rect x="782.6" y="261" width="12.8" height="15.0" fill="rgb(253,6,42)" rx="2" ry="2" />
<text  x="785.58" y="271.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (8,550 us., 0.04%)</title><rect x="37.0" y="133" width="0.4" height="15.0" fill="rgb(220,63,0)" rx="2" ry="2" />
<text  x="40.03" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (952,932 us., 3.90%)</title><rect x="159.8" y="149" width="46.0" height="15.0" fill="rgb(244,56,27)" rx="2" ry="2" />
<text  x="162.76" y="159.5" >tran..</text>
</g>
<g >
<title>&lt;built-in_method_cumsum_of_type_object_at_0x7fbe294e29c0&gt; (3,031 us., 0.01%)</title><rect x="36.9" y="261" width="0.1" height="15.0" fill="rgb(220,46,32)" rx="2" ry="2" />
<text  x="39.89" y="271.5" ></text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (7,276 us., 0.03%)</title><rect x="733.4" y="229" width="0.4" height="15.0" fill="rgb(226,197,10)" rx="2" ry="2" />
<text  x="736.45" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (467,644 us., 1.91%)</title><rect x="733.8" y="229" width="22.6" height="15.0" fill="rgb(209,218,43)" rx="2" ry="2" />
<text  x="736.80" y="239.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (404,269 us., 1.66%)</title><rect x="253.3" y="229" width="19.5" height="15.0" fill="rgb(207,3,15)" rx="2" ry="2" />
<text  x="256.29" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,667 us., 0.02%)</title><rect x="733.2" y="165" width="0.2" height="15.0" fill="rgb(227,27,34)" rx="2" ry="2" />
<text  x="736.22" y="175.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (7,558 us., 0.03%)</title><rect x="917.1" y="197" width="0.4" height="15.0" fill="rgb(231,45,10)" rx="2" ry="2" />
<text  x="920.14" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (265,837 us., 1.09%)</title><rect x="782.6" y="229" width="12.8" height="15.0" fill="rgb(206,197,23)" rx="2" ry="2" />
<text  x="785.58" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (404,269 us., 1.66%)</title><rect x="253.3" y="197" width="19.5" height="15.0" fill="rgb(239,12,29)" rx="2" ry="2" />
<text  x="256.29" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (9,528,229 us., 39.02%)</title><rect x="272.8" y="197" width="460.4" height="15.0" fill="rgb(246,12,39)" rx="2" ry="2" />
<text  x="275.82" y="207.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (314,530 us., 1.29%)</title><rect x="767.4" y="229" width="15.2" height="15.0" fill="rgb(208,26,6)" rx="2" ry="2" />
<text  x="770.39" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (3,031 us., 0.01%)</title><rect x="36.9" y="213" width="0.1" height="15.0" fill="rgb(222,150,20)" rx="2" ry="2" />
<text  x="39.89" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (8,302 us., 0.03%)</title><rect x="37.4" y="197" width="0.4" height="15.0" fill="rgb(215,174,25)" rx="2" ry="2" />
<text  x="40.44" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (227,547 us., 0.93%)</title><rect x="756.4" y="197" width="11.0" height="15.0" fill="rgb(218,229,39)" rx="2" ry="2" />
<text  x="759.39" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (265,837 us., 1.09%)</title><rect x="782.6" y="181" width="12.8" height="15.0" fill="rgb(219,126,45)" rx="2" ry="2" />
<text  x="785.58" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (265,837 us., 1.09%)</title><rect x="782.6" y="101" width="12.8" height="15.0" fill="rgb(234,92,49)" rx="2" ry="2" />
<text  x="785.58" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,523,093 us., 10.33%)</title><rect x="37.8" y="69" width="122.0" height="15.0" fill="rgb(236,59,24)" rx="2" ry="2" />
<text  x="40.85" y="79.5" >torch/autograd/..</text>
</g>
<g >
<title>torch_int/nn/opt.py(69):__shape (404,269 us., 1.66%)</title><rect x="253.3" y="245" width="19.5" height="15.0" fill="rgb(224,55,50)" rx="2" ry="2" />
<text  x="256.29" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (950,729 us., 3.89%)</title><rect x="205.8" y="133" width="45.9" height="15.0" fill="rgb(240,136,12)" rx="2" ry="2" />
<text  x="208.80" y="143.5" >torc..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (159,991 us., 0.66%)</title><rect x="774.9" y="181" width="7.7" height="15.0" fill="rgb(212,101,45)" rx="2" ry="2" />
<text  x="777.85" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,667 us., 0.02%)</title><rect x="733.2" y="197" width="0.2" height="15.0" fill="rgb(207,208,13)" rx="2" ry="2" />
<text  x="736.22" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (7,558 us., 0.03%)</title><rect x="917.1" y="245" width="0.4" height="15.0" fill="rgb(225,203,26)" rx="2" ry="2" />
<text  x="920.14" y="255.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (474,920 us., 1.94%)</title><rect x="733.4" y="245" width="23.0" height="15.0" fill="rgb(215,6,11)" rx="2" ry="2" />
<text  x="736.45" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (227,547 us., 0.93%)</title><rect x="756.4" y="133" width="11.0" height="15.0" fill="rgb(250,194,16)" rx="2" ry="2" />
<text  x="759.39" y="143.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (154,539 us., 0.63%)</title><rect x="767.4" y="101" width="7.5" height="15.0" fill="rgb(247,224,18)" rx="2" ry="2" />
<text  x="770.39" y="111.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (32,077 us., 0.13%)</title><rect x="251.7" y="165" width="1.6" height="15.0" fill="rgb(247,3,26)" rx="2" ry="2" />
<text  x="254.74" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (5,639,048 us., 23.09%)</title><rect x="917.5" y="197" width="272.5" height="15.0" fill="rgb(235,73,36)" rx="2" ry="2" />
<text  x="920.50" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (2,516,546 us., 10.30%)</title><rect x="795.4" y="197" width="121.6" height="15.0" fill="rgb(246,32,22)" rx="2" ry="2" />
<text  x="798.43" y="207.5" >torch_int/nn/op..</text>
</g>
</g>
</svg>
