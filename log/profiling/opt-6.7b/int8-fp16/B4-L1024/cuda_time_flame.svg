<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>torch_int/nn/opt.py(346):_forward (426,349 us., 0.88%)</title><rect x="755.9" y="117" width="10.3" height="15.0" fill="rgb(244,86,45)" rx="2" ry="2" />
<text  x="758.87" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (16,863 us., 0.03%)</title><rect x="37.4" y="165" width="0.4" height="15.0" fill="rgb(222,32,30)" rx="2" ry="2" />
<text  x="40.37" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (312,544 us., 0.64%)</title><rect x="773.7" y="165" width="7.6" height="15.0" fill="rgb(205,197,17)" rx="2" ry="2" />
<text  x="776.70" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f6663304750&gt; (529,966 us., 1.09%)</title><rect x="781.3" y="261" width="12.9" height="15.0" fill="rgb(227,25,43)" rx="2" ry="2" />
<text  x="784.29" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (5,033,276 us., 10.36%)</title><rect x="37.8" y="149" width="122.2" height="15.0" fill="rgb(211,229,30)" rx="2" ry="2" />
<text  x="40.78" y="159.5" >torch_int/nn/op..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (308,063 us., 0.63%)</title><rect x="766.2" y="101" width="7.5" height="15.0" fill="rgb(213,213,11)" rx="2" ry="2" />
<text  x="769.22" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (426,349 us., 0.88%)</title><rect x="755.9" y="101" width="10.3" height="15.0" fill="rgb(245,0,50)" rx="2" ry="2" />
<text  x="758.87" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (68,353 us., 0.14%)</title><rect x="250.9" y="181" width="1.6" height="15.0" fill="rgb(251,94,0)" rx="2" ry="2" />
<text  x="253.86" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (5,025,662 us., 10.34%)</title><rect x="794.2" y="245" width="122.0" height="15.0" fill="rgb(208,105,6)" rx="2" ry="2" />
<text  x="797.16" y="255.5" >torch_int/nn/op..</text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7f6757e6a9c0&gt; (33,923 us., 0.07%)</title><rect x="37.0" y="261" width="0.8" height="15.0" fill="rgb(217,156,46)" rx="2" ry="2" />
<text  x="39.96" y="271.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (5,033,276 us., 10.36%)</title><rect x="37.8" y="117" width="122.2" height="15.0" fill="rgb(223,201,22)" rx="2" ry="2" />
<text  x="40.78" y="127.5" >transformers/mo..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,850,263 us., 3.81%)</title><rect x="160.0" y="197" width="44.9" height="15.0" fill="rgb(245,157,1)" rx="2" ry="2" />
<text  x="163.02" y="207.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_W8A8BFP32OFP32Linear (620,607 us., 1.28%)</title><rect x="766.2" y="213" width="15.1" height="15.0" fill="rgb(220,42,47)" rx="2" ry="2" />
<text  x="769.22" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (312,544 us., 0.64%)</title><rect x="773.7" y="117" width="7.6" height="15.0" fill="rgb(247,146,24)" rx="2" ry="2" />
<text  x="776.70" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (5,033,276 us., 10.36%)</title><rect x="37.8" y="85" width="122.2" height="15.0" fill="rgb(235,228,48)" rx="2" ry="2" />
<text  x="40.78" y="95.5" >profiling/utils..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (18,983,293 us., 39.07%)</title><rect x="271.7" y="85" width="461.0" height="15.0" fill="rgb(216,3,40)" rx="2" ry="2" />
<text  x="274.66" y="95.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (14,944 us., 0.03%)</title><rect x="916.4" y="181" width="0.3" height="15.0" fill="rgb(252,7,54)" rx="2" ry="2" />
<text  x="919.37" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (312,544 us., 0.64%)</title><rect x="773.7" y="197" width="7.6" height="15.0" fill="rgb(210,32,25)" rx="2" ry="2" />
<text  x="776.70" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (788,201 us., 1.62%)</title><rect x="252.5" y="229" width="19.2" height="15.0" fill="rgb(243,129,20)" rx="2" ry="2" />
<text  x="255.52" y="239.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_bfp32_ofp32_of_PyCapsule_object_at_0x7f66633047b0&gt; (620,607 us., 1.28%)</title><rect x="766.2" y="261" width="15.1" height="15.0" fill="rgb(243,57,8)" rx="2" ry="2" />
<text  x="769.22" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (308,063 us., 0.63%)</title><rect x="766.2" y="149" width="7.5" height="15.0" fill="rgb(209,62,31)" rx="2" ry="2" />
<text  x="769.22" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (68,353 us., 0.14%)</title><rect x="250.9" y="149" width="1.6" height="15.0" fill="rgb(205,9,34)" rx="2" ry="2" />
<text  x="253.86" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (5,025,662 us., 10.34%)</title><rect x="794.2" y="101" width="122.0" height="15.0" fill="rgb(214,179,21)" rx="2" ry="2" />
<text  x="797.16" y="111.5" >profiling/utils..</text>
</g>
<g >
<title>torch_int/nn/opt.py(69):__shape (788,201 us., 1.62%)</title><rect x="252.5" y="245" width="19.2" height="15.0" fill="rgb(211,226,30)" rx="2" ry="2" />
<text  x="255.52" y="255.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (5,033,276 us., 10.36%)</title><rect x="37.8" y="245" width="122.2" height="15.0" fill="rgb(229,228,0)" rx="2" ry="2" />
<text  x="40.78" y="255.5" >torch/nn/functi..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (5,025,662 us., 10.34%)</title><rect x="794.2" y="213" width="122.0" height="15.0" fill="rgb(205,100,46)" rx="2" ry="2" />
<text  x="797.16" y="223.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (5,025,662 us., 10.34%)</title><rect x="794.2" y="85" width="122.0" height="15.0" fill="rgb(210,148,15)" rx="2" ry="2" />
<text  x="797.16" y="95.5" >torch/autograd/..</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (1,850,263 us., 3.81%)</title><rect x="160.0" y="245" width="44.9" height="15.0" fill="rgb(254,83,33)" rx="2" ry="2" />
<text  x="163.02" y="255.5" >torc..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (17,060 us., 0.04%)</title><rect x="37.0" y="181" width="0.4" height="15.0" fill="rgb(208,185,0)" rx="2" ry="2" />
<text  x="39.96" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (426,349 us., 0.88%)</title><rect x="755.9" y="53" width="10.3" height="15.0" fill="rgb(242,49,41)" rx="2" ry="2" />
<text  x="758.87" y="63.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (788,201 us., 1.62%)</title><rect x="252.5" y="213" width="19.2" height="15.0" fill="rgb(228,42,21)" rx="2" ry="2" />
<text  x="255.52" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (11,251,667 us., 23.16%)</title><rect x="916.7" y="165" width="273.3" height="15.0" fill="rgb(254,117,43)" rx="2" ry="2" />
<text  x="919.74" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,890,573 us., 3.89%)</title><rect x="204.9" y="165" width="46.0" height="15.0" fill="rgb(241,8,32)" rx="2" ry="2" />
<text  x="207.95" y="175.5" >nn.M..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (788,201 us., 1.62%)</title><rect x="252.5" y="149" width="19.2" height="15.0" fill="rgb(244,3,31)" rx="2" ry="2" />
<text  x="255.52" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (5,025,662 us., 10.34%)</title><rect x="794.2" y="165" width="122.0" height="15.0" fill="rgb(248,106,1)" rx="2" ry="2" />
<text  x="797.16" y="175.5" >torch_int/nn/op..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,890,573 us., 3.89%)</title><rect x="204.9" y="133" width="46.0" height="15.0" fill="rgb(247,126,2)" rx="2" ry="2" />
<text  x="207.95" y="143.5" >torc..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (16,863 us., 0.03%)</title><rect x="37.4" y="101" width="0.4" height="15.0" fill="rgb(250,97,2)" rx="2" ry="2" />
<text  x="40.37" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (788,201 us., 1.62%)</title><rect x="252.5" y="133" width="19.2" height="15.0" fill="rgb(227,86,48)" rx="2" ry="2" />
<text  x="255.52" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,850,263 us., 3.81%)</title><rect x="160.0" y="133" width="44.9" height="15.0" fill="rgb(250,27,31)" rx="2" ry="2" />
<text  x="163.02" y="143.5" >nn.M..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (18,983,293 us., 39.07%)</title><rect x="271.7" y="245" width="461.0" height="15.0" fill="rgb(253,78,19)" rx="2" ry="2" />
<text  x="274.66" y="255.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,890,573 us., 3.89%)</title><rect x="204.9" y="229" width="46.0" height="15.0" fill="rgb(251,28,19)" rx="2" ry="2" />
<text  x="207.95" y="239.5" >nn.M..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (788,201 us., 1.62%)</title><rect x="252.5" y="85" width="19.2" height="15.0" fill="rgb(253,179,43)" rx="2" ry="2" />
<text  x="255.52" y="95.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (10,856 us., 0.02%)</title><rect x="732.7" y="149" width="0.2" height="15.0" fill="rgb(249,20,37)" rx="2" ry="2" />
<text  x="735.68" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (17,060 us., 0.04%)</title><rect x="37.0" y="133" width="0.4" height="15.0" fill="rgb(205,140,47)" rx="2" ry="2" />
<text  x="39.96" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNormQ (1,850,263 us., 3.81%)</title><rect x="160.0" y="229" width="44.9" height="15.0" fill="rgb(233,164,8)" rx="2" ry="2" />
<text  x="163.02" y="239.5" >nn.M..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (426,349 us., 0.88%)</title><rect x="755.9" y="37" width="10.3" height="15.0" fill="rgb(231,178,45)" rx="2" ry="2" />
<text  x="758.87" y="47.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (11,251,667 us., 23.16%)</title><rect x="916.7" y="213" width="273.3" height="15.0" fill="rgb(227,26,13)" rx="2" ry="2" />
<text  x="919.74" y="223.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (68,353 us., 0.14%)</title><rect x="250.9" y="165" width="1.6" height="15.0" fill="rgb(208,134,35)" rx="2" ry="2" />
<text  x="253.86" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (14,944 us., 0.03%)</title><rect x="916.4" y="229" width="0.3" height="15.0" fill="rgb(241,40,34)" rx="2" ry="2" />
<text  x="919.37" y="239.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (929,170 us., 1.91%)</title><rect x="733.3" y="101" width="22.6" height="15.0" fill="rgb(227,26,51)" rx="2" ry="2" />
<text  x="736.30" y="111.5" >p..</text>
</g>
<g >
<title>nn.Module:_Linear (1,106,822 us., 2.28%)</title><rect x="10.0" y="229" width="26.9" height="15.0" fill="rgb(224,165,34)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (11,251,667 us., 23.16%)</title><rect x="916.7" y="133" width="273.3" height="15.0" fill="rgb(213,106,27)" rx="2" ry="2" />
<text  x="919.74" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (33,923 us., 0.07%)</title><rect x="37.0" y="245" width="0.8" height="15.0" fill="rgb(239,187,46)" rx="2" ry="2" />
<text  x="39.96" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (529,966 us., 1.09%)</title><rect x="781.3" y="85" width="12.9" height="15.0" fill="rgb(241,144,49)" rx="2" ry="2" />
<text  x="784.29" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,850,263 us., 3.81%)</title><rect x="160.0" y="181" width="44.9" height="15.0" fill="rgb(223,217,1)" rx="2" ry="2" />
<text  x="163.02" y="191.5" >torc..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (11,251,667 us., 23.16%)</title><rect x="916.7" y="181" width="273.3" height="15.0" fill="rgb(238,223,33)" rx="2" ry="2" />
<text  x="919.74" y="191.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (18,983,293 us., 39.07%)</title><rect x="271.7" y="165" width="461.0" height="15.0" fill="rgb(217,126,19)" rx="2" ry="2" />
<text  x="274.66" y="175.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (312,544 us., 0.64%)</title><rect x="773.7" y="53" width="7.6" height="15.0" fill="rgb(209,134,13)" rx="2" ry="2" />
<text  x="776.70" y="63.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (529,966 us., 1.09%)</title><rect x="781.3" y="101" width="12.9" height="15.0" fill="rgb(247,122,31)" rx="2" ry="2" />
<text  x="784.29" y="111.5" ></text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (14,502 us., 0.03%)</title><rect x="732.9" y="229" width="0.4" height="15.0" fill="rgb(234,13,27)" rx="2" ry="2" />
<text  x="735.95" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (14,502 us., 0.03%)</title><rect x="732.9" y="197" width="0.4" height="15.0" fill="rgb(233,87,53)" rx="2" ry="2" />
<text  x="735.95" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (929,170 us., 1.91%)</title><rect x="733.3" y="85" width="22.6" height="15.0" fill="rgb(215,167,46)" rx="2" ry="2" />
<text  x="736.30" y="95.5" >t..</text>
</g>
<g >
<title>nn.Module:_Embedding (17,060 us., 0.04%)</title><rect x="37.0" y="213" width="0.4" height="15.0" fill="rgb(216,30,47)" rx="2" ry="2" />
<text  x="39.96" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (10,856 us., 0.02%)</title><rect x="732.7" y="229" width="0.2" height="15.0" fill="rgb(222,88,34)" rx="2" ry="2" />
<text  x="735.68" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (10,856 us., 0.02%)</title><rect x="732.7" y="197" width="0.2" height="15.0" fill="rgb(205,181,11)" rx="2" ry="2" />
<text  x="735.68" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (5,033,276 us., 10.36%)</title><rect x="37.8" y="181" width="122.2" height="15.0" fill="rgb(232,63,53)" rx="2" ry="2" />
<text  x="40.78" y="191.5" >torch_int/nn/op..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (16,863 us., 0.03%)</title><rect x="37.4" y="149" width="0.4" height="15.0" fill="rgb(239,142,29)" rx="2" ry="2" />
<text  x="40.37" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,850,263 us., 3.81%)</title><rect x="160.0" y="213" width="44.9" height="15.0" fill="rgb(237,216,42)" rx="2" ry="2" />
<text  x="163.02" y="223.5" >torc..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (308,063 us., 0.63%)</title><rect x="766.2" y="165" width="7.5" height="15.0" fill="rgb(228,178,45)" rx="2" ry="2" />
<text  x="769.22" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (312,544 us., 0.64%)</title><rect x="773.7" y="149" width="7.6" height="15.0" fill="rgb(221,48,11)" rx="2" ry="2" />
<text  x="776.70" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (17,060 us., 0.04%)</title><rect x="37.0" y="197" width="0.4" height="15.0" fill="rgb(243,210,47)" rx="2" ry="2" />
<text  x="39.96" y="207.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (1,106,822 us., 2.28%)</title><rect x="10.0" y="261" width="26.9" height="15.0" fill="rgb(236,75,36)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (529,966 us., 1.09%)</title><rect x="781.3" y="197" width="12.9" height="15.0" fill="rgb(228,18,51)" rx="2" ry="2" />
<text  x="784.29" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (788,201 us., 1.62%)</title><rect x="252.5" y="197" width="19.2" height="15.0" fill="rgb(248,51,27)" rx="2" ry="2" />
<text  x="255.52" y="207.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f6663304810&gt; (426,349 us., 0.88%)</title><rect x="755.9" y="261" width="10.3" height="15.0" fill="rgb(224,117,24)" rx="2" ry="2" />
<text  x="758.87" y="271.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (16,863 us., 0.03%)</title><rect x="37.4" y="117" width="0.4" height="15.0" fill="rgb(237,45,0)" rx="2" ry="2" />
<text  x="40.37" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (14,502 us., 0.03%)</title><rect x="732.9" y="117" width="0.4" height="15.0" fill="rgb(220,73,12)" rx="2" ry="2" />
<text  x="735.95" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (308,063 us., 0.63%)</title><rect x="766.2" y="197" width="7.5" height="15.0" fill="rgb(228,169,33)" rx="2" ry="2" />
<text  x="769.22" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (10,856 us., 0.02%)</title><rect x="732.7" y="165" width="0.2" height="15.0" fill="rgb(224,85,51)" rx="2" ry="2" />
<text  x="735.68" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (10,856 us., 0.02%)</title><rect x="732.7" y="213" width="0.2" height="15.0" fill="rgb(219,115,3)" rx="2" ry="2" />
<text  x="735.68" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (308,063 us., 0.63%)</title><rect x="766.2" y="181" width="7.5" height="15.0" fill="rgb(219,25,39)" rx="2" ry="2" />
<text  x="769.22" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (11,251,667 us., 23.16%)</title><rect x="916.7" y="245" width="273.3" height="15.0" fill="rgb(241,185,9)" rx="2" ry="2" />
<text  x="919.74" y="255.5" >torch/autograd/grad_mode.py(24):_dec..</text>
</g>
<g >
<title>torch_int/nn/linear.py(90):_forward (529,966 us., 1.09%)</title><rect x="781.3" y="245" width="12.9" height="15.0" fill="rgb(236,12,20)" rx="2" ry="2" />
<text  x="784.29" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (17,060 us., 0.04%)</title><rect x="37.0" y="149" width="0.4" height="15.0" fill="rgb(232,51,7)" rx="2" ry="2" />
<text  x="39.96" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,106,822 us., 2.28%)</title><rect x="10.0" y="165" width="26.9" height="15.0" fill="rgb(245,43,4)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,890,573 us., 3.89%)</title><rect x="204.9" y="213" width="46.0" height="15.0" fill="rgb(211,84,13)" rx="2" ry="2" />
<text  x="207.95" y="223.5" >torc..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (929,170 us., 1.91%)</title><rect x="733.3" y="197" width="22.6" height="15.0" fill="rgb(228,58,4)" rx="2" ry="2" />
<text  x="736.30" y="207.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (5,033,276 us., 10.36%)</title><rect x="37.8" y="69" width="122.2" height="15.0" fill="rgb(251,3,48)" rx="2" ry="2" />
<text  x="40.78" y="79.5" >torch/autograd/..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (16,863 us., 0.03%)</title><rect x="37.4" y="197" width="0.4" height="15.0" fill="rgb(219,122,3)" rx="2" ry="2" />
<text  x="40.37" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (929,170 us., 1.91%)</title><rect x="733.3" y="149" width="22.6" height="15.0" fill="rgb(243,195,7)" rx="2" ry="2" />
<text  x="736.30" y="159.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (308,063 us., 0.63%)</title><rect x="766.2" y="85" width="7.5" height="15.0" fill="rgb(205,62,51)" rx="2" ry="2" />
<text  x="769.22" y="95.5" ></text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (929,170 us., 1.91%)</title><rect x="733.3" y="229" width="22.6" height="15.0" fill="rgb(207,142,0)" rx="2" ry="2" />
<text  x="736.30" y="239.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (929,170 us., 1.91%)</title><rect x="733.3" y="117" width="22.6" height="15.0" fill="rgb(232,7,34)" rx="2" ry="2" />
<text  x="736.30" y="127.5" >n..</text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7f6757e6a9c0&gt; (5,025,662 us., 10.34%)</title><rect x="794.2" y="261" width="122.0" height="15.0" fill="rgb(226,117,21)" rx="2" ry="2" />
<text  x="797.16" y="271.5" >&lt;built-in_metho..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,890,573 us., 3.89%)</title><rect x="204.9" y="197" width="46.0" height="15.0" fill="rgb(208,3,43)" rx="2" ry="2" />
<text  x="207.95" y="207.5" >nn.M..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (5,033,276 us., 10.36%)</title><rect x="37.8" y="101" width="122.2" height="15.0" fill="rgb(230,35,28)" rx="2" ry="2" />
<text  x="40.78" y="111.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (426,349 us., 0.88%)</title><rect x="755.9" y="149" width="10.3" height="15.0" fill="rgb(215,176,16)" rx="2" ry="2" />
<text  x="758.87" y="159.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (943,672 us., 1.94%)</title><rect x="732.9" y="245" width="23.0" height="15.0" fill="rgb(243,155,11)" rx="2" ry="2" />
<text  x="735.95" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_LayerNormQ (929,170 us., 1.91%)</title><rect x="733.3" y="213" width="22.6" height="15.0" fill="rgb(241,0,12)" rx="2" ry="2" />
<text  x="736.30" y="223.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (16,863 us., 0.03%)</title><rect x="37.4" y="213" width="0.4" height="15.0" fill="rgb(254,216,10)" rx="2" ry="2" />
<text  x="40.37" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (14,502 us., 0.03%)</title><rect x="732.9" y="165" width="0.4" height="15.0" fill="rgb(245,107,23)" rx="2" ry="2" />
<text  x="735.95" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (929,170 us., 1.91%)</title><rect x="733.3" y="133" width="22.6" height="15.0" fill="rgb(234,108,30)" rx="2" ry="2" />
<text  x="736.30" y="143.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (308,063 us., 0.63%)</title><rect x="766.2" y="117" width="7.5" height="15.0" fill="rgb(247,87,38)" rx="2" ry="2" />
<text  x="769.22" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (16,863 us., 0.03%)</title><rect x="37.4" y="133" width="0.4" height="15.0" fill="rgb(242,125,43)" rx="2" ry="2" />
<text  x="40.37" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (18,983,293 us., 39.07%)</title><rect x="271.7" y="149" width="461.0" height="15.0" fill="rgb(233,0,38)" rx="2" ry="2" />
<text  x="274.66" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (5,025,662 us., 10.34%)</title><rect x="794.2" y="229" width="122.0" height="15.0" fill="rgb(213,95,45)" rx="2" ry="2" />
<text  x="797.16" y="239.5" >torch/autograd/..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (788,201 us., 1.62%)</title><rect x="252.5" y="165" width="19.2" height="15.0" fill="rgb(247,225,49)" rx="2" ry="2" />
<text  x="255.52" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (10,856 us., 0.02%)</title><rect x="732.7" y="181" width="0.2" height="15.0" fill="rgb(215,112,7)" rx="2" ry="2" />
<text  x="735.68" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,890,573 us., 3.89%)</title><rect x="204.9" y="245" width="46.0" height="15.0" fill="rgb(227,111,8)" rx="2" ry="2" />
<text  x="207.95" y="255.5" >torc..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (14,502 us., 0.03%)</title><rect x="732.9" y="149" width="0.4" height="15.0" fill="rgb(242,71,51)" rx="2" ry="2" />
<text  x="735.95" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (14,944 us., 0.03%)</title><rect x="916.4" y="197" width="0.3" height="15.0" fill="rgb(226,156,34)" rx="2" ry="2" />
<text  x="919.37" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (929,170 us., 1.91%)</title><rect x="733.3" y="165" width="22.6" height="15.0" fill="rgb(237,145,47)" rx="2" ry="2" />
<text  x="736.30" y="175.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (10,856 us., 0.02%)</title><rect x="732.7" y="133" width="0.2" height="15.0" fill="rgb(235,28,26)" rx="2" ry="2" />
<text  x="735.68" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (11,251,667 us., 23.16%)</title><rect x="916.7" y="101" width="273.3" height="15.0" fill="rgb(226,138,7)" rx="2" ry="2" />
<text  x="919.74" y="111.5" >torch/autograd/grad_mode.py(27):_dec..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (17,060 us., 0.04%)</title><rect x="37.0" y="165" width="0.4" height="15.0" fill="rgb(207,25,28)" rx="2" ry="2" />
<text  x="39.96" y="175.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (426,349 us., 0.88%)</title><rect x="755.9" y="197" width="10.3" height="15.0" fill="rgb(245,116,51)" rx="2" ry="2" />
<text  x="758.87" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (14,944 us., 0.03%)</title><rect x="916.4" y="213" width="0.3" height="15.0" fill="rgb(254,128,5)" rx="2" ry="2" />
<text  x="919.37" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (18,983,293 us., 39.07%)</title><rect x="271.7" y="117" width="461.0" height="15.0" fill="rgb(245,61,4)" rx="2" ry="2" />
<text  x="274.66" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (5,025,662 us., 10.34%)</title><rect x="794.2" y="197" width="122.0" height="15.0" fill="rgb(235,205,18)" rx="2" ry="2" />
<text  x="797.16" y="207.5" >torch_int/nn/op..</text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7f66639614b0&gt; (28,625,120 us., 58.91%)</title><rect x="37.8" y="261" width="695.1" height="15.0" fill="rgb(237,24,47)" rx="2" ry="2" />
<text  x="40.78" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7f66639614b0&gt;</text>
</g>
<g >
<title>torch_int/nn/linear.py(40):_forward (426,349 us., 0.88%)</title><rect x="755.9" y="245" width="10.3" height="15.0" fill="rgb(236,183,11)" rx="2" ry="2" />
<text  x="758.87" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(225):_forward (620,607 us., 1.28%)</title><rect x="766.2" y="245" width="15.1" height="15.0" fill="rgb(238,73,15)" rx="2" ry="2" />
<text  x="769.22" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (14,502 us., 0.03%)</title><rect x="732.9" y="181" width="0.4" height="15.0" fill="rgb(206,85,29)" rx="2" ry="2" />
<text  x="735.95" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (14,502 us., 0.03%)</title><rect x="732.9" y="133" width="0.4" height="15.0" fill="rgb(238,77,13)" rx="2" ry="2" />
<text  x="735.95" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (312,544 us., 0.64%)</title><rect x="773.7" y="85" width="7.6" height="15.0" fill="rgb(239,62,23)" rx="2" ry="2" />
<text  x="776.70" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,850,263 us., 3.81%)</title><rect x="160.0" y="101" width="44.9" height="15.0" fill="rgb(238,39,16)" rx="2" ry="2" />
<text  x="163.02" y="111.5" >torc..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (68,353 us., 0.14%)</title><rect x="250.9" y="197" width="1.6" height="15.0" fill="rgb(252,48,52)" rx="2" ry="2" />
<text  x="253.86" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (18,983,293 us., 39.07%)</title><rect x="271.7" y="213" width="461.0" height="15.0" fill="rgb(236,125,1)" rx="2" ry="2" />
<text  x="274.66" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (11,251,667 us., 23.16%)</title><rect x="916.7" y="261" width="273.3" height="15.0" fill="rgb(237,102,30)" rx="2" ry="2" />
<text  x="919.74" y="271.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (5,033,276 us., 10.36%)</title><rect x="37.8" y="133" width="122.2" height="15.0" fill="rgb(220,10,20)" rx="2" ry="2" />
<text  x="40.78" y="143.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (312,544 us., 0.64%)</title><rect x="773.7" y="69" width="7.6" height="15.0" fill="rgb(232,224,44)" rx="2" ry="2" />
<text  x="776.70" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,850,263 us., 3.81%)</title><rect x="160.0" y="165" width="44.9" height="15.0" fill="rgb(241,192,49)" rx="2" ry="2" />
<text  x="163.02" y="175.5" >nn.M..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (308,063 us., 0.63%)</title><rect x="766.2" y="133" width="7.5" height="15.0" fill="rgb(242,148,43)" rx="2" ry="2" />
<text  x="769.22" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (68,353 us., 0.14%)</title><rect x="250.9" y="229" width="1.6" height="15.0" fill="rgb(213,25,35)" rx="2" ry="2" />
<text  x="253.86" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNorm (14,502 us., 0.03%)</title><rect x="732.9" y="213" width="0.4" height="15.0" fill="rgb(238,157,39)" rx="2" ry="2" />
<text  x="735.95" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (529,966 us., 1.09%)</title><rect x="781.3" y="229" width="12.9" height="15.0" fill="rgb(222,3,39)" rx="2" ry="2" />
<text  x="784.29" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (5,025,662 us., 10.34%)</title><rect x="794.2" y="117" width="122.0" height="15.0" fill="rgb(222,131,49)" rx="2" ry="2" />
<text  x="797.16" y="127.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (18,983,293 us., 39.07%)</title><rect x="271.7" y="229" width="461.0" height="15.0" fill="rgb(248,186,11)" rx="2" ry="2" />
<text  x="274.66" y="239.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (68,353 us., 0.14%)</title><rect x="250.9" y="213" width="1.6" height="15.0" fill="rgb(227,1,15)" rx="2" ry="2" />
<text  x="253.86" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (529,966 us., 1.09%)</title><rect x="781.3" y="117" width="12.9" height="15.0" fill="rgb(206,80,49)" rx="2" ry="2" />
<text  x="784.29" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (5,025,662 us., 10.34%)</title><rect x="794.2" y="181" width="122.0" height="15.0" fill="rgb(214,194,1)" rx="2" ry="2" />
<text  x="797.16" y="191.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (529,966 us., 1.09%)</title><rect x="781.3" y="213" width="12.9" height="15.0" fill="rgb(214,223,44)" rx="2" ry="2" />
<text  x="784.29" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (5,033,276 us., 10.36%)</title><rect x="37.8" y="229" width="122.2" height="15.0" fill="rgb(251,28,26)" rx="2" ry="2" />
<text  x="40.78" y="239.5" >torch_int/nn/op..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (5,033,276 us., 10.36%)</title><rect x="37.8" y="165" width="122.2" height="15.0" fill="rgb(236,165,12)" rx="2" ry="2" />
<text  x="40.78" y="175.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (929,170 us., 1.91%)</title><rect x="733.3" y="181" width="22.6" height="15.0" fill="rgb(218,226,36)" rx="2" ry="2" />
<text  x="736.30" y="191.5" >n..</text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7f6757e6a9c0&gt; (943,672 us., 1.94%)</title><rect x="732.9" y="261" width="23.0" height="15.0" fill="rgb(239,74,44)" rx="2" ry="2" />
<text  x="735.95" y="271.5" >&lt;..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (18,983,293 us., 39.07%)</title><rect x="271.7" y="181" width="461.0" height="15.0" fill="rgb(249,165,47)" rx="2" ry="2" />
<text  x="274.66" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (11,251,667 us., 23.16%)</title><rect x="916.7" y="197" width="273.3" height="15.0" fill="rgb(236,199,12)" rx="2" ry="2" />
<text  x="919.74" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (10,856 us., 0.02%)</title><rect x="732.7" y="245" width="0.2" height="15.0" fill="rgb(246,126,1)" rx="2" ry="2" />
<text  x="735.68" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (426,349 us., 0.88%)</title><rect x="755.9" y="85" width="10.3" height="15.0" fill="rgb(216,104,0)" rx="2" ry="2" />
<text  x="758.87" y="95.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,106,822 us., 2.28%)</title><rect x="10.0" y="181" width="26.9" height="15.0" fill="rgb(214,50,14)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >p..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (17,060 us., 0.04%)</title><rect x="37.0" y="117" width="0.4" height="15.0" fill="rgb(222,188,28)" rx="2" ry="2" />
<text  x="39.96" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (788,201 us., 1.62%)</title><rect x="252.5" y="69" width="19.2" height="15.0" fill="rgb(242,120,6)" rx="2" ry="2" />
<text  x="255.52" y="79.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (18,983,293 us., 39.07%)</title><rect x="271.7" y="101" width="461.0" height="15.0" fill="rgb(205,96,28)" rx="2" ry="2" />
<text  x="274.66" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,850,263 us., 3.81%)</title><rect x="160.0" y="117" width="44.9" height="15.0" fill="rgb(230,104,41)" rx="2" ry="2" />
<text  x="163.02" y="127.5" >prof..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (5,033,276 us., 10.36%)</title><rect x="37.8" y="213" width="122.2" height="15.0" fill="rgb(218,172,22)" rx="2" ry="2" />
<text  x="40.78" y="223.5" >torch/autograd/..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,850,263 us., 3.81%)</title><rect x="160.0" y="149" width="44.9" height="15.0" fill="rgb(254,99,1)" rx="2" ry="2" />
<text  x="163.02" y="159.5" >tran..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (312,544 us., 0.64%)</title><rect x="773.7" y="101" width="7.6" height="15.0" fill="rgb(238,175,3)" rx="2" ry="2" />
<text  x="776.70" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (5,025,662 us., 10.34%)</title><rect x="794.2" y="149" width="122.0" height="15.0" fill="rgb(235,115,11)" rx="2" ry="2" />
<text  x="797.16" y="159.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (426,349 us., 0.88%)</title><rect x="755.9" y="133" width="10.3" height="15.0" fill="rgb(212,184,35)" rx="2" ry="2" />
<text  x="758.87" y="143.5" ></text>
</g>
<g >
<title>all (48,589,249 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(221,117,5)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (426,349 us., 0.88%)</title><rect x="755.9" y="69" width="10.3" height="15.0" fill="rgb(251,72,7)" rx="2" ry="2" />
<text  x="758.87" y="79.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (18,983,293 us., 39.07%)</title><rect x="271.7" y="197" width="461.0" height="15.0" fill="rgb(205,203,50)" rx="2" ry="2" />
<text  x="274.66" y="207.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,106,822 us., 2.28%)</title><rect x="10.0" y="213" width="26.9" height="15.0" fill="rgb(241,103,10)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >t..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,890,573 us., 3.89%)</title><rect x="204.9" y="149" width="46.0" height="15.0" fill="rgb(245,21,12)" rx="2" ry="2" />
<text  x="207.95" y="159.5" >prof..</text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (1,106,822 us., 2.28%)</title><rect x="10.0" y="245" width="26.9" height="15.0" fill="rgb(254,50,11)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (312,544 us., 0.64%)</title><rect x="773.7" y="181" width="7.6" height="15.0" fill="rgb(248,55,54)" rx="2" ry="2" />
<text  x="776.70" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (529,966 us., 1.09%)</title><rect x="781.3" y="165" width="12.9" height="15.0" fill="rgb(248,56,10)" rx="2" ry="2" />
<text  x="784.29" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (18,983,293 us., 39.07%)</title><rect x="271.7" y="133" width="461.0" height="15.0" fill="rgb(229,145,54)" rx="2" ry="2" />
<text  x="274.66" y="143.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (426,349 us., 0.88%)</title><rect x="755.9" y="165" width="10.3" height="15.0" fill="rgb(245,31,19)" rx="2" ry="2" />
<text  x="758.87" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (426,349 us., 0.88%)</title><rect x="755.9" y="229" width="10.3" height="15.0" fill="rgb(244,222,39)" rx="2" ry="2" />
<text  x="758.87" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (788,201 us., 1.62%)</title><rect x="252.5" y="101" width="19.2" height="15.0" fill="rgb(207,217,3)" rx="2" ry="2" />
<text  x="255.52" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (312,544 us., 0.64%)</title><rect x="773.7" y="133" width="7.6" height="15.0" fill="rgb(243,105,19)" rx="2" ry="2" />
<text  x="776.70" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (14,944 us., 0.03%)</title><rect x="916.4" y="261" width="0.3" height="15.0" fill="rgb(243,14,16)" rx="2" ry="2" />
<text  x="919.37" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (11,251,667 us., 23.16%)</title><rect x="916.7" y="229" width="273.3" height="15.0" fill="rgb(236,41,26)" rx="2" ry="2" />
<text  x="919.74" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (426,349 us., 0.88%)</title><rect x="755.9" y="213" width="10.3" height="15.0" fill="rgb(227,216,1)" rx="2" ry="2" />
<text  x="758.87" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (529,966 us., 1.09%)</title><rect x="781.3" y="149" width="12.9" height="15.0" fill="rgb(222,203,1)" rx="2" ry="2" />
<text  x="784.29" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (312,544 us., 0.64%)</title><rect x="773.7" y="37" width="7.6" height="15.0" fill="rgb(208,118,22)" rx="2" ry="2" />
<text  x="776.70" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,106,822 us., 2.28%)</title><rect x="10.0" y="197" width="26.9" height="15.0" fill="rgb(220,200,29)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (5,033,276 us., 10.36%)</title><rect x="37.8" y="197" width="122.2" height="15.0" fill="rgb(239,125,46)" rx="2" ry="2" />
<text  x="40.78" y="207.5" >nn.Module:_Int8..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (788,201 us., 1.62%)</title><rect x="252.5" y="181" width="19.2" height="15.0" fill="rgb(219,211,45)" rx="2" ry="2" />
<text  x="255.52" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (426,349 us., 0.88%)</title><rect x="755.9" y="181" width="10.3" height="15.0" fill="rgb(239,163,12)" rx="2" ry="2" />
<text  x="758.87" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (11,251,667 us., 23.16%)</title><rect x="916.7" y="149" width="273.3" height="15.0" fill="rgb(209,97,3)" rx="2" ry="2" />
<text  x="919.74" y="159.5" >transformers/models/opt/modeling_opt..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (11,251,667 us., 23.16%)</title><rect x="916.7" y="117" width="273.3" height="15.0" fill="rgb(227,107,12)" rx="2" ry="2" />
<text  x="919.74" y="127.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (33,923 us., 0.07%)</title><rect x="37.0" y="229" width="0.8" height="15.0" fill="rgb(219,78,34)" rx="2" ry="2" />
<text  x="39.96" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (529,966 us., 1.09%)</title><rect x="781.3" y="133" width="12.9" height="15.0" fill="rgb(230,18,39)" rx="2" ry="2" />
<text  x="784.29" y="143.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (788,201 us., 1.62%)</title><rect x="252.5" y="117" width="19.2" height="15.0" fill="rgb(250,119,40)" rx="2" ry="2" />
<text  x="255.52" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (16,863 us., 0.03%)</title><rect x="37.4" y="181" width="0.4" height="15.0" fill="rgb(231,124,4)" rx="2" ry="2" />
<text  x="40.37" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (529,966 us., 1.09%)</title><rect x="781.3" y="181" width="12.9" height="15.0" fill="rgb(224,159,13)" rx="2" ry="2" />
<text  x="784.29" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (5,025,662 us., 10.34%)</title><rect x="794.2" y="133" width="122.0" height="15.0" fill="rgb(218,229,33)" rx="2" ry="2" />
<text  x="797.16" y="143.5" >transformers/mo..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,890,573 us., 3.89%)</title><rect x="204.9" y="181" width="46.0" height="15.0" fill="rgb(247,73,1)" rx="2" ry="2" />
<text  x="207.95" y="191.5" >tran..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (620,607 us., 1.28%)</title><rect x="766.2" y="229" width="15.1" height="15.0" fill="rgb(225,9,42)" rx="2" ry="2" />
<text  x="769.22" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (14,944 us., 0.03%)</title><rect x="916.4" y="245" width="0.3" height="15.0" fill="rgb(240,159,33)" rx="2" ry="2" />
<text  x="919.37" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (68,353 us., 0.14%)</title><rect x="250.9" y="245" width="1.6" height="15.0" fill="rgb(238,89,15)" rx="2" ry="2" />
<text  x="253.86" y="255.5" ></text>
</g>
</g>
</svg>
