<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (44,772 us., 1.25%)</title><rect x="825.2" y="85" width="14.7" height="15.0" fill="rgb(239,56,27)" rx="2" ry="2" />
<text  x="828.20" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (82,570 us., 2.30%)</title><rect x="783.3" y="133" width="27.2" height="15.0" fill="rgb(239,13,37)" rx="2" ry="2" />
<text  x="786.26" y="143.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,196 us., 0.03%)</title><rect x="757.7" y="197" width="0.4" height="15.0" fill="rgb(228,226,14)" rx="2" ry="2" />
<text  x="760.73" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (44,772 us., 1.25%)</title><rect x="825.2" y="149" width="14.7" height="15.0" fill="rgb(236,204,13)" rx="2" ry="2" />
<text  x="828.20" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (96,718 us., 2.70%)</title><rect x="306.2" y="181" width="31.9" height="15.0" fill="rgb(214,72,34)" rx="2" ry="2" />
<text  x="309.22" y="191.5" >to..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,400 us., 0.07%)</title><rect x="63.8" y="133" width="0.7" height="15.0" fill="rgb(248,199,43)" rx="2" ry="2" />
<text  x="66.75" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,998 us., 0.06%)</title><rect x="970.9" y="213" width="0.7" height="15.0" fill="rgb(222,195,4)" rx="2" ry="2" />
<text  x="973.95" y="223.5" ></text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7f943b9c39c0&gt; (4,603 us., 0.13%)</title><rect x="63.8" y="261" width="1.5" height="15.0" fill="rgb(213,47,17)" rx="2" ry="2" />
<text  x="66.75" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (82,570 us., 2.30%)</title><rect x="783.3" y="101" width="27.2" height="15.0" fill="rgb(221,126,7)" rx="2" ry="2" />
<text  x="786.26" y="111.5" >n..</text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (4,603 us., 0.13%)</title><rect x="63.8" y="245" width="1.5" height="15.0" fill="rgb(241,194,1)" rx="2" ry="2" />
<text  x="66.75" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (215,736 us., 6.02%)</title><rect x="234.5" y="181" width="71.0" height="15.0" fill="rgb(244,214,40)" rx="2" ry="2" />
<text  x="237.48" y="191.5" >transfor..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (96,718 us., 2.70%)</title><rect x="306.2" y="85" width="31.9" height="15.0" fill="rgb(217,128,31)" rx="2" ry="2" />
<text  x="309.22" y="95.5" >pr..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (2,203 us., 0.06%)</title><rect x="64.5" y="181" width="0.8" height="15.0" fill="rgb(232,144,27)" rx="2" ry="2" />
<text  x="67.54" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (44,772 us., 1.25%)</title><rect x="825.2" y="117" width="14.7" height="15.0" fill="rgb(239,98,45)" rx="2" ry="2" />
<text  x="828.20" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (82,570 us., 2.30%)</title><rect x="783.3" y="53" width="27.2" height="15.0" fill="rgb(226,199,17)" rx="2" ry="2" />
<text  x="786.26" y="63.5" >p..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (76,333 us., 2.13%)</title><rect x="758.1" y="133" width="25.2" height="15.0" fill="rgb(233,222,41)" rx="2" ry="2" />
<text  x="761.12" y="143.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,102 us., 0.06%)</title><rect x="305.5" y="197" width="0.7" height="15.0" fill="rgb(247,120,11)" rx="2" ry="2" />
<text  x="308.53" y="207.5" ></text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7f93474ba4b0&gt; (2,102,502 us., 58.68%)</title><rect x="65.3" y="261" width="692.4" height="15.0" fill="rgb(229,137,42)" rx="2" ry="2" />
<text  x="68.27" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7f93474ba4b0&gt;</text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (324,004 us., 9.04%)</title><rect x="65.3" y="245" width="106.7" height="15.0" fill="rgb(232,77,34)" rx="2" ry="2" />
<text  x="68.27" y="255.5" >torch/nn/func..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (324,004 us., 9.04%)</title><rect x="65.3" y="181" width="106.7" height="15.0" fill="rgb(244,53,35)" rx="2" ry="2" />
<text  x="68.27" y="191.5" >torch_int/nn/..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (324,004 us., 9.04%)</title><rect x="65.3" y="69" width="106.7" height="15.0" fill="rgb(228,7,16)" rx="2" ry="2" />
<text  x="68.27" y="79.5" >torch/autogra..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (89,549 us., 2.50%)</title><rect x="810.5" y="229" width="29.4" height="15.0" fill="rgb(210,104,36)" rx="2" ry="2" />
<text  x="813.45" y="239.5" >to..</text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (1,203 us., 0.03%)</title><rect x="757.3" y="229" width="0.4" height="15.0" fill="rgb(218,140,47)" rx="2" ry="2" />
<text  x="760.33" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (44,777 us., 1.25%)</title><rect x="810.5" y="165" width="14.7" height="15.0" fill="rgb(247,183,42)" rx="2" ry="2" />
<text  x="813.45" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (2,203 us., 0.06%)</title><rect x="64.5" y="197" width="0.8" height="15.0" fill="rgb(236,141,20)" rx="2" ry="2" />
<text  x="67.54" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (599 us., 0.02%)</title><rect x="1189.8" y="261" width="0.2" height="15.0" fill="rgb(206,170,32)" rx="2" ry="2" />
<text  x="1192.80" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,196 us., 0.03%)</title><rect x="757.7" y="181" width="0.4" height="15.0" fill="rgb(251,62,23)" rx="2" ry="2" />
<text  x="760.73" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,196 us., 0.03%)</title><rect x="757.7" y="133" width="0.4" height="15.0" fill="rgb(246,29,20)" rx="2" ry="2" />
<text  x="760.73" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (310 us., 0.01%)</title><rect x="63.6" y="197" width="0.2" height="15.0" fill="rgb(245,126,24)" rx="2" ry="2" />
<text  x="66.65" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8BFP32OFP32Linear (89,549 us., 2.50%)</title><rect x="810.5" y="213" width="29.4" height="15.0" fill="rgb(213,90,16)" rx="2" ry="2" />
<text  x="813.45" y="223.5" >nn..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (310 us., 0.01%)</title><rect x="63.6" y="149" width="0.2" height="15.0" fill="rgb(241,48,45)" rx="2" ry="2" />
<text  x="66.65" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (324,004 us., 9.04%)</title><rect x="65.3" y="133" width="106.7" height="15.0" fill="rgb(245,3,42)" rx="2" ry="2" />
<text  x="68.27" y="143.5" >nn.Module:_In..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (324,004 us., 9.04%)</title><rect x="65.3" y="101" width="106.7" height="15.0" fill="rgb(251,176,24)" rx="2" ry="2" />
<text  x="68.27" y="111.5" >nn.Module:_In..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (162,894 us., 4.55%)</title><rect x="10.0" y="213" width="53.6" height="15.0" fill="rgb(245,90,11)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >trans..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (320,759 us., 8.95%)</title><rect x="865.1" y="165" width="105.6" height="15.0" fill="rgb(251,91,6)" rx="2" ry="2" />
<text  x="868.09" y="175.5" >torch_int/nn..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (44,772 us., 1.25%)</title><rect x="825.2" y="53" width="14.7" height="15.0" fill="rgb(243,87,16)" rx="2" ry="2" />
<text  x="828.20" y="63.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,102 us., 0.06%)</title><rect x="305.5" y="149" width="0.7" height="15.0" fill="rgb(240,91,50)" rx="2" ry="2" />
<text  x="308.53" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,272,668 us., 35.52%)</title><rect x="338.1" y="101" width="419.1" height="15.0" fill="rgb(218,66,6)" rx="2" ry="2" />
<text  x="341.08" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,998 us., 0.06%)</title><rect x="970.9" y="229" width="0.7" height="15.0" fill="rgb(207,46,35)" rx="2" ry="2" />
<text  x="973.95" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (1,272,668 us., 35.52%)</title><rect x="338.1" y="245" width="419.1" height="15.0" fill="rgb(242,90,34)" rx="2" ry="2" />
<text  x="341.08" y="255.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (77,529 us., 2.16%)</title><rect x="757.7" y="245" width="25.6" height="15.0" fill="rgb(206,15,7)" rx="2" ry="2" />
<text  x="760.73" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (320,759 us., 8.95%)</title><rect x="865.1" y="181" width="105.6" height="15.0" fill="rgb(219,169,3)" rx="2" ry="2" />
<text  x="868.09" y="191.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (76,347 us., 2.13%)</title><rect x="839.9" y="197" width="25.2" height="15.0" fill="rgb(245,31,13)" rx="2" ry="2" />
<text  x="842.95" y="207.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,272,668 us., 35.52%)</title><rect x="338.1" y="197" width="419.1" height="15.0" fill="rgb(224,32,17)" rx="2" ry="2" />
<text  x="341.08" y="207.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,196 us., 0.03%)</title><rect x="757.7" y="149" width="0.4" height="15.0" fill="rgb(215,167,22)" rx="2" ry="2" />
<text  x="760.73" y="159.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (44,777 us., 1.25%)</title><rect x="810.5" y="101" width="14.7" height="15.0" fill="rgb(212,197,39)" rx="2" ry="2" />
<text  x="813.45" y="111.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (76,347 us., 2.13%)</title><rect x="839.9" y="101" width="25.2" height="15.0" fill="rgb(217,179,23)" rx="2" ry="2" />
<text  x="842.95" y="111.5" >p..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,203 us., 0.03%)</title><rect x="757.3" y="133" width="0.4" height="15.0" fill="rgb(212,134,29)" rx="2" ry="2" />
<text  x="760.33" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (320,759 us., 8.95%)</title><rect x="865.1" y="117" width="105.6" height="15.0" fill="rgb(234,11,17)" rx="2" ry="2" />
<text  x="868.09" y="127.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (82,570 us., 2.30%)</title><rect x="783.3" y="117" width="27.2" height="15.0" fill="rgb(235,225,0)" rx="2" ry="2" />
<text  x="786.26" y="127.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (324,004 us., 9.04%)</title><rect x="65.3" y="229" width="106.7" height="15.0" fill="rgb(219,121,18)" rx="2" ry="2" />
<text  x="68.27" y="239.5" >torch_int/nn/..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (310 us., 0.01%)</title><rect x="63.6" y="165" width="0.2" height="15.0" fill="rgb(210,184,44)" rx="2" ry="2" />
<text  x="66.65" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,400 us., 0.07%)</title><rect x="63.8" y="149" width="0.7" height="15.0" fill="rgb(244,143,23)" rx="2" ry="2" />
<text  x="66.75" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,272,668 us., 35.52%)</title><rect x="338.1" y="133" width="419.1" height="15.0" fill="rgb(213,27,13)" rx="2" ry="2" />
<text  x="341.08" y="143.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (76,333 us., 2.13%)</title><rect x="758.1" y="229" width="25.2" height="15.0" fill="rgb(250,174,34)" rx="2" ry="2" />
<text  x="761.12" y="239.5" >t..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,102 us., 0.06%)</title><rect x="305.5" y="165" width="0.7" height="15.0" fill="rgb(229,92,30)" rx="2" ry="2" />
<text  x="308.53" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (44,772 us., 1.25%)</title><rect x="825.2" y="101" width="14.7" height="15.0" fill="rgb(226,75,18)" rx="2" ry="2" />
<text  x="828.20" y="111.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,203 us., 0.06%)</title><rect x="64.5" y="149" width="0.8" height="15.0" fill="rgb(246,123,5)" rx="2" ry="2" />
<text  x="67.54" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (162,894 us., 4.55%)</title><rect x="10.0" y="165" width="53.6" height="15.0" fill="rgb(254,31,29)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >torch..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,203 us., 0.03%)</title><rect x="757.3" y="181" width="0.4" height="15.0" fill="rgb(222,159,51)" rx="2" ry="2" />
<text  x="760.33" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (310 us., 0.01%)</title><rect x="63.6" y="213" width="0.2" height="15.0" fill="rgb(240,222,30)" rx="2" ry="2" />
<text  x="66.65" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (662,514 us., 18.49%)</title><rect x="971.6" y="197" width="218.2" height="15.0" fill="rgb(230,54,30)" rx="2" ry="2" />
<text  x="974.60" y="207.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,272,668 us., 35.52%)</title><rect x="338.1" y="181" width="419.1" height="15.0" fill="rgb(225,177,30)" rx="2" ry="2" />
<text  x="341.08" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (82,570 us., 2.30%)</title><rect x="783.3" y="69" width="27.2" height="15.0" fill="rgb(241,227,34)" rx="2" ry="2" />
<text  x="786.26" y="79.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (662,514 us., 18.49%)</title><rect x="971.6" y="261" width="218.2" height="15.0" fill="rgb(248,223,47)" rx="2" ry="2" />
<text  x="974.60" y="271.5" >torch_int/nn/opt.py(72):_for..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (599 us., 0.02%)</title><rect x="1189.8" y="165" width="0.2" height="15.0" fill="rgb(246,67,47)" rx="2" ry="2" />
<text  x="1192.80" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (162,894 us., 4.55%)</title><rect x="10.0" y="197" width="53.6" height="15.0" fill="rgb(223,110,44)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >nn.Mo..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (310 us., 0.01%)</title><rect x="63.6" y="229" width="0.2" height="15.0" fill="rgb(233,227,37)" rx="2" ry="2" />
<text  x="66.65" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (662,514 us., 18.49%)</title><rect x="971.6" y="181" width="218.2" height="15.0" fill="rgb(230,229,8)" rx="2" ry="2" />
<text  x="974.60" y="191.5" >torch_int/nn/opt.py(346):_fo..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (310 us., 0.01%)</title><rect x="63.6" y="133" width="0.2" height="15.0" fill="rgb(206,220,6)" rx="2" ry="2" />
<text  x="66.65" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (215,736 us., 6.02%)</title><rect x="234.5" y="197" width="71.0" height="15.0" fill="rgb(245,129,1)" rx="2" ry="2" />
<text  x="237.48" y="207.5" >nn.Modul..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,272,668 us., 35.52%)</title><rect x="338.1" y="149" width="419.1" height="15.0" fill="rgb(215,72,7)" rx="2" ry="2" />
<text  x="341.08" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>nn.Module:_LayerNormQ (189,771 us., 5.30%)</title><rect x="172.0" y="229" width="62.5" height="15.0" fill="rgb(250,27,33)" rx="2" ry="2" />
<text  x="174.98" y="239.5" >nn.Mod..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (320,759 us., 8.95%)</title><rect x="865.1" y="245" width="105.6" height="15.0" fill="rgb(224,119,34)" rx="2" ry="2" />
<text  x="868.09" y="255.5" >torch_int/nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (189,771 us., 5.30%)</title><rect x="172.0" y="165" width="62.5" height="15.0" fill="rgb(220,135,14)" rx="2" ry="2" />
<text  x="174.98" y="175.5" >nn.Mod..</text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7f943b9c39c0&gt; (320,759 us., 8.95%)</title><rect x="865.1" y="261" width="105.6" height="15.0" fill="rgb(211,109,28)" rx="2" ry="2" />
<text  x="868.09" y="271.5" >&lt;built-in_me..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,203 us., 0.06%)</title><rect x="64.5" y="165" width="0.8" height="15.0" fill="rgb(207,107,34)" rx="2" ry="2" />
<text  x="67.54" y="175.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (76,347 us., 2.13%)</title><rect x="839.9" y="133" width="25.2" height="15.0" fill="rgb(217,4,31)" rx="2" ry="2" />
<text  x="842.95" y="143.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,272,668 us., 35.52%)</title><rect x="338.1" y="165" width="419.1" height="15.0" fill="rgb(237,191,33)" rx="2" ry="2" />
<text  x="341.08" y="175.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (662,514 us., 18.49%)</title><rect x="971.6" y="165" width="218.2" height="15.0" fill="rgb(243,82,39)" rx="2" ry="2" />
<text  x="974.60" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (662,514 us., 18.49%)</title><rect x="971.6" y="117" width="218.2" height="15.0" fill="rgb(249,109,30)" rx="2" ry="2" />
<text  x="974.60" y="127.5" >profiling/utils.py(18):_prof..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (599 us., 0.02%)</title><rect x="1189.8" y="229" width="0.2" height="15.0" fill="rgb(240,41,20)" rx="2" ry="2" />
<text  x="1192.80" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (599 us., 0.02%)</title><rect x="1189.8" y="149" width="0.2" height="15.0" fill="rgb(234,90,30)" rx="2" ry="2" />
<text  x="1192.80" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (215,736 us., 6.02%)</title><rect x="234.5" y="133" width="71.0" height="15.0" fill="rgb(222,155,32)" rx="2" ry="2" />
<text  x="237.48" y="143.5" >torch/au..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (76,333 us., 2.13%)</title><rect x="758.1" y="149" width="25.2" height="15.0" fill="rgb(242,213,26)" rx="2" ry="2" />
<text  x="761.12" y="159.5" >n..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (662,514 us., 18.49%)</title><rect x="971.6" y="149" width="218.2" height="15.0" fill="rgb(219,162,40)" rx="2" ry="2" />
<text  x="974.60" y="159.5" >transformers/models/opt/mode..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (82,570 us., 2.30%)</title><rect x="783.3" y="165" width="27.2" height="15.0" fill="rgb(216,82,44)" rx="2" ry="2" />
<text  x="786.26" y="175.5" >n..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (320,759 us., 8.95%)</title><rect x="865.1" y="101" width="105.6" height="15.0" fill="rgb(228,87,11)" rx="2" ry="2" />
<text  x="868.09" y="111.5" >profiling/ut..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (599 us., 0.02%)</title><rect x="1189.8" y="197" width="0.2" height="15.0" fill="rgb(254,206,4)" rx="2" ry="2" />
<text  x="1192.80" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (189,771 us., 5.30%)</title><rect x="172.0" y="181" width="62.5" height="15.0" fill="rgb(208,120,52)" rx="2" ry="2" />
<text  x="174.98" y="191.5" >torch_..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (44,777 us., 1.25%)</title><rect x="810.5" y="197" width="14.7" height="15.0" fill="rgb(209,132,3)" rx="2" ry="2" />
<text  x="813.45" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (189,771 us., 5.30%)</title><rect x="172.0" y="197" width="62.5" height="15.0" fill="rgb(235,121,43)" rx="2" ry="2" />
<text  x="174.98" y="207.5" >nn.Mod..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (324,004 us., 9.04%)</title><rect x="65.3" y="85" width="106.7" height="15.0" fill="rgb(216,55,33)" rx="2" ry="2" />
<text  x="68.27" y="95.5" >profiling/uti..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (215,736 us., 6.02%)</title><rect x="234.5" y="213" width="71.0" height="15.0" fill="rgb(245,6,14)" rx="2" ry="2" />
<text  x="237.48" y="223.5" >torch_in..</text>
</g>
<g >
<title>nn.Module:_LayerNormQ (76,333 us., 2.13%)</title><rect x="758.1" y="213" width="25.2" height="15.0" fill="rgb(233,181,49)" rx="2" ry="2" />
<text  x="761.12" y="223.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (324,004 us., 9.04%)</title><rect x="65.3" y="149" width="106.7" height="15.0" fill="rgb(245,69,10)" rx="2" ry="2" />
<text  x="68.27" y="159.5" >torch_int/nn/..</text>
</g>
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f9346e5d750&gt; (76,347 us., 2.13%)</title><rect x="839.9" y="261" width="25.2" height="15.0" fill="rgb(233,198,21)" rx="2" ry="2" />
<text  x="842.95" y="271.5" >&lt;..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,203 us., 0.03%)</title><rect x="757.3" y="165" width="0.4" height="15.0" fill="rgb(219,15,39)" rx="2" ry="2" />
<text  x="760.33" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Embedding (2,400 us., 0.07%)</title><rect x="63.8" y="213" width="0.7" height="15.0" fill="rgb(241,174,50)" rx="2" ry="2" />
<text  x="66.75" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,196 us., 0.03%)</title><rect x="757.7" y="117" width="0.4" height="15.0" fill="rgb(215,117,8)" rx="2" ry="2" />
<text  x="760.73" y="127.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (324,004 us., 9.04%)</title><rect x="65.3" y="213" width="106.7" height="15.0" fill="rgb(205,103,52)" rx="2" ry="2" />
<text  x="68.27" y="223.5" >torch/autogra..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (2,400 us., 0.07%)</title><rect x="63.8" y="197" width="0.7" height="15.0" fill="rgb(215,216,31)" rx="2" ry="2" />
<text  x="66.75" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (44,777 us., 1.25%)</title><rect x="810.5" y="117" width="14.7" height="15.0" fill="rgb(224,109,26)" rx="2" ry="2" />
<text  x="813.45" y="127.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (1,203 us., 0.03%)</title><rect x="757.3" y="245" width="0.4" height="15.0" fill="rgb(221,204,33)" rx="2" ry="2" />
<text  x="760.33" y="255.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (44,772 us., 1.25%)</title><rect x="825.2" y="37" width="14.7" height="15.0" fill="rgb(227,137,49)" rx="2" ry="2" />
<text  x="828.20" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (96,718 us., 2.70%)</title><rect x="306.2" y="165" width="31.9" height="15.0" fill="rgb(240,83,2)" rx="2" ry="2" />
<text  x="309.22" y="175.5" >nn..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (76,347 us., 2.13%)</title><rect x="839.9" y="85" width="25.2" height="15.0" fill="rgb(219,136,47)" rx="2" ry="2" />
<text  x="842.95" y="95.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,400 us., 0.07%)</title><rect x="63.8" y="117" width="0.7" height="15.0" fill="rgb(211,48,24)" rx="2" ry="2" />
<text  x="66.75" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,102 us., 0.06%)</title><rect x="305.5" y="181" width="0.7" height="15.0" fill="rgb(253,23,14)" rx="2" ry="2" />
<text  x="308.53" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (215,736 us., 6.02%)</title><rect x="234.5" y="245" width="71.0" height="15.0" fill="rgb(243,104,16)" rx="2" ry="2" />
<text  x="237.48" y="255.5" >torch_in..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (76,333 us., 2.13%)</title><rect x="758.1" y="101" width="25.2" height="15.0" fill="rgb(243,131,8)" rx="2" ry="2" />
<text  x="761.12" y="111.5" >p..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (215,736 us., 6.02%)</title><rect x="234.5" y="149" width="71.0" height="15.0" fill="rgb(248,201,41)" rx="2" ry="2" />
<text  x="237.48" y="159.5" >profilin..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (96,718 us., 2.70%)</title><rect x="306.2" y="117" width="31.9" height="15.0" fill="rgb(226,147,1)" rx="2" ry="2" />
<text  x="309.22" y="127.5" >tr..</text>
</g>
<g >
<title>torch_int/nn/linear.py(40):_forward (82,570 us., 2.30%)</title><rect x="783.3" y="245" width="27.2" height="15.0" fill="rgb(238,130,11)" rx="2" ry="2" />
<text  x="786.26" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (44,772 us., 1.25%)</title><rect x="825.2" y="133" width="14.7" height="15.0" fill="rgb(222,121,43)" rx="2" ry="2" />
<text  x="828.20" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,998 us., 0.06%)</title><rect x="970.9" y="245" width="0.7" height="15.0" fill="rgb(244,207,30)" rx="2" ry="2" />
<text  x="973.95" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (2,102 us., 0.06%)</title><rect x="305.5" y="245" width="0.7" height="15.0" fill="rgb(232,165,17)" rx="2" ry="2" />
<text  x="308.53" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,400 us., 0.07%)</title><rect x="63.8" y="181" width="0.7" height="15.0" fill="rgb(223,158,33)" rx="2" ry="2" />
<text  x="66.75" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (189,771 us., 5.30%)</title><rect x="172.0" y="117" width="62.5" height="15.0" fill="rgb(217,75,1)" rx="2" ry="2" />
<text  x="174.98" y="127.5" >profil..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (82,570 us., 2.30%)</title><rect x="783.3" y="85" width="27.2" height="15.0" fill="rgb(251,95,18)" rx="2" ry="2" />
<text  x="786.26" y="95.5" >t..</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (189,771 us., 5.30%)</title><rect x="172.0" y="245" width="62.5" height="15.0" fill="rgb(212,19,2)" rx="2" ry="2" />
<text  x="174.98" y="255.5" >torch_..</text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (162,894 us., 4.55%)</title><rect x="10.0" y="245" width="53.6" height="15.0" fill="rgb(240,228,3)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >torch..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (189,771 us., 5.30%)</title><rect x="172.0" y="213" width="62.5" height="15.0" fill="rgb(220,172,24)" rx="2" ry="2" />
<text  x="174.98" y="223.5" >torch_..</text>
</g>
<g >
<title>torch_int/nn/opt.py(69):__shape (96,718 us., 2.70%)</title><rect x="306.2" y="245" width="31.9" height="15.0" fill="rgb(232,110,43)" rx="2" ry="2" />
<text  x="309.22" y="255.5" >to..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (320,759 us., 8.95%)</title><rect x="865.1" y="229" width="105.6" height="15.0" fill="rgb(217,76,8)" rx="2" ry="2" />
<text  x="868.09" y="239.5" >torch/autogr..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (76,347 us., 2.13%)</title><rect x="839.9" y="117" width="25.2" height="15.0" fill="rgb(210,129,45)" rx="2" ry="2" />
<text  x="842.95" y="127.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (215,736 us., 6.02%)</title><rect x="234.5" y="165" width="71.0" height="15.0" fill="rgb(247,106,38)" rx="2" ry="2" />
<text  x="237.48" y="175.5" >nn.Modul..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (215,736 us., 6.02%)</title><rect x="234.5" y="229" width="71.0" height="15.0" fill="rgb(221,74,39)" rx="2" ry="2" />
<text  x="237.48" y="239.5" >nn.Modul..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (599 us., 0.02%)</title><rect x="1189.8" y="245" width="0.2" height="15.0" fill="rgb(215,39,31)" rx="2" ry="2" />
<text  x="1192.80" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (82,570 us., 2.30%)</title><rect x="783.3" y="197" width="27.2" height="15.0" fill="rgb(224,221,49)" rx="2" ry="2" />
<text  x="786.26" y="207.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,272,668 us., 35.52%)</title><rect x="338.1" y="117" width="419.1" height="15.0" fill="rgb(235,197,5)" rx="2" ry="2" />
<text  x="341.08" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (189,771 us., 5.30%)</title><rect x="172.0" y="149" width="62.5" height="15.0" fill="rgb(221,58,9)" rx="2" ry="2" />
<text  x="174.98" y="159.5" >transf..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (76,333 us., 2.13%)</title><rect x="758.1" y="85" width="25.2" height="15.0" fill="rgb(242,47,13)" rx="2" ry="2" />
<text  x="761.12" y="95.5" >t..</text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (162,894 us., 4.55%)</title><rect x="10.0" y="261" width="53.6" height="15.0" fill="rgb(251,25,1)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;buil..</text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7f943b9c39c0&gt; (77,529 us., 2.16%)</title><rect x="757.7" y="261" width="25.6" height="15.0" fill="rgb(246,4,51)" rx="2" ry="2" />
<text  x="760.73" y="271.5" >&lt;..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (44,772 us., 1.25%)</title><rect x="825.2" y="69" width="14.7" height="15.0" fill="rgb(251,177,18)" rx="2" ry="2" />
<text  x="828.20" y="79.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,196 us., 0.03%)</title><rect x="757.7" y="165" width="0.4" height="15.0" fill="rgb(239,180,28)" rx="2" ry="2" />
<text  x="760.73" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,998 us., 0.06%)</title><rect x="970.9" y="181" width="0.7" height="15.0" fill="rgb(228,87,34)" rx="2" ry="2" />
<text  x="973.95" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (310 us., 0.01%)</title><rect x="63.6" y="181" width="0.2" height="15.0" fill="rgb(219,114,52)" rx="2" ry="2" />
<text  x="66.65" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (320,759 us., 8.95%)</title><rect x="865.1" y="149" width="105.6" height="15.0" fill="rgb(243,160,41)" rx="2" ry="2" />
<text  x="868.09" y="159.5" >nn.Module:_I..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,400 us., 0.07%)</title><rect x="63.8" y="165" width="0.7" height="15.0" fill="rgb(231,94,19)" rx="2" ry="2" />
<text  x="66.75" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (320,759 us., 8.95%)</title><rect x="865.1" y="213" width="105.6" height="15.0" fill="rgb(214,61,2)" rx="2" ry="2" />
<text  x="868.09" y="223.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (76,333 us., 2.13%)</title><rect x="758.1" y="197" width="25.2" height="15.0" fill="rgb(220,18,35)" rx="2" ry="2" />
<text  x="761.12" y="207.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (76,347 us., 2.13%)</title><rect x="839.9" y="181" width="25.2" height="15.0" fill="rgb(226,108,38)" rx="2" ry="2" />
<text  x="842.95" y="191.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (96,718 us., 2.70%)</title><rect x="306.2" y="133" width="31.9" height="15.0" fill="rgb(245,62,14)" rx="2" ry="2" />
<text  x="309.22" y="143.5" >nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (189,771 us., 5.30%)</title><rect x="172.0" y="133" width="62.5" height="15.0" fill="rgb(247,190,7)" rx="2" ry="2" />
<text  x="174.98" y="143.5" >nn.Mod..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,272,668 us., 35.52%)</title><rect x="338.1" y="213" width="419.1" height="15.0" fill="rgb(231,46,14)" rx="2" ry="2" />
<text  x="341.08" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (82,570 us., 2.30%)</title><rect x="783.3" y="181" width="27.2" height="15.0" fill="rgb(225,226,6)" rx="2" ry="2" />
<text  x="786.26" y="191.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (82,570 us., 2.30%)</title><rect x="783.3" y="149" width="27.2" height="15.0" fill="rgb(240,140,54)" rx="2" ry="2" />
<text  x="786.26" y="159.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (599 us., 0.02%)</title><rect x="1189.8" y="181" width="0.2" height="15.0" fill="rgb(252,126,54)" rx="2" ry="2" />
<text  x="1192.80" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (44,777 us., 1.25%)</title><rect x="810.5" y="133" width="14.7" height="15.0" fill="rgb(238,29,20)" rx="2" ry="2" />
<text  x="813.45" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (44,772 us., 1.25%)</title><rect x="825.2" y="181" width="14.7" height="15.0" fill="rgb(234,143,22)" rx="2" ry="2" />
<text  x="828.20" y="191.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (2,203 us., 0.06%)</title><rect x="64.5" y="213" width="0.8" height="15.0" fill="rgb(229,82,43)" rx="2" ry="2" />
<text  x="67.54" y="223.5" ></text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (1,196 us., 0.03%)</title><rect x="757.7" y="229" width="0.4" height="15.0" fill="rgb(216,106,43)" rx="2" ry="2" />
<text  x="760.73" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (82,570 us., 2.30%)</title><rect x="783.3" y="37" width="27.2" height="15.0" fill="rgb(220,71,13)" rx="2" ry="2" />
<text  x="786.26" y="47.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (320,759 us., 8.95%)</title><rect x="865.1" y="197" width="105.6" height="15.0" fill="rgb(227,114,19)" rx="2" ry="2" />
<text  x="868.09" y="207.5" >torch_int/nn..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (82,570 us., 2.30%)</title><rect x="783.3" y="213" width="27.2" height="15.0" fill="rgb(219,95,35)" rx="2" ry="2" />
<text  x="786.26" y="223.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (44,777 us., 1.25%)</title><rect x="810.5" y="181" width="14.7" height="15.0" fill="rgb(237,221,31)" rx="2" ry="2" />
<text  x="813.45" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,272,668 us., 35.52%)</title><rect x="338.1" y="85" width="419.1" height="15.0" fill="rgb(212,176,37)" rx="2" ry="2" />
<text  x="341.08" y="95.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (96,718 us., 2.70%)</title><rect x="306.2" y="101" width="31.9" height="15.0" fill="rgb(240,191,43)" rx="2" ry="2" />
<text  x="309.22" y="111.5" >nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (76,347 us., 2.13%)</title><rect x="839.9" y="149" width="25.2" height="15.0" fill="rgb(205,49,12)" rx="2" ry="2" />
<text  x="842.95" y="159.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (662,514 us., 18.49%)</title><rect x="971.6" y="101" width="218.2" height="15.0" fill="rgb(208,51,24)" rx="2" ry="2" />
<text  x="974.60" y="111.5" >torch/autograd/grad_mode.py(..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (76,347 us., 2.13%)</title><rect x="839.9" y="213" width="25.2" height="15.0" fill="rgb(216,166,50)" rx="2" ry="2" />
<text  x="842.95" y="223.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (76,333 us., 2.13%)</title><rect x="758.1" y="181" width="25.2" height="15.0" fill="rgb(232,210,16)" rx="2" ry="2" />
<text  x="761.12" y="191.5" >n..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,203 us., 0.03%)</title><rect x="757.3" y="149" width="0.4" height="15.0" fill="rgb(227,165,7)" rx="2" ry="2" />
<text  x="760.33" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (662,514 us., 18.49%)</title><rect x="971.6" y="229" width="218.2" height="15.0" fill="rgb(213,78,21)" rx="2" ry="2" />
<text  x="974.60" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,102 us., 0.06%)</title><rect x="305.5" y="213" width="0.7" height="15.0" fill="rgb(241,206,28)" rx="2" ry="2" />
<text  x="308.53" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (324,004 us., 9.04%)</title><rect x="65.3" y="117" width="106.7" height="15.0" fill="rgb(213,218,43)" rx="2" ry="2" />
<text  x="68.27" y="127.5" >transformers/..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,203 us., 0.06%)</title><rect x="64.5" y="117" width="0.8" height="15.0" fill="rgb(238,110,8)" rx="2" ry="2" />
<text  x="67.54" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (76,333 us., 2.13%)</title><rect x="758.1" y="117" width="25.2" height="15.0" fill="rgb(238,186,18)" rx="2" ry="2" />
<text  x="761.12" y="127.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (189,771 us., 5.30%)</title><rect x="172.0" y="101" width="62.5" height="15.0" fill="rgb(238,203,17)" rx="2" ry="2" />
<text  x="174.98" y="111.5" >torch/..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (96,718 us., 2.70%)</title><rect x="306.2" y="229" width="31.9" height="15.0" fill="rgb(250,104,29)" rx="2" ry="2" />
<text  x="309.22" y="239.5" >to..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,203 us., 0.03%)</title><rect x="757.3" y="197" width="0.4" height="15.0" fill="rgb(242,222,10)" rx="2" ry="2" />
<text  x="760.33" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,203 us., 0.03%)</title><rect x="757.3" y="213" width="0.4" height="15.0" fill="rgb(254,72,23)" rx="2" ry="2" />
<text  x="760.33" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,203 us., 0.06%)</title><rect x="64.5" y="133" width="0.8" height="15.0" fill="rgb(248,54,22)" rx="2" ry="2" />
<text  x="67.54" y="143.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f9346e5d810&gt; (82,570 us., 2.30%)</title><rect x="783.3" y="261" width="27.2" height="15.0" fill="rgb(209,182,38)" rx="2" ry="2" />
<text  x="786.26" y="271.5" >&lt;..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (662,514 us., 18.49%)</title><rect x="971.6" y="245" width="218.2" height="15.0" fill="rgb(233,196,38)" rx="2" ry="2" />
<text  x="974.60" y="255.5" >torch/autograd/grad_mode.py(..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (44,772 us., 1.25%)</title><rect x="825.2" y="197" width="14.7" height="15.0" fill="rgb(251,56,27)" rx="2" ry="2" />
<text  x="828.20" y="207.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,998 us., 0.06%)</title><rect x="970.9" y="197" width="0.7" height="15.0" fill="rgb(225,48,22)" rx="2" ry="2" />
<text  x="973.95" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(90):_forward (76,347 us., 2.13%)</title><rect x="839.9" y="245" width="25.2" height="15.0" fill="rgb(253,227,30)" rx="2" ry="2" />
<text  x="842.95" y="255.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (76,347 us., 2.13%)</title><rect x="839.9" y="165" width="25.2" height="15.0" fill="rgb(231,165,10)" rx="2" ry="2" />
<text  x="842.95" y="175.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (44,777 us., 1.25%)</title><rect x="810.5" y="85" width="14.7" height="15.0" fill="rgb(219,65,54)" rx="2" ry="2" />
<text  x="813.45" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (324,004 us., 9.04%)</title><rect x="65.3" y="165" width="106.7" height="15.0" fill="rgb(254,96,34)" rx="2" ry="2" />
<text  x="68.27" y="175.5" >nn.Module:_In..</text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (4,603 us., 0.13%)</title><rect x="63.8" y="229" width="1.5" height="15.0" fill="rgb(207,177,35)" rx="2" ry="2" />
<text  x="66.75" y="239.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_bfp32_ofp32_of_PyCapsule_object_at_0x7f9346e5d7b0&gt; (89,549 us., 2.50%)</title><rect x="810.5" y="261" width="29.4" height="15.0" fill="rgb(210,228,18)" rx="2" ry="2" />
<text  x="813.45" y="271.5" >&lt;b..</text>
</g>
<g >
<title>all (3,582,816 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(223,186,53)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (310 us., 0.01%)</title><rect x="63.6" y="245" width="0.2" height="15.0" fill="rgb(206,149,33)" rx="2" ry="2" />
<text  x="66.65" y="255.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (44,777 us., 1.25%)</title><rect x="810.5" y="149" width="14.7" height="15.0" fill="rgb(222,129,30)" rx="2" ry="2" />
<text  x="813.45" y="159.5" ></text>
</g>
<g >
<title>&lt;built-in_method_cumsum_of_type_object_at_0x7f943b9c39c0&gt; (310 us., 0.01%)</title><rect x="63.6" y="261" width="0.2" height="15.0" fill="rgb(216,198,37)" rx="2" ry="2" />
<text  x="66.65" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(225):_forward (89,549 us., 2.50%)</title><rect x="810.5" y="245" width="29.4" height="15.0" fill="rgb(243,203,35)" rx="2" ry="2" />
<text  x="813.45" y="255.5" >to..</text>
</g>
<g >
<title>nn.Module:_LayerNorm (1,196 us., 0.03%)</title><rect x="757.7" y="213" width="0.4" height="15.0" fill="rgb(242,162,4)" rx="2" ry="2" />
<text  x="760.73" y="223.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (96,718 us., 2.70%)</title><rect x="306.2" y="149" width="31.9" height="15.0" fill="rgb(211,79,14)" rx="2" ry="2" />
<text  x="309.22" y="159.5" >to..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,998 us., 0.06%)</title><rect x="970.9" y="261" width="0.7" height="15.0" fill="rgb(207,164,37)" rx="2" ry="2" />
<text  x="973.95" y="271.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (96,718 us., 2.70%)</title><rect x="306.2" y="197" width="31.9" height="15.0" fill="rgb(226,210,51)" rx="2" ry="2" />
<text  x="309.22" y="207.5" >nn..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,272,668 us., 35.52%)</title><rect x="338.1" y="229" width="419.1" height="15.0" fill="rgb(254,227,23)" rx="2" ry="2" />
<text  x="341.08" y="239.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (320,759 us., 8.95%)</title><rect x="865.1" y="133" width="105.6" height="15.0" fill="rgb(235,80,43)" rx="2" ry="2" />
<text  x="868.09" y="143.5" >transformers..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (96,718 us., 2.70%)</title><rect x="306.2" y="69" width="31.9" height="15.0" fill="rgb(231,167,25)" rx="2" ry="2" />
<text  x="309.22" y="79.5" >to..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (162,894 us., 4.55%)</title><rect x="10.0" y="181" width="53.6" height="15.0" fill="rgb(223,174,48)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >profi..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (44,772 us., 1.25%)</title><rect x="825.2" y="165" width="14.7" height="15.0" fill="rgb(219,122,34)" rx="2" ry="2" />
<text  x="828.20" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (599 us., 0.02%)</title><rect x="1189.8" y="213" width="0.2" height="15.0" fill="rgb(253,210,24)" rx="2" ry="2" />
<text  x="1192.80" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (324,004 us., 9.04%)</title><rect x="65.3" y="197" width="106.7" height="15.0" fill="rgb(220,5,32)" rx="2" ry="2" />
<text  x="68.27" y="207.5" >nn.Module:_In..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (82,570 us., 2.30%)</title><rect x="783.3" y="229" width="27.2" height="15.0" fill="rgb(242,117,49)" rx="2" ry="2" />
<text  x="786.26" y="239.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (76,333 us., 2.13%)</title><rect x="758.1" y="165" width="25.2" height="15.0" fill="rgb(228,174,40)" rx="2" ry="2" />
<text  x="761.12" y="175.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (2,102 us., 0.06%)</title><rect x="305.5" y="229" width="0.7" height="15.0" fill="rgb(209,194,35)" rx="2" ry="2" />
<text  x="308.53" y="239.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (76,347 us., 2.13%)</title><rect x="839.9" y="229" width="25.2" height="15.0" fill="rgb(226,166,36)" rx="2" ry="2" />
<text  x="842.95" y="239.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (662,514 us., 18.49%)</title><rect x="971.6" y="133" width="218.2" height="15.0" fill="rgb(221,190,52)" rx="2" ry="2" />
<text  x="974.60" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (320,759 us., 8.95%)</title><rect x="865.1" y="85" width="105.6" height="15.0" fill="rgb(249,194,30)" rx="2" ry="2" />
<text  x="868.09" y="95.5" >torch/autogr..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (662,514 us., 18.49%)</title><rect x="971.6" y="213" width="218.2" height="15.0" fill="rgb(242,77,22)" rx="2" ry="2" />
<text  x="974.60" y="223.5" >torch_int/nn/opt.py(213):_fo..</text>
</g>
<g >
<title>nn.Module:_Linear (162,894 us., 4.55%)</title><rect x="10.0" y="229" width="53.6" height="15.0" fill="rgb(227,72,44)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >nn.Mo..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (96,718 us., 2.70%)</title><rect x="306.2" y="213" width="31.9" height="15.0" fill="rgb(225,128,6)" rx="2" ry="2" />
<text  x="309.22" y="223.5" >to..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,203 us., 0.06%)</title><rect x="64.5" y="101" width="0.8" height="15.0" fill="rgb(214,128,5)" rx="2" ry="2" />
<text  x="67.54" y="111.5" ></text>
</g>
</g>
</svg>
