<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="326.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >CUDA Time</text>
<text id="details" x="10.00" y="309" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="309" > </text>
<g id="frames">
<g >
<title>&lt;built-in_method_linear_relu_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f9f64602750&gt; (138,498 us., 1.92%)</title><rect x="851.0" y="261" width="22.6" height="15.0" fill="rgb(214,70,40)" rx="2" ry="2" />
<text  x="853.99" y="271.5" >&lt;..</text>
</g>
<g >
<title>nn.Module:_LayerNormQ (213,203 us., 2.95%)</title><rect x="768.3" y="213" width="34.8" height="15.0" fill="rgb(238,131,30)" rx="2" ry="2" />
<text  x="771.25" y="223.5" >nn..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8LinearReLU (138,498 us., 1.92%)</title><rect x="851.0" y="213" width="22.6" height="15.0" fill="rgb(235,139,15)" rx="2" ry="2" />
<text  x="853.99" y="223.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (131,597 us., 1.82%)</title><rect x="803.1" y="69" width="21.4" height="15.0" fill="rgb(207,49,47)" rx="2" ry="2" />
<text  x="806.06" y="79.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (4,003 us., 0.06%)</title><rect x="324.5" y="229" width="0.7" height="15.0" fill="rgb(248,125,23)" rx="2" ry="2" />
<text  x="327.50" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,003 us., 0.06%)</title><rect x="324.5" y="213" width="0.7" height="15.0" fill="rgb(218,8,31)" rx="2" ry="2" />
<text  x="327.50" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,265 us., 0.06%)</title><rect x="59.6" y="165" width="0.7" height="15.0" fill="rgb(218,86,43)" rx="2" ry="2" />
<text  x="62.61" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (634,449 us., 8.78%)</title><rect x="873.6" y="85" width="103.6" height="15.0" fill="rgb(216,61,7)" rx="2" ry="2" />
<text  x="876.60" y="95.5" >torch/autogr..</text>
</g>
<g >
<title>torch/nn/modules/linear.py(113):_forward (297,842 us., 4.12%)</title><rect x="10.0" y="245" width="48.6" height="15.0" fill="rgb(243,110,44)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >torc..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (78,236 us., 1.08%)</title><rect x="824.5" y="101" width="12.8" height="15.0" fill="rgb(218,88,43)" rx="2" ry="2" />
<text  x="827.54" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,595 us., 0.02%)</title><rect x="58.6" y="197" width="0.3" height="15.0" fill="rgb(239,65,30)" rx="2" ry="2" />
<text  x="61.62" y="207.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (2,496,366 us., 34.53%)</title><rect x="359.9" y="229" width="407.5" height="15.0" fill="rgb(240,98,54)" rx="2" ry="2" />
<text  x="362.92" y="239.5" >torch/autograd/grad_mode.py(24):_decorate_context</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (2,496,366 us., 34.53%)</title><rect x="359.9" y="197" width="407.5" height="15.0" fill="rgb(210,175,19)" rx="2" ry="2" />
<text  x="362.92" y="207.5" >torch_int/nn/opt.py(213):_forward</text>
</g>
<g >
<title>torch/nn/functional.py(2099):_embedding (8,727 us., 0.12%)</title><rect x="58.9" y="245" width="1.4" height="15.0" fill="rgb(211,141,8)" rx="2" ry="2" />
<text  x="61.88" y="255.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (297,842 us., 4.12%)</title><rect x="10.0" y="181" width="48.6" height="15.0" fill="rgb(227,120,18)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >prof..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (78,236 us., 1.08%)</title><rect x="824.5" y="149" width="12.8" height="15.0" fill="rgb(207,204,32)" rx="2" ry="2" />
<text  x="827.54" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,311 us., 0.05%)</title><rect x="767.7" y="165" width="0.6" height="15.0" fill="rgb(211,113,37)" rx="2" ry="2" />
<text  x="770.71" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (212,996 us., 2.95%)</title><rect x="325.2" y="165" width="34.7" height="15.0" fill="rgb(240,155,11)" rx="2" ry="2" />
<text  x="328.15" y="175.5" >nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (488,626 us., 6.76%)</title><rect x="164.3" y="133" width="79.8" height="15.0" fill="rgb(239,157,48)" rx="2" ry="2" />
<text  x="167.34" y="143.5" >nn.Module..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (2,496,366 us., 34.53%)</title><rect x="359.9" y="245" width="407.5" height="15.0" fill="rgb(239,112,39)" rx="2" ry="2" />
<text  x="362.92" y="255.5" >torch_int/nn/opt.py(72):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (83,811 us., 1.16%)</title><rect x="837.3" y="101" width="13.7" height="15.0" fill="rgb(216,223,7)" rx="2" ry="2" />
<text  x="840.31" y="111.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (2,496,366 us., 34.53%)</title><rect x="359.9" y="181" width="407.5" height="15.0" fill="rgb(248,65,37)" rx="2" ry="2" />
<text  x="362.92" y="191.5" >nn.Module:_Int8OPTDecoderLayer</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (212,996 us., 2.95%)</title><rect x="325.2" y="85" width="34.7" height="15.0" fill="rgb(252,130,50)" rx="2" ry="2" />
<text  x="328.15" y="95.5" >pr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (3,890 us., 0.05%)</title><rect x="977.3" y="229" width="0.6" height="15.0" fill="rgb(219,17,9)" rx="2" ry="2" />
<text  x="980.31" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (637,291 us., 8.82%)</title><rect x="60.3" y="117" width="104.0" height="15.0" fill="rgb(241,37,6)" rx="2" ry="2" />
<text  x="63.31" y="127.5" >transformers..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (1,298,402 us., 17.96%)</title><rect x="977.9" y="261" width="212.0" height="15.0" fill="rgb(253,122,45)" rx="2" ry="2" />
<text  x="980.95" y="271.5" >torch_int/nn/opt.py(72):_fo..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,298,402 us., 17.96%)</title><rect x="977.9" y="181" width="212.0" height="15.0" fill="rgb(215,156,36)" rx="2" ry="2" />
<text  x="980.95" y="191.5" >torch_int/nn/opt.py(346):_f..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (2,496,366 us., 34.53%)</title><rect x="359.9" y="85" width="407.5" height="15.0" fill="rgb(230,183,17)" rx="2" ry="2" />
<text  x="362.92" y="95.5" >torch/autograd/grad_mode.py(27):_decorate_context</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (492,508 us., 6.81%)</title><rect x="244.1" y="197" width="80.4" height="15.0" fill="rgb(219,204,45)" rx="2" ry="2" />
<text  x="247.10" y="207.5" >nn.Module..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (637,291 us., 8.82%)</title><rect x="60.3" y="229" width="104.0" height="15.0" fill="rgb(230,88,4)" rx="2" ry="2" />
<text  x="63.31" y="239.5" >torch_int/nn..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (131,597 us., 1.82%)</title><rect x="803.1" y="181" width="21.4" height="15.0" fill="rgb(248,204,16)" rx="2" ry="2" />
<text  x="806.06" y="191.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,411 us., 0.02%)</title><rect x="767.5" y="133" width="0.2" height="15.0" fill="rgb(222,85,10)" rx="2" ry="2" />
<text  x="770.48" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(90):_forward (138,498 us., 1.92%)</title><rect x="851.0" y="245" width="22.6" height="15.0" fill="rgb(248,162,41)" rx="2" ry="2" />
<text  x="853.99" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_LayerNorm (3,311 us., 0.05%)</title><rect x="767.7" y="213" width="0.6" height="15.0" fill="rgb(227,88,30)" rx="2" ry="2" />
<text  x="770.71" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,890 us., 0.05%)</title><rect x="977.3" y="245" width="0.6" height="15.0" fill="rgb(247,214,5)" rx="2" ry="2" />
<text  x="980.31" y="255.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,003 us., 0.06%)</title><rect x="324.5" y="197" width="0.7" height="15.0" fill="rgb(232,95,6)" rx="2" ry="2" />
<text  x="327.50" y="207.5" ></text>
</g>
<g >
<title>torch/nn/functional.py(2488):_layer_norm (216,514 us., 3.00%)</title><rect x="767.7" y="245" width="35.4" height="15.0" fill="rgb(218,124,20)" rx="2" ry="2" />
<text  x="770.71" y="255.5" >to..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (637,291 us., 8.82%)</title><rect x="60.3" y="133" width="104.0" height="15.0" fill="rgb(254,1,2)" rx="2" ry="2" />
<text  x="63.31" y="143.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (4,003 us., 0.06%)</title><rect x="324.5" y="245" width="0.7" height="15.0" fill="rgb(244,4,54)" rx="2" ry="2" />
<text  x="327.50" y="255.5" ></text>
</g>
<g >
<title>&lt;built-in_method_embedding_of_type_object_at_0x7fa0591689c0&gt; (8,727 us., 0.12%)</title><rect x="58.9" y="261" width="1.4" height="15.0" fill="rgb(245,49,10)" rx="2" ry="2" />
<text  x="61.88" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (213,203 us., 2.95%)</title><rect x="768.3" y="197" width="34.8" height="15.0" fill="rgb(233,168,12)" rx="2" ry="2" />
<text  x="771.25" y="207.5" >to..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (2,496,366 us., 34.53%)</title><rect x="359.9" y="117" width="407.5" height="15.0" fill="rgb(247,13,47)" rx="2" ry="2" />
<text  x="362.92" y="127.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch/nn/modules/normalization.py(188):_forward (3,311 us., 0.05%)</title><rect x="767.7" y="229" width="0.6" height="15.0" fill="rgb(226,134,0)" rx="2" ry="2" />
<text  x="770.71" y="239.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (634,449 us., 8.78%)</title><rect x="873.6" y="181" width="103.6" height="15.0" fill="rgb(237,176,26)" rx="2" ry="2" />
<text  x="876.60" y="191.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (83,811 us., 1.16%)</title><rect x="837.3" y="149" width="13.7" height="15.0" fill="rgb(229,50,25)" rx="2" ry="2" />
<text  x="840.31" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,265 us., 0.06%)</title><rect x="59.6" y="101" width="0.7" height="15.0" fill="rgb(254,12,40)" rx="2" ry="2" />
<text  x="62.61" y="111.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,003 us., 0.06%)</title><rect x="324.5" y="149" width="0.7" height="15.0" fill="rgb(238,73,34)" rx="2" ry="2" />
<text  x="327.50" y="159.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (131,597 us., 1.82%)</title><rect x="803.1" y="85" width="21.4" height="15.0" fill="rgb(229,76,48)" rx="2" ry="2" />
<text  x="806.06" y="95.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (83,811 us., 1.16%)</title><rect x="837.3" y="133" width="13.7" height="15.0" fill="rgb(242,149,23)" rx="2" ry="2" />
<text  x="840.31" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (131,597 us., 1.82%)</title><rect x="803.1" y="133" width="21.4" height="15.0" fill="rgb(210,18,11)" rx="2" ry="2" />
<text  x="806.06" y="143.5" >n..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (4,462 us., 0.06%)</title><rect x="58.9" y="117" width="0.7" height="15.0" fill="rgb(223,101,42)" rx="2" ry="2" />
<text  x="61.88" y="127.5" ></text>
</g>
<g >
<title>&lt;built-in_function_linear&gt; (297,842 us., 4.12%)</title><rect x="10.0" y="261" width="48.6" height="15.0" fill="rgb(250,38,39)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >&lt;bui..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (488,626 us., 6.76%)</title><rect x="164.3" y="117" width="79.8" height="15.0" fill="rgb(237,105,0)" rx="2" ry="2" />
<text  x="167.34" y="127.5" >profiling..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (162,047 us., 2.24%)</title><rect x="824.5" y="229" width="26.5" height="15.0" fill="rgb(235,153,37)" rx="2" ry="2" />
<text  x="827.54" y="239.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (78,236 us., 1.08%)</title><rect x="824.5" y="85" width="12.8" height="15.0" fill="rgb(243,20,30)" rx="2" ry="2" />
<text  x="827.54" y="95.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (212,996 us., 2.95%)</title><rect x="325.2" y="213" width="34.7" height="15.0" fill="rgb(212,163,26)" rx="2" ry="2" />
<text  x="328.15" y="223.5" >to..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,298,402 us., 17.96%)</title><rect x="977.9" y="101" width="212.0" height="15.0" fill="rgb(224,35,37)" rx="2" ry="2" />
<text  x="980.95" y="111.5" >torch/autograd/grad_mode.py..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (78,236 us., 1.08%)</title><rect x="824.5" y="133" width="12.8" height="15.0" fill="rgb(236,3,15)" rx="2" ry="2" />
<text  x="827.54" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_W8A8BFP32OFP32Linear (162,047 us., 2.24%)</title><rect x="824.5" y="213" width="26.5" height="15.0" fill="rgb(224,204,13)" rx="2" ry="2" />
<text  x="827.54" y="223.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (138,498 us., 1.92%)</title><rect x="851.0" y="197" width="22.6" height="15.0" fill="rgb(229,134,6)" rx="2" ry="2" />
<text  x="853.99" y="207.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (488,626 us., 6.76%)</title><rect x="164.3" y="149" width="79.8" height="15.0" fill="rgb(228,144,35)" rx="2" ry="2" />
<text  x="167.34" y="159.5" >transform..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (637,291 us., 8.82%)</title><rect x="60.3" y="85" width="104.0" height="15.0" fill="rgb(214,123,17)" rx="2" ry="2" />
<text  x="63.31" y="95.5" >profiling/ut..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,298,402 us., 17.96%)</title><rect x="977.9" y="165" width="212.0" height="15.0" fill="rgb(254,162,51)" rx="2" ry="2" />
<text  x="980.95" y="175.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>nn.Module:_Embedding (4,462 us., 0.06%)</title><rect x="58.9" y="213" width="0.7" height="15.0" fill="rgb(246,43,14)" rx="2" ry="2" />
<text  x="61.88" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (78,236 us., 1.08%)</title><rect x="824.5" y="117" width="12.8" height="15.0" fill="rgb(253,46,8)" rx="2" ry="2" />
<text  x="827.54" y="127.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (634,449 us., 8.78%)</title><rect x="873.6" y="245" width="103.6" height="15.0" fill="rgb(241,140,28)" rx="2" ry="2" />
<text  x="876.60" y="255.5" >torch_int/nn..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,411 us., 0.02%)</title><rect x="767.5" y="213" width="0.2" height="15.0" fill="rgb(213,30,52)" rx="2" ry="2" />
<text  x="770.48" y="223.5" ></text>
</g>
<g >
<title>torch/nn/modules/sparse.py(157):_forward (8,727 us., 0.12%)</title><rect x="58.9" y="229" width="1.4" height="15.0" fill="rgb(244,92,22)" rx="2" ry="2" />
<text  x="61.88" y="239.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (78,236 us., 1.08%)</title><rect x="824.5" y="165" width="12.8" height="15.0" fill="rgb(217,221,22)" rx="2" ry="2" />
<text  x="827.54" y="175.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (634,449 us., 8.78%)</title><rect x="873.6" y="117" width="103.6" height="15.0" fill="rgb(251,145,54)" rx="2" ry="2" />
<text  x="876.60" y="127.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (488,626 us., 6.76%)</title><rect x="164.3" y="213" width="79.8" height="15.0" fill="rgb(223,123,49)" rx="2" ry="2" />
<text  x="167.34" y="223.5" >torch_int..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (634,449 us., 8.78%)</title><rect x="873.6" y="229" width="103.6" height="15.0" fill="rgb(215,44,23)" rx="2" ry="2" />
<text  x="876.60" y="239.5" >torch/autogr..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (492,508 us., 6.81%)</title><rect x="244.1" y="149" width="80.4" height="15.0" fill="rgb(236,224,50)" rx="2" ry="2" />
<text  x="247.10" y="159.5" >profiling..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (83,811 us., 1.16%)</title><rect x="837.3" y="181" width="13.7" height="15.0" fill="rgb(222,76,23)" rx="2" ry="2" />
<text  x="840.31" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (213,203 us., 2.95%)</title><rect x="768.3" y="165" width="34.8" height="15.0" fill="rgb(233,63,5)" rx="2" ry="2" />
<text  x="771.25" y="175.5" >to..</text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_bfp32_ofp32_of_PyCapsule_object_at_0x7f9f646027b0&gt; (162,047 us., 2.24%)</title><rect x="824.5" y="261" width="26.5" height="15.0" fill="rgb(207,165,31)" rx="2" ry="2" />
<text  x="827.54" y="271.5" >&lt;..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,003 us., 0.06%)</title><rect x="324.5" y="165" width="0.7" height="15.0" fill="rgb(239,220,35)" rx="2" ry="2" />
<text  x="327.50" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_method_max_of_type_object_at_0x7fa0591689c0&gt; (634,449 us., 8.78%)</title><rect x="873.6" y="261" width="103.6" height="15.0" fill="rgb(250,135,18)" rx="2" ry="2" />
<text  x="876.60" y="271.5" >&lt;built-in_me..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (212,996 us., 2.95%)</title><rect x="325.2" y="69" width="34.7" height="15.0" fill="rgb(227,58,42)" rx="2" ry="2" />
<text  x="328.15" y="79.5" >to..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (637,291 us., 8.82%)</title><rect x="60.3" y="165" width="104.0" height="15.0" fill="rgb(254,190,50)" rx="2" ry="2" />
<text  x="63.31" y="175.5" >nn.Module:_I..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,265 us., 0.06%)</title><rect x="59.6" y="133" width="0.7" height="15.0" fill="rgb(228,111,11)" rx="2" ry="2" />
<text  x="62.61" y="143.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (634,449 us., 8.78%)</title><rect x="873.6" y="101" width="103.6" height="15.0" fill="rgb(235,16,6)" rx="2" ry="2" />
<text  x="876.60" y="111.5" >profiling/ut..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,411 us., 0.02%)</title><rect x="767.5" y="181" width="0.2" height="15.0" fill="rgb(231,1,35)" rx="2" ry="2" />
<text  x="770.48" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (213,203 us., 2.95%)</title><rect x="768.3" y="101" width="34.8" height="15.0" fill="rgb(219,181,49)" rx="2" ry="2" />
<text  x="771.25" y="111.5" >pr..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,462 us., 0.06%)</title><rect x="58.9" y="133" width="0.7" height="15.0" fill="rgb(235,143,27)" rx="2" ry="2" />
<text  x="61.88" y="143.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (3,890 us., 0.05%)</title><rect x="977.3" y="261" width="0.6" height="15.0" fill="rgb(228,9,52)" rx="2" ry="2" />
<text  x="980.31" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (83,811 us., 1.16%)</title><rect x="837.3" y="197" width="13.7" height="15.0" fill="rgb(238,16,12)" rx="2" ry="2" />
<text  x="840.31" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,265 us., 0.06%)</title><rect x="59.6" y="149" width="0.7" height="15.0" fill="rgb(233,199,7)" rx="2" ry="2" />
<text  x="62.61" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(325):__prepare_decoder_attention_mask (1,411 us., 0.02%)</title><rect x="767.5" y="229" width="0.2" height="15.0" fill="rgb(231,0,22)" rx="2" ry="2" />
<text  x="770.48" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (212,996 us., 2.95%)</title><rect x="325.2" y="117" width="34.7" height="15.0" fill="rgb(232,195,0)" rx="2" ry="2" />
<text  x="328.15" y="127.5" >tr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (213,203 us., 2.95%)</title><rect x="768.3" y="133" width="34.8" height="15.0" fill="rgb(221,110,30)" rx="2" ry="2" />
<text  x="771.25" y="143.5" >tr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (2,496,366 us., 34.53%)</title><rect x="359.9" y="133" width="407.5" height="15.0" fill="rgb(233,188,45)" rx="2" ry="2" />
<text  x="362.92" y="143.5" >transformers/models/opt/modeling_opt.py(840):_forward</text>
</g>
<g >
<title>torch/nn/functional.py(1804):_softmax (637,291 us., 8.82%)</title><rect x="60.3" y="245" width="104.0" height="15.0" fill="rgb(205,165,25)" rx="2" ry="2" />
<text  x="63.31" y="255.5" >torch/nn/fun..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (83,811 us., 1.16%)</title><rect x="837.3" y="37" width="13.7" height="15.0" fill="rgb(232,70,18)" rx="2" ry="2" />
<text  x="840.31" y="47.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,298,402 us., 17.96%)</title><rect x="977.9" y="133" width="212.0" height="15.0" fill="rgb(229,109,39)" rx="2" ry="2" />
<text  x="980.95" y="143.5" >nn.Module:_Int8OPTForCausalLM</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (492,508 us., 6.81%)</title><rect x="244.1" y="133" width="80.4" height="15.0" fill="rgb(214,127,6)" rx="2" ry="2" />
<text  x="247.10" y="143.5" >torch/aut..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (1,411 us., 0.02%)</title><rect x="767.5" y="197" width="0.2" height="15.0" fill="rgb(211,31,0)" rx="2" ry="2" />
<text  x="770.48" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (488,626 us., 6.76%)</title><rect x="164.3" y="245" width="79.8" height="15.0" fill="rgb(213,162,41)" rx="2" ry="2" />
<text  x="167.34" y="255.5" >torch_int..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (138,498 us., 1.92%)</title><rect x="851.0" y="181" width="22.6" height="15.0" fill="rgb(217,75,54)" rx="2" ry="2" />
<text  x="853.99" y="191.5" >n..</text>
</g>
<g >
<title>torch_int/nn/linear.py(40):_forward (131,597 us., 1.82%)</title><rect x="803.1" y="245" width="21.4" height="15.0" fill="rgb(208,196,37)" rx="2" ry="2" />
<text  x="806.06" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (138,498 us., 1.92%)</title><rect x="851.0" y="117" width="22.6" height="15.0" fill="rgb(237,24,51)" rx="2" ry="2" />
<text  x="853.99" y="127.5" >n..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,890 us., 0.05%)</title><rect x="977.3" y="197" width="0.6" height="15.0" fill="rgb(249,197,52)" rx="2" ry="2" />
<text  x="980.31" y="207.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (488,626 us., 6.76%)</title><rect x="164.3" y="181" width="79.8" height="15.0" fill="rgb(250,168,27)" rx="2" ry="2" />
<text  x="167.34" y="191.5" >torch_int..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (634,449 us., 8.78%)</title><rect x="873.6" y="213" width="103.6" height="15.0" fill="rgb(247,2,20)" rx="2" ry="2" />
<text  x="876.60" y="223.5" >nn.Module:_I..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (83,811 us., 1.16%)</title><rect x="837.3" y="165" width="13.7" height="15.0" fill="rgb(215,69,18)" rx="2" ry="2" />
<text  x="840.31" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,311 us., 0.05%)</title><rect x="767.7" y="117" width="0.6" height="15.0" fill="rgb(252,19,34)" rx="2" ry="2" />
<text  x="770.71" y="127.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (1,298,402 us., 17.96%)</title><rect x="977.9" y="229" width="212.0" height="15.0" fill="rgb(218,52,44)" rx="2" ry="2" />
<text  x="980.95" y="239.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (213,203 us., 2.95%)</title><rect x="768.3" y="181" width="34.8" height="15.0" fill="rgb(245,224,23)" rx="2" ry="2" />
<text  x="771.25" y="191.5" >nn..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(89):__expand_mask (1,411 us., 0.02%)</title><rect x="767.5" y="245" width="0.2" height="15.0" fill="rgb(228,69,38)" rx="2" ry="2" />
<text  x="770.48" y="255.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (131,597 us., 1.82%)</title><rect x="803.1" y="53" width="21.4" height="15.0" fill="rgb(211,98,28)" rx="2" ry="2" />
<text  x="806.06" y="63.5" >p..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (637,291 us., 8.82%)</title><rect x="60.3" y="197" width="104.0" height="15.0" fill="rgb(237,83,15)" rx="2" ry="2" />
<text  x="63.31" y="207.5" >nn.Module:_I..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,462 us., 0.06%)</title><rect x="58.9" y="149" width="0.7" height="15.0" fill="rgb(249,63,46)" rx="2" ry="2" />
<text  x="61.88" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (138,498 us., 1.92%)</title><rect x="851.0" y="229" width="22.6" height="15.0" fill="rgb(231,92,25)" rx="2" ry="2" />
<text  x="853.99" y="239.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (2,496,366 us., 34.53%)</title><rect x="359.9" y="213" width="407.5" height="15.0" fill="rgb(228,178,11)" rx="2" ry="2" />
<text  x="362.92" y="223.5" >nn.Module:_Int8OPTAttention</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (3,311 us., 0.05%)</title><rect x="767.7" y="133" width="0.6" height="15.0" fill="rgb(209,4,37)" rx="2" ry="2" />
<text  x="770.71" y="143.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (131,597 us., 1.82%)</title><rect x="803.1" y="37" width="21.4" height="15.0" fill="rgb(249,31,53)" rx="2" ry="2" />
<text  x="806.06" y="47.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,411 us., 0.02%)</title><rect x="767.5" y="165" width="0.2" height="15.0" fill="rgb(213,209,31)" rx="2" ry="2" />
<text  x="770.48" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (131,597 us., 1.82%)</title><rect x="803.1" y="229" width="21.4" height="15.0" fill="rgb(249,197,52)" rx="2" ry="2" />
<text  x="806.06" y="239.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (492,508 us., 6.81%)</title><rect x="244.1" y="213" width="80.4" height="15.0" fill="rgb(233,148,43)" rx="2" ry="2" />
<text  x="247.10" y="223.5" >torch_int..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (138,498 us., 1.92%)</title><rect x="851.0" y="133" width="22.6" height="15.0" fill="rgb(226,109,53)" rx="2" ry="2" />
<text  x="853.99" y="143.5" >t..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (637,291 us., 8.82%)</title><rect x="60.3" y="213" width="104.0" height="15.0" fill="rgb(244,206,41)" rx="2" ry="2" />
<text  x="63.31" y="223.5" >torch/autogr..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (4,462 us., 0.06%)</title><rect x="58.9" y="165" width="0.7" height="15.0" fill="rgb(232,146,29)" rx="2" ry="2" />
<text  x="61.88" y="175.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (138,498 us., 1.92%)</title><rect x="851.0" y="85" width="22.6" height="15.0" fill="rgb(226,148,0)" rx="2" ry="2" />
<text  x="853.99" y="95.5" >t..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (634,449 us., 8.78%)</title><rect x="873.6" y="133" width="103.6" height="15.0" fill="rgb(227,51,10)" rx="2" ry="2" />
<text  x="876.60" y="143.5" >transformers..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (4,265 us., 0.06%)</title><rect x="59.6" y="197" width="0.7" height="15.0" fill="rgb(209,209,44)" rx="2" ry="2" />
<text  x="62.61" y="207.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,595 us., 0.02%)</title><rect x="58.6" y="181" width="0.3" height="15.0" fill="rgb(248,59,19)" rx="2" ry="2" />
<text  x="61.62" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (83,811 us., 1.16%)</title><rect x="837.3" y="53" width="13.7" height="15.0" fill="rgb(232,199,13)" rx="2" ry="2" />
<text  x="840.31" y="63.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (1,595 us., 0.02%)</title><rect x="58.6" y="213" width="0.3" height="15.0" fill="rgb(241,117,11)" rx="2" ry="2" />
<text  x="61.62" y="223.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (1,298,402 us., 17.96%)</title><rect x="977.9" y="149" width="212.0" height="15.0" fill="rgb(207,7,2)" rx="2" ry="2" />
<text  x="980.95" y="159.5" >transformers/models/opt/mod..</text>
</g>
<g >
<title>&lt;built-in_method_encode_of_str_object_at_0x7f9f64c604b0&gt; (4,333,501 us., 59.95%)</title><rect x="60.3" y="261" width="707.4" height="15.0" fill="rgb(244,64,5)" rx="2" ry="2" />
<text  x="63.31" y="271.5" >&lt;built-in_method_encode_of_str_object_at_0x7f9f64c604b0&gt;</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (138,498 us., 1.92%)</title><rect x="851.0" y="149" width="22.6" height="15.0" fill="rgb(253,147,37)" rx="2" ry="2" />
<text  x="853.99" y="159.5" >n..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (1,595 us., 0.02%)</title><rect x="58.6" y="165" width="0.3" height="15.0" fill="rgb(228,146,28)" rx="2" ry="2" />
<text  x="61.62" y="175.5" ></text>
</g>
<g >
<title>&lt;built-in_method_layer_norm_of_type_object_at_0x7fa0591689c0&gt; (216,514 us., 3.00%)</title><rect x="767.7" y="261" width="35.4" height="15.0" fill="rgb(222,189,16)" rx="2" ry="2" />
<text  x="770.71" y="271.5" >&lt;b..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(24):_decorate_context (1,298,402 us., 17.96%)</title><rect x="977.9" y="245" width="212.0" height="15.0" fill="rgb(229,140,34)" rx="2" ry="2" />
<text  x="980.95" y="255.5" >torch/autograd/grad_mode.py..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (492,508 us., 6.81%)</title><rect x="244.1" y="181" width="80.4" height="15.0" fill="rgb(208,201,28)" rx="2" ry="2" />
<text  x="247.10" y="191.5" >transform..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (634,449 us., 8.78%)</title><rect x="873.6" y="197" width="103.6" height="15.0" fill="rgb(222,209,52)" rx="2" ry="2" />
<text  x="876.60" y="207.5" >torch_int/nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (83,811 us., 1.16%)</title><rect x="837.3" y="69" width="13.7" height="15.0" fill="rgb(213,148,49)" rx="2" ry="2" />
<text  x="840.31" y="79.5" ></text>
</g>
<g >
<title>nn.Module:_Linear (297,842 us., 4.12%)</title><rect x="10.0" y="229" width="48.6" height="15.0" fill="rgb(212,72,7)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >nn.M..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (3,311 us., 0.05%)</title><rect x="767.7" y="197" width="0.6" height="15.0" fill="rgb(238,64,7)" rx="2" ry="2" />
<text  x="770.71" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (4,003 us., 0.06%)</title><rect x="324.5" y="181" width="0.7" height="15.0" fill="rgb(241,142,30)" rx="2" ry="2" />
<text  x="327.50" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (212,996 us., 2.95%)</title><rect x="325.2" y="133" width="34.7" height="15.0" fill="rgb(218,123,2)" rx="2" ry="2" />
<text  x="328.15" y="143.5" >nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (634,449 us., 8.78%)</title><rect x="873.6" y="149" width="103.6" height="15.0" fill="rgb(218,122,23)" rx="2" ry="2" />
<text  x="876.60" y="159.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (1,595 us., 0.02%)</title><rect x="58.6" y="133" width="0.3" height="15.0" fill="rgb(217,37,9)" rx="2" ry="2" />
<text  x="61.62" y="143.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (2,496,366 us., 34.53%)</title><rect x="359.9" y="149" width="407.5" height="15.0" fill="rgb(222,3,23)" rx="2" ry="2" />
<text  x="362.92" y="159.5" >nn.Module:_Int8OPTDecoder</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (213,203 us., 2.95%)</title><rect x="768.3" y="117" width="34.8" height="15.0" fill="rgb(205,29,40)" rx="2" ry="2" />
<text  x="771.25" y="127.5" >nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (78,236 us., 1.08%)</title><rect x="824.5" y="181" width="12.8" height="15.0" fill="rgb(217,190,33)" rx="2" ry="2" />
<text  x="827.54" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (2,496,366 us., 34.53%)</title><rect x="359.9" y="165" width="407.5" height="15.0" fill="rgb(228,169,54)" rx="2" ry="2" />
<text  x="362.92" y="175.5" >torch_int/nn/opt.py(346):_forward</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,890 us., 0.05%)</title><rect x="977.3" y="213" width="0.6" height="15.0" fill="rgb(236,25,23)" rx="2" ry="2" />
<text  x="980.31" y="223.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (492,508 us., 6.81%)</title><rect x="244.1" y="165" width="80.4" height="15.0" fill="rgb(238,14,3)" rx="2" ry="2" />
<text  x="247.10" y="175.5" >nn.Module..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (212,996 us., 2.95%)</title><rect x="325.2" y="101" width="34.7" height="15.0" fill="rgb(242,170,12)" rx="2" ry="2" />
<text  x="328.15" y="111.5" >nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (488,626 us., 6.76%)</title><rect x="164.3" y="165" width="79.8" height="15.0" fill="rgb(227,102,46)" rx="2" ry="2" />
<text  x="167.34" y="175.5" >nn.Module..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (138,498 us., 1.92%)</title><rect x="851.0" y="165" width="22.6" height="15.0" fill="rgb(225,136,31)" rx="2" ry="2" />
<text  x="853.99" y="175.5" >t..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (637,291 us., 8.82%)</title><rect x="60.3" y="181" width="104.0" height="15.0" fill="rgb(229,38,54)" rx="2" ry="2" />
<text  x="63.31" y="191.5" >torch_int/nn..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (637,291 us., 8.82%)</title><rect x="60.3" y="149" width="104.0" height="15.0" fill="rgb(239,84,13)" rx="2" ry="2" />
<text  x="63.31" y="159.5" >torch_int/nn..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (3,311 us., 0.05%)</title><rect x="767.7" y="149" width="0.6" height="15.0" fill="rgb(215,0,21)" rx="2" ry="2" />
<text  x="770.71" y="159.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (213,203 us., 2.95%)</title><rect x="768.3" y="85" width="34.8" height="15.0" fill="rgb(228,78,20)" rx="2" ry="2" />
<text  x="771.25" y="95.5" >to..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (3,890 us., 0.05%)</title><rect x="977.3" y="181" width="0.6" height="15.0" fill="rgb(233,140,49)" rx="2" ry="2" />
<text  x="980.31" y="191.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (2,496,366 us., 34.53%)</title><rect x="359.9" y="101" width="407.5" height="15.0" fill="rgb(224,106,54)" rx="2" ry="2" />
<text  x="362.92" y="111.5" >profiling/utils.py(18):_profile_model</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (131,597 us., 1.82%)</title><rect x="803.1" y="197" width="21.4" height="15.0" fill="rgb(253,57,17)" rx="2" ry="2" />
<text  x="806.06" y="207.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (4,462 us., 0.06%)</title><rect x="58.9" y="181" width="0.7" height="15.0" fill="rgb(209,41,13)" rx="2" ry="2" />
<text  x="61.88" y="191.5" ></text>
</g>
<g >
<title>nn.Module:_LayerNormQ (488,626 us., 6.76%)</title><rect x="164.3" y="229" width="79.8" height="15.0" fill="rgb(229,96,54)" rx="2" ry="2" />
<text  x="167.34" y="239.5" >nn.Module..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,298,402 us., 17.96%)</title><rect x="977.9" y="117" width="212.0" height="15.0" fill="rgb(253,21,40)" rx="2" ry="2" />
<text  x="980.95" y="127.5" >profiling/utils.py(18):_pro..</text>
</g>
<g >
<title>nn.Module:_OPTLearnedPositionalEmbedding (1,595 us., 0.02%)</title><rect x="58.6" y="229" width="0.3" height="15.0" fill="rgb(216,110,32)" rx="2" ry="2" />
<text  x="61.62" y="239.5" ></text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (297,842 us., 4.12%)</title><rect x="10.0" y="213" width="48.6" height="15.0" fill="rgb(210,161,27)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >tran..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (212,996 us., 2.95%)</title><rect x="325.2" y="149" width="34.7" height="15.0" fill="rgb(222,93,42)" rx="2" ry="2" />
<text  x="328.15" y="159.5" >to..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (1,595 us., 0.02%)</title><rect x="58.6" y="245" width="0.3" height="15.0" fill="rgb(244,2,33)" rx="2" ry="2" />
<text  x="61.62" y="255.5" ></text>
</g>
<g >
<title>torch_int/nn/linear.py(225):_forward (162,047 us., 2.24%)</title><rect x="824.5" y="245" width="26.5" height="15.0" fill="rgb(229,184,13)" rx="2" ry="2" />
<text  x="827.54" y="255.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (131,597 us., 1.82%)</title><rect x="803.1" y="165" width="21.4" height="15.0" fill="rgb(250,36,14)" rx="2" ry="2" />
<text  x="806.06" y="175.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (4,462 us., 0.06%)</title><rect x="58.9" y="197" width="0.7" height="15.0" fill="rgb(216,202,42)" rx="2" ry="2" />
<text  x="61.88" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (131,597 us., 1.82%)</title><rect x="803.1" y="101" width="21.4" height="15.0" fill="rgb(247,81,33)" rx="2" ry="2" />
<text  x="806.06" y="111.5" >n..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (212,996 us., 2.95%)</title><rect x="325.2" y="181" width="34.7" height="15.0" fill="rgb(212,105,6)" rx="2" ry="2" />
<text  x="328.15" y="191.5" >to..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,595 us., 0.02%)</title><rect x="58.6" y="149" width="0.3" height="15.0" fill="rgb(216,137,46)" rx="2" ry="2" />
<text  x="61.62" y="159.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (78,236 us., 1.08%)</title><rect x="824.5" y="197" width="12.8" height="15.0" fill="rgb(245,43,1)" rx="2" ry="2" />
<text  x="827.54" y="207.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (492,508 us., 6.81%)</title><rect x="244.1" y="229" width="80.4" height="15.0" fill="rgb(235,183,11)" rx="2" ry="2" />
<text  x="247.10" y="239.5" >nn.Module..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (213,203 us., 2.95%)</title><rect x="768.3" y="149" width="34.8" height="15.0" fill="rgb(226,205,21)" rx="2" ry="2" />
<text  x="771.25" y="159.5" >nn..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (492,508 us., 6.81%)</title><rect x="244.1" y="245" width="80.4" height="15.0" fill="rgb(219,91,18)" rx="2" ry="2" />
<text  x="247.10" y="255.5" >torch_int..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (83,811 us., 1.16%)</title><rect x="837.3" y="117" width="13.7" height="15.0" fill="rgb(249,137,11)" rx="2" ry="2" />
<text  x="840.31" y="127.5" ></text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (1,411 us., 0.02%)</title><rect x="767.5" y="149" width="0.2" height="15.0" fill="rgb(226,144,24)" rx="2" ry="2" />
<text  x="770.48" y="159.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoder (3,311 us., 0.05%)</title><rect x="767.7" y="181" width="0.6" height="15.0" fill="rgb(245,198,6)" rx="2" ry="2" />
<text  x="770.71" y="191.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (131,597 us., 1.82%)</title><rect x="803.1" y="149" width="21.4" height="15.0" fill="rgb(229,203,31)" rx="2" ry="2" />
<text  x="806.06" y="159.5" >t..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (4,265 us., 0.06%)</title><rect x="59.6" y="117" width="0.7" height="15.0" fill="rgb(213,171,9)" rx="2" ry="2" />
<text  x="62.61" y="127.5" ></text>
</g>
<g >
<title>&lt;built-in_method_linear_a8_w8_b8_o8_of_PyCapsule_object_at_0x7f9f64602810&gt; (131,597 us., 1.82%)</title><rect x="803.1" y="261" width="21.4" height="15.0" fill="rgb(218,8,38)" rx="2" ry="2" />
<text  x="806.06" y="271.5" >&lt;..</text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (131,597 us., 1.82%)</title><rect x="803.1" y="117" width="21.4" height="15.0" fill="rgb(233,51,45)" rx="2" ry="2" />
<text  x="806.06" y="127.5" >t..</text>
</g>
<g >
<title>nn.Module:_Int8OPTAttention (212,996 us., 2.95%)</title><rect x="325.2" y="197" width="34.7" height="15.0" fill="rgb(212,135,14)" rx="2" ry="2" />
<text  x="328.15" y="207.5" >nn..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(840):_forward (83,811 us., 1.16%)</title><rect x="837.3" y="85" width="13.7" height="15.0" fill="rgb(227,90,25)" rx="2" ry="2" />
<text  x="840.31" y="95.5" ></text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (637,291 us., 8.82%)</title><rect x="60.3" y="101" width="104.0" height="15.0" fill="rgb(253,140,23)" rx="2" ry="2" />
<text  x="63.31" y="111.5" >nn.Module:_I..</text>
</g>
<g >
<title>torch_int/nn/opt.py(72):_forward (212,996 us., 2.95%)</title><rect x="325.2" y="229" width="34.7" height="15.0" fill="rgb(247,194,10)" rx="2" ry="2" />
<text  x="328.15" y="239.5" >to..</text>
</g>
<g >
<title>all (7,228,536 us., 100%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(246,93,15)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (4,265 us., 0.06%)</title><rect x="59.6" y="181" width="0.7" height="15.0" fill="rgb(232,196,37)" rx="2" ry="2" />
<text  x="62.61" y="191.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (488,626 us., 6.76%)</title><rect x="164.3" y="101" width="79.8" height="15.0" fill="rgb(209,163,4)" rx="2" ry="2" />
<text  x="167.34" y="111.5" >torch/aut..</text>
</g>
<g >
<title>profiling/utils.py(18):_profile_model (138,498 us., 1.92%)</title><rect x="851.0" y="101" width="22.6" height="15.0" fill="rgb(223,221,20)" rx="2" ry="2" />
<text  x="853.99" y="111.5" >p..</text>
</g>
<g >
<title>nn.Module:_Int8OPTForCausalLM (297,842 us., 4.12%)</title><rect x="10.0" y="197" width="48.6" height="15.0" fill="rgb(246,28,6)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >nn.M..</text>
</g>
<g >
<title>torch_int/nn/opt.py(213):_forward (1,298,402 us., 17.96%)</title><rect x="977.9" y="213" width="212.0" height="15.0" fill="rgb(248,157,36)" rx="2" ry="2" />
<text  x="980.95" y="223.5" >torch_int/nn/opt.py(213):_f..</text>
</g>
<g >
<title>transformers/models/opt/modeling_opt.py(114):_forward (4,265 us., 0.06%)</title><rect x="59.6" y="213" width="0.7" height="15.0" fill="rgb(206,219,43)" rx="2" ry="2" />
<text  x="62.61" y="223.5" ></text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (297,842 us., 4.12%)</title><rect x="10.0" y="165" width="48.6" height="15.0" fill="rgb(231,197,49)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >torc..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (488,626 us., 6.76%)</title><rect x="164.3" y="197" width="79.8" height="15.0" fill="rgb(229,191,49)" rx="2" ry="2" />
<text  x="167.34" y="207.5" >nn.Module..</text>
</g>
<g >
<title>torch_int/nn/fused.py(13):_forward (213,203 us., 2.95%)</title><rect x="768.3" y="229" width="34.8" height="15.0" fill="rgb(218,200,54)" rx="2" ry="2" />
<text  x="771.25" y="239.5" >to..</text>
</g>
<g >
<title>torch_int/nn/opt.py(69):__shape (212,996 us., 2.95%)</title><rect x="325.2" y="245" width="34.7" height="15.0" fill="rgb(209,144,7)" rx="2" ry="2" />
<text  x="328.15" y="255.5" >to..</text>
</g>
<g >
<title>nn.Module:_Int8OPTDecoderLayer (1,298,402 us., 17.96%)</title><rect x="977.9" y="197" width="212.0" height="15.0" fill="rgb(247,228,14)" rx="2" ry="2" />
<text  x="980.95" y="207.5" >nn.Module:_Int8OPTDecoderLa..</text>
</g>
<g >
<title>torch/autograd/grad_mode.py(27):_decorate_context (637,291 us., 8.82%)</title><rect x="60.3" y="69" width="104.0" height="15.0" fill="rgb(237,47,18)" rx="2" ry="2" />
<text  x="63.31" y="79.5" >torch/autogr..</text>
</g>
<g >
<title>&lt;built-in_method_cumsum_of_type_object_at_0x7fa0591689c0&gt; (1,595 us., 0.02%)</title><rect x="58.6" y="261" width="0.3" height="15.0" fill="rgb(253,200,0)" rx="2" ry="2" />
<text  x="61.62" y="271.5" ></text>
</g>
<g >
<title>torch_int/nn/opt.py(346):_forward (634,449 us., 8.78%)</title><rect x="873.6" y="165" width="103.6" height="15.0" fill="rgb(209,74,0)" rx="2" ry="2" />
<text  x="876.60" y="175.5" >torch_int/nn..</text>
</g>
<g >
<title>nn.Module:_W8A8B8O8Linear (131,597 us., 1.82%)</title><rect x="803.1" y="213" width="21.4" height="15.0" fill="rgb(217,31,1)" rx="2" ry="2" />
<text  x="806.06" y="223.5" >n..</text>
</g>
</g>
</svg>
